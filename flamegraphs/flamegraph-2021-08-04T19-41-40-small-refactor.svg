<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1254" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1237.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1237.00"> </text><svg id="frames" x="10" width="1180" total_samples="1817"><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="0.0000%" y="1173" width="0.0550%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.11%)</title><rect x="0.0550%" y="1173" width="0.1101%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.3050%" y="1183.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (1 samples, 0.06%)</title><rect x="0.1651%" y="1157" width="0.0550%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4151%" y="1167.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="0.2201%" y="1157" width="0.0550%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.4701%" y="1167.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="0.2752%" y="1157" width="0.0550%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.5252%" y="1167.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="0.3302%" y="1157" width="0.0550%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="0.5802%" y="1167.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.06%)</title><rect x="0.3302%" y="1141" width="0.0550%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="0.5802%" y="1151.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.3853%" y="1157" width="0.0550%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="0.6353%" y="1167.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.77%)</title><rect x="0.4403%" y="1157" width="0.7705%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="14"/><text x="0.6903%" y="1167.50"></text></g><g><title>_int_free (1 samples, 0.06%)</title><rect x="1.2108%" y="1157" width="0.0550%" height="15" fill="rgb(220,122,19)" fg:x="22" fg:w="1"/><text x="1.4608%" y="1167.50"></text></g><g><title>_int_malloc (2 samples, 0.11%)</title><rect x="1.2658%" y="1157" width="0.1101%" height="15" fill="rgb(250,228,42)" fg:x="23" fg:w="2"/><text x="1.5158%" y="1167.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="1.3759%" y="1157" width="0.0550%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="1"/><text x="1.6259%" y="1167.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.11%)</title><rect x="1.4309%" y="1157" width="0.1101%" height="15" fill="rgb(216,20,37)" fg:x="26" fg:w="2"/><text x="1.6809%" y="1167.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (1 samples, 0.06%)</title><rect x="1.5410%" y="1157" width="0.0550%" height="15" fill="rgb(206,188,39)" fg:x="28" fg:w="1"/><text x="1.7910%" y="1167.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.11%)</title><rect x="1.5960%" y="1157" width="0.1101%" height="15" fill="rgb(217,207,13)" fg:x="29" fg:w="2"/><text x="1.8460%" y="1167.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (100 samples, 5.50%)</title><rect x="1.7061%" y="1157" width="5.5036%" height="15" fill="rgb(231,73,38)" fg:x="31" fg:w="100"/><text x="1.9561%" y="1167.50">alloc::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.11%)</title><rect x="7.2097%" y="1157" width="0.1101%" height="15" fill="rgb(225,20,46)" fg:x="131" fg:w="2"/><text x="7.4597%" y="1167.50"></text></g><g><title>[anon] (131 samples, 7.21%)</title><rect x="0.1651%" y="1173" width="7.2097%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="131"/><text x="0.4151%" y="1183.50">[anon]</text></g><g><title>sweepers::solver::set_fmt (1 samples, 0.06%)</title><rect x="7.3198%" y="1157" width="0.0550%" height="15" fill="rgb(221,200,47)" fg:x="133" fg:w="1"/><text x="7.5698%" y="1167.50"></text></g><g><title>[sweepers-4c2ea9598e7bd92e] (2 samples, 0.11%)</title><rect x="7.3748%" y="1173" width="0.1101%" height="15" fill="rgb(226,26,5)" fg:x="134" fg:w="2"/><text x="7.6248%" y="1183.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.11%)</title><rect x="7.3748%" y="1157" width="0.1101%" height="15" fill="rgb(249,33,26)" fg:x="134" fg:w="2"/><text x="7.6248%" y="1167.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="7.4849%" y="1157" width="0.0550%" height="15" fill="rgb(235,183,28)" fg:x="136" fg:w="1"/><text x="7.7349%" y="1167.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.17%)</title><rect x="7.5399%" y="1157" width="0.1651%" height="15" fill="rgb(221,5,38)" fg:x="137" fg:w="3"/><text x="7.7899%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (49 samples, 2.70%)</title><rect x="7.7050%" y="1157" width="2.6968%" height="15" fill="rgb(247,18,42)" fg:x="140" fg:w="49"/><text x="7.9550%" y="1167.50">&lt;a..</text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="10.4018%" y="1157" width="0.0550%" height="15" fill="rgb(241,131,45)" fg:x="189" fg:w="1"/><text x="10.6518%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.17%)</title><rect x="10.4568%" y="1157" width="0.1651%" height="15" fill="rgb(249,31,29)" fg:x="190" fg:w="3"/><text x="10.7068%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.17%)</title><rect x="10.6219%" y="1157" width="0.1651%" height="15" fill="rgb(225,111,53)" fg:x="193" fg:w="3"/><text x="10.8719%" y="1167.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="10.7870%" y="1157" width="0.0550%" height="15" fill="rgb(238,160,17)" fg:x="196" fg:w="1"/><text x="11.0370%" y="1167.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (4 samples, 0.22%)</title><rect x="10.8420%" y="1157" width="0.2201%" height="15" fill="rgb(214,148,48)" fg:x="197" fg:w="4"/><text x="11.0920%" y="1167.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (24 samples, 1.32%)</title><rect x="11.0622%" y="1157" width="1.3209%" height="15" fill="rgb(232,36,49)" fg:x="201" fg:w="24"/><text x="11.3122%" y="1167.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (9 samples, 0.50%)</title><rect x="12.3830%" y="1157" width="0.4953%" height="15" fill="rgb(209,103,24)" fg:x="225" fg:w="9"/><text x="12.6330%" y="1167.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.11%)</title><rect x="12.8784%" y="1157" width="0.1101%" height="15" fill="rgb(229,88,8)" fg:x="234" fg:w="2"/><text x="13.1284%" y="1167.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.11%)</title><rect x="12.9884%" y="1157" width="0.1101%" height="15" fill="rgb(213,181,19)" fg:x="236" fg:w="2"/><text x="13.2384%" y="1167.50"></text></g><g><title>[unknown] (103 samples, 5.67%)</title><rect x="7.4849%" y="1173" width="5.6687%" height="15" fill="rgb(254,191,54)" fg:x="136" fg:w="103"/><text x="7.7349%" y="1183.50">[unknow..</text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (1 samples, 0.06%)</title><rect x="13.0985%" y="1157" width="0.0550%" height="15" fill="rgb(241,83,37)" fg:x="238" fg:w="1"/><text x="13.3485%" y="1167.50"></text></g><g><title>__GI_madvise (1 samples, 0.06%)</title><rect x="13.1535%" y="1093" width="0.0550%" height="15" fill="rgb(233,36,39)" fg:x="239" fg:w="1"/><text x="13.4035%" y="1103.50"></text></g><g><title>__malloc_arena_thread_freeres (2 samples, 0.11%)</title><rect x="13.1535%" y="1141" width="0.1101%" height="15" fill="rgb(226,3,54)" fg:x="239" fg:w="2"/><text x="13.4035%" y="1151.50"></text></g><g><title>__GI___libc_free (2 samples, 0.11%)</title><rect x="13.1535%" y="1125" width="0.1101%" height="15" fill="rgb(245,192,40)" fg:x="239" fg:w="2"/><text x="13.4035%" y="1135.50"></text></g><g><title>_int_free (2 samples, 0.11%)</title><rect x="13.1535%" y="1109" width="0.1101%" height="15" fill="rgb(238,167,29)" fg:x="239" fg:w="2"/><text x="13.4035%" y="1119.50"></text></g><g><title>__GI_munmap (1 samples, 0.06%)</title><rect x="13.2086%" y="1093" width="0.0550%" height="15" fill="rgb(232,182,51)" fg:x="240" fg:w="1"/><text x="13.4586%" y="1103.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="13.2636%" y="773" width="0.0550%" height="15" fill="rgb(231,60,39)" fg:x="241" fg:w="1"/><text x="13.5136%" y="783.50"></text></g><g><title>__GI___libc_free (1 samples, 0.06%)</title><rect x="13.2636%" y="757" width="0.0550%" height="15" fill="rgb(208,69,12)" fg:x="241" fg:w="1"/><text x="13.5136%" y="767.50"></text></g><g><title>_int_free (1 samples, 0.06%)</title><rect x="13.2636%" y="741" width="0.0550%" height="15" fill="rgb(235,93,37)" fg:x="241" fg:w="1"/><text x="13.5136%" y="751.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.06%)</title><rect x="13.2636%" y="725" width="0.0550%" height="15" fill="rgb(213,116,39)" fg:x="241" fg:w="1"/><text x="13.5136%" y="735.50"></text></g><g><title>&lt;sweepers::solver::MaxRemoveLocations as sweepers::solver::Rule&gt;::derive (2 samples, 0.11%)</title><rect x="13.3187%" y="757" width="0.1101%" height="15" fill="rgb(222,207,29)" fg:x="242" fg:w="2"/><text x="13.5687%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.11%)</title><rect x="13.3187%" y="741" width="0.1101%" height="15" fill="rgb(206,96,30)" fg:x="242" fg:w="2"/><text x="13.5687%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.11%)</title><rect x="13.3187%" y="725" width="0.1101%" height="15" fill="rgb(218,138,4)" fg:x="242" fg:w="2"/><text x="13.5687%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as sweepers::solver::Without&lt;T&gt;&gt;::without (2 samples, 0.11%)</title><rect x="13.3187%" y="709" width="0.1101%" height="15" fill="rgb(250,191,14)" fg:x="242" fg:w="2"/><text x="13.5687%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::remove (1 samples, 0.06%)</title><rect x="13.3737%" y="693" width="0.0550%" height="15" fill="rgb(239,60,40)" fg:x="243" fg:w="1"/><text x="13.6237%" y="703.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.06%)</title><rect x="13.3737%" y="677" width="0.0550%" height="15" fill="rgb(206,27,48)" fg:x="243" fg:w="1"/><text x="13.6237%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.28%)</title><rect x="17.4463%" y="693" width="0.2752%" height="15" fill="rgb(225,35,8)" fg:x="317" fg:w="5"/><text x="17.6963%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (2 samples, 0.11%)</title><rect x="17.6114%" y="677" width="0.1101%" height="15" fill="rgb(250,213,24)" fg:x="320" fg:w="2"/><text x="17.8614%" y="687.50"></text></g><g><title>__GI___libc_malloc (33 samples, 1.82%)</title><rect x="17.9967%" y="677" width="1.8162%" height="15" fill="rgb(247,123,22)" fg:x="327" fg:w="33"/><text x="18.2467%" y="687.50">_..</text></g><g><title>_int_malloc (26 samples, 1.43%)</title><rect x="18.3819%" y="661" width="1.4309%" height="15" fill="rgb(231,138,38)" fg:x="334" fg:w="26"/><text x="18.6319%" y="671.50"></text></g><g><title>sysmalloc (22 samples, 1.21%)</title><rect x="18.6021%" y="645" width="1.2108%" height="15" fill="rgb(231,145,46)" fg:x="338" fg:w="22"/><text x="18.8521%" y="655.50"></text></g><g><title>__GI___mprotect (8 samples, 0.44%)</title><rect x="19.3726%" y="629" width="0.4403%" height="15" fill="rgb(251,118,11)" fg:x="352" fg:w="8"/><text x="19.6226%" y="639.50"></text></g><g><title>__rdl_alloc (2 samples, 0.11%)</title><rect x="19.8129%" y="677" width="0.1101%" height="15" fill="rgb(217,147,25)" fg:x="360" fg:w="2"/><text x="20.0629%" y="687.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.11%)</title><rect x="19.8129%" y="661" width="0.1101%" height="15" fill="rgb(247,81,37)" fg:x="360" fg:w="2"/><text x="20.0629%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.39%)</title><rect x="19.9229%" y="677" width="0.3853%" height="15" fill="rgb(209,12,38)" fg:x="362" fg:w="7"/><text x="20.1729%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.22%)</title><rect x="20.0881%" y="661" width="0.2201%" height="15" fill="rgb(227,1,9)" fg:x="365" fg:w="4"/><text x="20.3381%" y="671.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (67 samples, 3.69%)</title><rect x="17.1712%" y="725" width="3.6874%" height="15" fill="rgb(248,47,43)" fg:x="312" fg:w="67"/><text x="17.4212%" y="735.50">&lt;&amp;al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (63 samples, 3.47%)</title><rect x="17.3913%" y="709" width="3.4673%" height="15" fill="rgb(221,10,30)" fg:x="316" fg:w="63"/><text x="17.6413%" y="719.50">&lt;co..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (57 samples, 3.14%)</title><rect x="17.7215%" y="693" width="3.1370%" height="15" fill="rgb(210,229,1)" fg:x="322" fg:w="57"/><text x="17.9715%" y="703.50">all..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (10 samples, 0.55%)</title><rect x="20.3082%" y="677" width="0.5504%" height="15" fill="rgb(222,148,37)" fg:x="369" fg:w="10"/><text x="20.5582%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.10%)</title><rect x="21.4640%" y="709" width="1.1007%" height="15" fill="rgb(234,67,33)" fg:x="390" fg:w="20"/><text x="21.7140%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (3 samples, 0.17%)</title><rect x="25.1513%" y="693" width="0.1651%" height="15" fill="rgb(247,98,35)" fg:x="457" fg:w="3"/><text x="25.4013%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (11 samples, 0.61%)</title><rect x="25.3165%" y="693" width="0.6054%" height="15" fill="rgb(247,138,52)" fg:x="460" fg:w="11"/><text x="25.5665%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (99 samples, 5.45%)</title><rect x="20.8586%" y="725" width="5.4485%" height="15" fill="rgb(213,79,30)" fg:x="379" fg:w="99"/><text x="21.1086%" y="735.50">&lt;core::..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (68 samples, 3.74%)</title><rect x="22.5647%" y="709" width="3.7424%" height="15" fill="rgb(246,177,23)" fg:x="410" fg:w="68"/><text x="22.8147%" y="719.50">allo..</text></g><g><title>alloc::collections::btree::navigate::full_range (7 samples, 0.39%)</title><rect x="25.9218%" y="693" width="0.3853%" height="15" fill="rgb(230,62,27)" fg:x="471" fg:w="7"/><text x="26.1718%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 4.07%)</title><rect x="26.3071%" y="725" width="4.0726%" height="15" fill="rgb(216,154,8)" fg:x="478" fg:w="74"/><text x="26.5571%" y="735.50">&lt;has..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (14 samples, 0.77%)</title><rect x="50.1376%" y="709" width="0.7705%" height="15" fill="rgb(244,35,45)" fg:x="911" fg:w="14"/><text x="50.3876%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (55 samples, 3.03%)</title><rect x="50.9081%" y="709" width="3.0270%" height="15" fill="rgb(251,115,12)" fg:x="925" fg:w="55"/><text x="51.1581%" y="719.50">all..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (456 samples, 25.10%)</title><rect x="30.3797%" y="725" width="25.0963%" height="15" fill="rgb(240,54,50)" fg:x="552" fg:w="456"/><text x="30.6297%" y="735.50">alloc::collections::btree::set::BTreeSet..</text></g><g><title>alloc::collections::btree::navigate::full_range (28 samples, 1.54%)</title><rect x="53.9351%" y="709" width="1.5410%" height="15" fill="rgb(233,84,52)" fg:x="980" fg:w="28"/><text x="54.1851%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.39%)</title><rect x="55.4761%" y="661" width="0.3853%" height="15" fill="rgb(207,117,47)" fg:x="1008" fg:w="7"/><text x="55.7261%" y="671.50"></text></g><g><title>&lt;sweepers::solver::MaxWithinMinCombinator as sweepers::solver::Rule&gt;::derive (773 samples, 42.54%)</title><rect x="13.4287%" y="757" width="42.5427%" height="15" fill="rgb(249,43,39)" fg:x="244" fg:w="773"/><text x="13.6787%" y="767.50">&lt;sweepers::solver::MaxWithinMinCombinator as sweepers::solver::Rule&gt;::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (773 samples, 42.54%)</title><rect x="13.4287%" y="741" width="42.5427%" height="15" fill="rgb(209,38,44)" fg:x="244" fg:w="773"/><text x="13.6787%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.50%)</title><rect x="55.4761%" y="725" width="0.4953%" height="15" fill="rgb(236,212,23)" fg:x="1008" fg:w="9"/><text x="55.7261%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.50%)</title><rect x="55.4761%" y="709" width="0.4953%" height="15" fill="rgb(242,79,21)" fg:x="1008" fg:w="9"/><text x="55.7261%" y="719.50"></text></g><g><title>__GI___libc_realloc (9 samples, 0.50%)</title><rect x="55.4761%" y="693" width="0.4953%" height="15" fill="rgb(211,96,35)" fg:x="1008" fg:w="9"/><text x="55.7261%" y="703.50"></text></g><g><title>_int_realloc (9 samples, 0.50%)</title><rect x="55.4761%" y="677" width="0.4953%" height="15" fill="rgb(253,215,40)" fg:x="1008" fg:w="9"/><text x="55.7261%" y="687.50"></text></g><g><title>_int_malloc (2 samples, 0.11%)</title><rect x="55.8613%" y="661" width="0.1101%" height="15" fill="rgb(211,81,21)" fg:x="1015" fg:w="2"/><text x="56.1113%" y="671.50"></text></g><g><title>sysmalloc (2 samples, 0.11%)</title><rect x="55.8613%" y="645" width="0.1101%" height="15" fill="rgb(208,190,38)" fg:x="1015" fg:w="2"/><text x="56.1113%" y="655.50"></text></g><g><title>__GI___mprotect (1 samples, 0.06%)</title><rect x="55.9163%" y="629" width="0.0550%" height="15" fill="rgb(235,213,38)" fg:x="1016" fg:w="1"/><text x="56.1663%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.77%)</title><rect x="61.5300%" y="693" width="0.7705%" height="15" fill="rgb(237,122,38)" fg:x="1118" fg:w="14"/><text x="61.7800%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (6 samples, 0.33%)</title><rect x="61.9703%" y="677" width="0.3302%" height="15" fill="rgb(244,218,35)" fg:x="1126" fg:w="6"/><text x="62.2203%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="62.3005%" y="693" width="0.0550%" height="15" fill="rgb(240,68,47)" fg:x="1132" fg:w="1"/><text x="62.5505%" y="703.50"></text></g><g><title>__GI___libc_malloc (67 samples, 3.69%)</title><rect x="62.7958%" y="677" width="3.6874%" height="15" fill="rgb(210,16,53)" fg:x="1141" fg:w="67"/><text x="63.0458%" y="687.50">__GI..</text></g><g><title>_int_malloc (61 samples, 3.36%)</title><rect x="63.1260%" y="661" width="3.3572%" height="15" fill="rgb(235,124,12)" fg:x="1147" fg:w="61"/><text x="63.3760%" y="671.50">_in..</text></g><g><title>sysmalloc (50 samples, 2.75%)</title><rect x="63.7314%" y="645" width="2.7518%" height="15" fill="rgb(224,169,11)" fg:x="1158" fg:w="50"/><text x="63.9814%" y="655.50">sy..</text></g><g><title>__GI___mprotect (25 samples, 1.38%)</title><rect x="65.1073%" y="629" width="1.3759%" height="15" fill="rgb(250,166,2)" fg:x="1183" fg:w="25"/><text x="65.3573%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="66.4832%" y="677" width="0.0550%" height="15" fill="rgb(242,216,29)" fg:x="1208" fg:w="1"/><text x="66.7332%" y="687.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="66.4832%" y="661" width="0.0550%" height="15" fill="rgb(230,116,27)" fg:x="1208" fg:w="1"/><text x="66.7332%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (11 samples, 0.61%)</title><rect x="66.5382%" y="677" width="0.6054%" height="15" fill="rgb(228,99,48)" fg:x="1209" fg:w="11"/><text x="66.7882%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (9 samples, 0.50%)</title><rect x="66.6483%" y="661" width="0.4953%" height="15" fill="rgb(253,11,6)" fg:x="1211" fg:w="9"/><text x="66.8983%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (110 samples, 6.05%)</title><rect x="61.4199%" y="709" width="6.0539%" height="15" fill="rgb(247,143,39)" fg:x="1116" fg:w="110"/><text x="61.6699%" y="719.50">&lt;core::i..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (93 samples, 5.12%)</title><rect x="62.3555%" y="693" width="5.1183%" height="15" fill="rgb(236,97,10)" fg:x="1133" fg:w="93"/><text x="62.6055%" y="703.50">alloc:..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.33%)</title><rect x="67.1436%" y="677" width="0.3302%" height="15" fill="rgb(233,208,19)" fg:x="1220" fg:w="6"/><text x="67.3936%" y="687.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (122 samples, 6.71%)</title><rect x="60.8145%" y="725" width="6.7144%" height="15" fill="rgb(216,164,2)" fg:x="1105" fg:w="122"/><text x="61.0645%" y="735.50">&lt;&amp;alloc::..</text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.06%)</title><rect x="67.4739%" y="709" width="0.0550%" height="15" fill="rgb(220,129,5)" fg:x="1226" fg:w="1"/><text x="67.7239%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.33%)</title><rect x="67.5839%" y="709" width="0.3302%" height="15" fill="rgb(242,17,10)" fg:x="1228" fg:w="6"/><text x="67.8339%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.06%)</title><rect x="68.5195%" y="693" width="0.0550%" height="15" fill="rgb(242,107,0)" fg:x="1245" fg:w="1"/><text x="68.7695%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 1.16%)</title><rect x="67.5289%" y="725" width="1.1558%" height="15" fill="rgb(251,28,31)" fg:x="1227" fg:w="21"/><text x="67.7789%" y="735.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (14 samples, 0.77%)</title><rect x="67.9141%" y="709" width="0.7705%" height="15" fill="rgb(233,223,10)" fg:x="1234" fg:w="14"/><text x="68.1641%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (2 samples, 0.11%)</title><rect x="68.5746%" y="693" width="0.1101%" height="15" fill="rgb(215,21,27)" fg:x="1246" fg:w="2"/><text x="68.8246%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 4.68%)</title><rect x="68.6846%" y="725" width="4.6780%" height="15" fill="rgb(232,23,21)" fg:x="1248" fg:w="85"/><text x="68.9346%" y="735.50">&lt;hash..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (9 samples, 0.50%)</title><rect x="87.2867%" y="709" width="0.4953%" height="15" fill="rgb(244,5,23)" fg:x="1586" fg:w="9"/><text x="87.5367%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (39 samples, 2.15%)</title><rect x="87.7821%" y="709" width="2.1464%" height="15" fill="rgb(226,81,46)" fg:x="1595" fg:w="39"/><text x="88.0321%" y="719.50">a..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (317 samples, 17.45%)</title><rect x="73.3627%" y="725" width="17.4463%" height="15" fill="rgb(247,70,30)" fg:x="1333" fg:w="317"/><text x="73.6127%" y="735.50">alloc::collections::btree::..</text></g><g><title>alloc::collections::btree::navigate::full_range (16 samples, 0.88%)</title><rect x="89.9285%" y="709" width="0.8806%" height="15" fill="rgb(212,68,19)" fg:x="1634" fg:w="16"/><text x="90.1785%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.28%)</title><rect x="90.8090%" y="661" width="0.2752%" height="15" fill="rgb(240,187,13)" fg:x="1650" fg:w="5"/><text x="91.0590%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,414 samples, 77.82%)</title><rect x="13.3187%" y="773" width="77.8206%" height="15" fill="rgb(223,113,26)" fg:x="242" fg:w="1414"/><text x="13.5687%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;sweepers::solver::MinWithinMaxCombinator as sweepers::solver::Rule&gt;::derive (639 samples, 35.17%)</title><rect x="55.9714%" y="757" width="35.1679%" height="15" fill="rgb(206,192,2)" fg:x="1017" fg:w="639"/><text x="56.2214%" y="767.50">&lt;sweepers::solver::MinWithinMaxCombinator as sweepers::so..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (639 samples, 35.17%)</title><rect x="55.9714%" y="741" width="35.1679%" height="15" fill="rgb(241,108,4)" fg:x="1017" fg:w="639"/><text x="56.2214%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFr..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.33%)</title><rect x="90.8090%" y="725" width="0.3302%" height="15" fill="rgb(247,173,49)" fg:x="1650" fg:w="6"/><text x="91.0590%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.33%)</title><rect x="90.8090%" y="709" width="0.3302%" height="15" fill="rgb(224,114,35)" fg:x="1650" fg:w="6"/><text x="91.0590%" y="719.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.33%)</title><rect x="90.8090%" y="693" width="0.3302%" height="15" fill="rgb(245,159,27)" fg:x="1650" fg:w="6"/><text x="91.0590%" y="703.50"></text></g><g><title>_int_realloc (6 samples, 0.33%)</title><rect x="90.8090%" y="677" width="0.3302%" height="15" fill="rgb(245,172,44)" fg:x="1650" fg:w="6"/><text x="91.0590%" y="687.50"></text></g><g><title>_int_malloc (1 samples, 0.06%)</title><rect x="91.0842%" y="661" width="0.0550%" height="15" fill="rgb(236,23,11)" fg:x="1655" fg:w="1"/><text x="91.3342%" y="671.50"></text></g><g><title>__GI___libc_free (1 samples, 0.06%)</title><rect x="91.3043%" y="741" width="0.0550%" height="15" fill="rgb(205,117,38)" fg:x="1659" fg:w="1"/><text x="91.5543%" y="751.50"></text></g><g><title>__GI_munmap (1 samples, 0.06%)</title><rect x="91.3043%" y="725" width="0.0550%" height="15" fill="rgb(237,72,25)" fg:x="1659" fg:w="1"/><text x="91.5543%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (34 samples, 1.87%)</title><rect x="92.0198%" y="725" width="1.8712%" height="15" fill="rgb(244,70,9)" fg:x="1672" fg:w="34"/><text x="92.2698%" y="735.50">&lt;..</text></g><g><title>alloc::collections::btree::navigate::full_range (3 samples, 0.17%)</title><rect x="93.7259%" y="709" width="0.1651%" height="15" fill="rgb(217,125,39)" fg:x="1703" fg:w="3"/><text x="93.9759%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (2 samples, 0.11%)</title><rect x="94.9367%" y="709" width="0.1101%" height="15" fill="rgb(235,36,10)" fg:x="1725" fg:w="2"/><text x="95.1867%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (54 samples, 2.97%)</title><rect x="93.8910%" y="725" width="2.9719%" height="15" fill="rgb(251,123,47)" fg:x="1706" fg:w="54"/><text x="94.1410%" y="735.50">&lt;al..</text></g><g><title>core::hash::Hasher::write_usize (33 samples, 1.82%)</title><rect x="95.0468%" y="709" width="1.8162%" height="15" fill="rgb(221,13,13)" fg:x="1727" fg:w="33"/><text x="95.2968%" y="719.50">c..</text></g><g><title>__GI___libc_free (8 samples, 0.44%)</title><rect x="96.9180%" y="709" width="0.4403%" height="15" fill="rgb(238,131,9)" fg:x="1761" fg:w="8"/><text x="97.1680%" y="719.50"></text></g><g><title>_int_free (8 samples, 0.44%)</title><rect x="96.9180%" y="693" width="0.4403%" height="15" fill="rgb(211,50,8)" fg:x="1761" fg:w="8"/><text x="97.1680%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.55%)</title><rect x="96.8630%" y="725" width="0.5504%" height="15" fill="rgb(245,182,24)" fg:x="1760" fg:w="10"/><text x="97.1130%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (1 samples, 0.06%)</title><rect x="97.3583%" y="709" width="0.0550%" height="15" fill="rgb(242,14,37)" fg:x="1769" fg:w="1"/><text x="97.6083%" y="719.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (122 samples, 6.71%)</title><rect x="91.1392%" y="773" width="6.7144%" height="15" fill="rgb(246,228,12)" fg:x="1656" fg:w="122"/><text x="91.3892%" y="783.50">&lt;hashbrow..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (122 samples, 6.71%)</title><rect x="91.1392%" y="757" width="6.7144%" height="15" fill="rgb(213,55,15)" fg:x="1656" fg:w="122"/><text x="91.3892%" y="767.50">&lt;core::it..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (118 samples, 6.49%)</title><rect x="91.3594%" y="741" width="6.4942%" height="15" fill="rgb(209,9,3)" fg:x="1660" fg:w="118"/><text x="91.6094%" y="751.50">hashbrown..</text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.44%)</title><rect x="97.4133%" y="725" width="0.4403%" height="15" fill="rgb(230,59,30)" fg:x="1770" fg:w="8"/><text x="97.6633%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.06%)</title><rect x="97.8536%" y="421" width="0.0550%" height="15" fill="rgb(209,121,21)" fg:x="1778" fg:w="1"/><text x="98.1036%" y="431.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="97.8536%" y="405" width="0.0550%" height="15" fill="rgb(220,109,13)" fg:x="1778" fg:w="1"/><text x="98.1036%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.06%)</title><rect x="97.9086%" y="357" width="0.0550%" height="15" fill="rgb(232,18,1)" fg:x="1779" fg:w="1"/><text x="98.1586%" y="367.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.06%)</title><rect x="97.9086%" y="341" width="0.0550%" height="15" fill="rgb(215,41,42)" fg:x="1779" fg:w="1"/><text x="98.1586%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.06%)</title><rect x="97.9086%" y="325" width="0.0550%" height="15" fill="rgb(224,123,36)" fg:x="1779" fg:w="1"/><text x="98.1586%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.06%)</title><rect x="97.9086%" y="309" width="0.0550%" height="15" fill="rgb(240,125,3)" fg:x="1779" fg:w="1"/><text x="98.1586%" y="319.50"></text></g><g><title>core::slice::memchr::memchr::{{closure}} (1 samples, 0.06%)</title><rect x="97.9086%" y="293" width="0.0550%" height="15" fill="rgb(205,98,50)" fg:x="1779" fg:w="1"/><text x="98.1586%" y="303.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.11%)</title><rect x="97.9086%" y="421" width="0.1101%" height="15" fill="rgb(205,185,37)" fg:x="1779" fg:w="2"/><text x="98.1586%" y="431.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.11%)</title><rect x="97.9086%" y="405" width="0.1101%" height="15" fill="rgb(238,207,15)" fg:x="1779" fg:w="2"/><text x="98.1586%" y="415.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.11%)</title><rect x="97.9086%" y="389" width="0.1101%" height="15" fill="rgb(213,199,42)" fg:x="1779" fg:w="2"/><text x="98.1586%" y="399.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.11%)</title><rect x="97.9086%" y="373" width="0.1101%" height="15" fill="rgb(235,201,11)" fg:x="1779" fg:w="2"/><text x="98.1586%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.06%)</title><rect x="97.9637%" y="357" width="0.0550%" height="15" fill="rgb(207,46,11)" fg:x="1780" fg:w="1"/><text x="98.2137%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (1 samples, 0.06%)</title><rect x="97.9637%" y="341" width="0.0550%" height="15" fill="rgb(241,35,35)" fg:x="1780" fg:w="1"/><text x="98.2137%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (1 samples, 0.06%)</title><rect x="97.9637%" y="325" width="0.0550%" height="15" fill="rgb(243,32,47)" fg:x="1780" fg:w="1"/><text x="98.2137%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.06%)</title><rect x="97.9637%" y="309" width="0.0550%" height="15" fill="rgb(247,202,23)" fg:x="1780" fg:w="1"/><text x="98.2137%" y="319.50"></text></g><g><title>sweepers::solver::_DERIVE_core_fmt_Debug_FOR_Constraint::&lt;impl core::fmt::Debug for sweepers::solver::Constraint&gt;::fmt (1 samples, 0.06%)</title><rect x="98.0187%" y="421" width="0.0550%" height="15" fill="rgb(219,102,11)" fg:x="1781" fg:w="1"/><text x="98.2687%" y="431.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.06%)</title><rect x="98.0187%" y="405" width="0.0550%" height="15" fill="rgb(243,110,44)" fg:x="1781" fg:w="1"/><text x="98.2687%" y="415.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.06%)</title><rect x="98.0187%" y="389" width="0.0550%" height="15" fill="rgb(222,74,54)" fg:x="1781" fg:w="1"/><text x="98.2687%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.06%)</title><rect x="98.0187%" y="373" width="0.0550%" height="15" fill="rgb(216,99,12)" fg:x="1781" fg:w="1"/><text x="98.2687%" y="383.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.0187%" y="357" width="0.0550%" height="15" fill="rgb(226,22,26)" fg:x="1781" fg:w="1"/><text x="98.2687%" y="367.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.0187%" y="341" width="0.0550%" height="15" fill="rgb(217,163,10)" fg:x="1781" fg:w="1"/><text x="98.2687%" y="351.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.06%)</title><rect x="98.1288%" y="341" width="0.0550%" height="15" fill="rgb(213,25,53)" fg:x="1783" fg:w="1"/><text x="98.3788%" y="351.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (2 samples, 0.11%)</title><rect x="98.1838%" y="325" width="0.1101%" height="15" fill="rgb(252,105,26)" fg:x="1784" fg:w="2"/><text x="98.4338%" y="335.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (2 samples, 0.11%)</title><rect x="98.1838%" y="309" width="0.1101%" height="15" fill="rgb(220,39,43)" fg:x="1784" fg:w="2"/><text x="98.4338%" y="319.50"></text></g><g><title>core::unicode::unicode_data::skip_search (2 samples, 0.11%)</title><rect x="98.1838%" y="293" width="0.1101%" height="15" fill="rgb(229,68,48)" fg:x="1784" fg:w="2"/><text x="98.4338%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (2 samples, 0.11%)</title><rect x="98.1838%" y="277" width="0.1101%" height="15" fill="rgb(252,8,32)" fg:x="1784" fg:w="2"/><text x="98.4338%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (2 samples, 0.11%)</title><rect x="98.1838%" y="261" width="0.1101%" height="15" fill="rgb(223,20,43)" fg:x="1784" fg:w="2"/><text x="98.4338%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (1 samples, 0.06%)</title><rect x="98.2389%" y="245" width="0.0550%" height="15" fill="rgb(229,81,49)" fg:x="1785" fg:w="1"/><text x="98.4889%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (1 samples, 0.06%)</title><rect x="98.2389%" y="229" width="0.0550%" height="15" fill="rgb(236,28,36)" fg:x="1785" fg:w="1"/><text x="98.4889%" y="239.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (4 samples, 0.22%)</title><rect x="98.1288%" y="357" width="0.2201%" height="15" fill="rgb(249,185,26)" fg:x="1783" fg:w="4"/><text x="98.3788%" y="367.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (3 samples, 0.17%)</title><rect x="98.1838%" y="341" width="0.1651%" height="15" fill="rgb(249,174,33)" fg:x="1784" fg:w="3"/><text x="98.4338%" y="351.50"></text></g><g><title>core::unicode::printable::is_printable (1 samples, 0.06%)</title><rect x="98.2939%" y="325" width="0.0550%" height="15" fill="rgb(233,201,37)" fg:x="1786" fg:w="1"/><text x="98.5439%" y="335.50"></text></g><g><title>core::unicode::printable::check (1 samples, 0.06%)</title><rect x="98.2939%" y="309" width="0.0550%" height="15" fill="rgb(221,78,26)" fg:x="1786" fg:w="1"/><text x="98.5439%" y="319.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.06%)</title><rect x="98.3489%" y="357" width="0.0550%" height="15" fill="rgb(250,127,30)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="367.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.3489%" y="341" width="0.0550%" height="15" fill="rgb(230,49,44)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="351.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.3489%" y="325" width="0.0550%" height="15" fill="rgb(229,67,23)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="335.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.3489%" y="309" width="0.0550%" height="15" fill="rgb(249,83,47)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="319.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.3489%" y="293" width="0.0550%" height="15" fill="rgb(215,43,3)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="303.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.3489%" y="277" width="0.0550%" height="15" fill="rgb(238,154,13)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.06%)</title><rect x="98.3489%" y="261" width="0.0550%" height="15" fill="rgb(219,56,2)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="98.3489%" y="245" width="0.0550%" height="15" fill="rgb(233,0,4)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="98.3489%" y="229" width="0.0550%" height="15" fill="rgb(235,30,7)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="98.3489%" y="213" width="0.0550%" height="15" fill="rgb(250,79,13)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="98.3489%" y="197" width="0.0550%" height="15" fill="rgb(211,146,34)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="98.3489%" y="181" width="0.0550%" height="15" fill="rgb(228,22,38)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="98.3489%" y="165" width="0.0550%" height="15" fill="rgb(235,168,5)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.06%)</title><rect x="98.3489%" y="149" width="0.0550%" height="15" fill="rgb(221,155,16)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="98.3489%" y="133" width="0.0550%" height="15" fill="rgb(215,215,53)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.06%)</title><rect x="98.3489%" y="117" width="0.0550%" height="15" fill="rgb(223,4,10)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.06%)</title><rect x="98.3489%" y="101" width="0.0550%" height="15" fill="rgb(234,103,6)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.06%)</title><rect x="98.3489%" y="85" width="0.0550%" height="15" fill="rgb(227,97,0)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="95.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.06%)</title><rect x="98.3489%" y="69" width="0.0550%" height="15" fill="rgb(234,150,53)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="79.50"></text></g><g><title>_int_realloc (1 samples, 0.06%)</title><rect x="98.3489%" y="53" width="0.0550%" height="15" fill="rgb(228,201,54)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="98.3489%" y="37" width="0.0550%" height="15" fill="rgb(222,22,37)" fg:x="1787" fg:w="1"/><text x="98.5989%" y="47.50"></text></g><g><title>sweepers::solver::_DERIVE_core_fmt_Debug_FOR_FactDebug::&lt;impl core::fmt::Debug for sweepers::solver::FactDebug&gt;::fmt (7 samples, 0.39%)</title><rect x="98.0737%" y="421" width="0.3853%" height="15" fill="rgb(237,53,32)" fg:x="1782" fg:w="7"/><text x="98.3237%" y="431.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (6 samples, 0.33%)</title><rect x="98.1288%" y="405" width="0.3302%" height="15" fill="rgb(233,25,53)" fg:x="1783" fg:w="6"/><text x="98.3788%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (6 samples, 0.33%)</title><rect x="98.1288%" y="389" width="0.3302%" height="15" fill="rgb(210,40,34)" fg:x="1783" fg:w="6"/><text x="98.3788%" y="399.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (6 samples, 0.33%)</title><rect x="98.1288%" y="373" width="0.3302%" height="15" fill="rgb(241,220,44)" fg:x="1783" fg:w="6"/><text x="98.3788%" y="383.50"></text></g><g><title>sweepers::solver::opt_fmt (1 samples, 0.06%)</title><rect x="98.4040%" y="357" width="0.0550%" height="15" fill="rgb(235,28,35)" fg:x="1788" fg:w="1"/><text x="98.6540%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.06%)</title><rect x="98.4040%" y="341" width="0.0550%" height="15" fill="rgb(210,56,17)" fg:x="1788" fg:w="1"/><text x="98.6540%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="98.4040%" y="325" width="0.0550%" height="15" fill="rgb(224,130,29)" fg:x="1788" fg:w="1"/><text x="98.6540%" y="335.50"></text></g><g><title>core::iter::adapters::zip::zip (1 samples, 0.06%)</title><rect x="98.4040%" y="309" width="0.0550%" height="15" fill="rgb(235,212,8)" fg:x="1788" fg:w="1"/><text x="98.6540%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (1 samples, 0.06%)</title><rect x="98.4040%" y="293" width="0.0550%" height="15" fill="rgb(223,33,50)" fg:x="1788" fg:w="1"/><text x="98.6540%" y="303.50"></text></g><g><title>core::cmp::min (1 samples, 0.06%)</title><rect x="98.4040%" y="277" width="0.0550%" height="15" fill="rgb(219,149,13)" fg:x="1788" fg:w="1"/><text x="98.6540%" y="287.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.06%)</title><rect x="98.4040%" y="261" width="0.0550%" height="15" fill="rgb(250,156,29)" fg:x="1788" fg:w="1"/><text x="98.6540%" y="271.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="98.4040%" y="245" width="0.0550%" height="15" fill="rgb(216,193,19)" fg:x="1788" fg:w="1"/><text x="98.6540%" y="255.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.06%)</title><rect x="98.4590%" y="405" width="0.0550%" height="15" fill="rgb(216,135,14)" fg:x="1789" fg:w="1"/><text x="98.7090%" y="415.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.11%)</title><rect x="98.5140%" y="325" width="0.1101%" height="15" fill="rgb(241,47,5)" fg:x="1790" fg:w="2"/><text x="98.7640%" y="335.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.5691%" y="309" width="0.0550%" height="15" fill="rgb(233,42,35)" fg:x="1791" fg:w="1"/><text x="98.8191%" y="319.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.5691%" y="293" width="0.0550%" height="15" fill="rgb(231,13,6)" fg:x="1791" fg:w="1"/><text x="98.8191%" y="303.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.5691%" y="277" width="0.0550%" height="15" fill="rgb(207,181,40)" fg:x="1791" fg:w="1"/><text x="98.8191%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.06%)</title><rect x="98.5691%" y="261" width="0.0550%" height="15" fill="rgb(254,173,49)" fg:x="1791" fg:w="1"/><text x="98.8191%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="98.5691%" y="245" width="0.0550%" height="15" fill="rgb(221,1,38)" fg:x="1791" fg:w="1"/><text x="98.8191%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="98.5691%" y="229" width="0.0550%" height="15" fill="rgb(206,124,46)" fg:x="1791" fg:w="1"/><text x="98.8191%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="98.5691%" y="213" width="0.0550%" height="15" fill="rgb(249,21,11)" fg:x="1791" fg:w="1"/><text x="98.8191%" y="223.50"></text></g><g><title>&lt;u64 as core::fmt::num::DisplayInt&gt;::to_u64 (1 samples, 0.06%)</title><rect x="98.6241%" y="261" width="0.0550%" height="15" fill="rgb(222,201,40)" fg:x="1792" fg:w="1"/><text x="98.8741%" y="271.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (4 samples, 0.22%)</title><rect x="98.5140%" y="373" width="0.2201%" height="15" fill="rgb(235,61,29)" fg:x="1790" fg:w="4"/><text x="98.7640%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (4 samples, 0.22%)</title><rect x="98.5140%" y="357" width="0.2201%" height="15" fill="rgb(219,207,3)" fg:x="1790" fg:w="4"/><text x="98.7640%" y="367.50"></text></g><g><title>core::fmt::write (4 samples, 0.22%)</title><rect x="98.5140%" y="341" width="0.2201%" height="15" fill="rgb(222,56,46)" fg:x="1790" fg:w="4"/><text x="98.7640%" y="351.50"></text></g><g><title>&lt;sweepers::core::location::Bounded as core::fmt::Display&gt;::fmt (2 samples, 0.11%)</title><rect x="98.6241%" y="325" width="0.1101%" height="15" fill="rgb(239,76,54)" fg:x="1792" fg:w="2"/><text x="98.8741%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.11%)</title><rect x="98.6241%" y="309" width="0.1101%" height="15" fill="rgb(231,124,27)" fg:x="1792" fg:w="2"/><text x="98.8741%" y="319.50"></text></g><g><title>core::fmt::write (2 samples, 0.11%)</title><rect x="98.6241%" y="293" width="0.1101%" height="15" fill="rgb(249,195,6)" fg:x="1792" fg:w="2"/><text x="98.8741%" y="303.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.11%)</title><rect x="98.6241%" y="277" width="0.1101%" height="15" fill="rgb(237,174,47)" fg:x="1792" fg:w="2"/><text x="98.8741%" y="287.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.06%)</title><rect x="98.6791%" y="261" width="0.0550%" height="15" fill="rgb(206,201,31)" fg:x="1793" fg:w="1"/><text x="98.9291%" y="271.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.6791%" y="245" width="0.0550%" height="15" fill="rgb(231,57,52)" fg:x="1793" fg:w="1"/><text x="98.9291%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.06%)</title><rect x="98.6791%" y="229" width="0.0550%" height="15" fill="rgb(248,177,22)" fg:x="1793" fg:w="1"/><text x="98.9291%" y="239.50"></text></g><g><title>__GI___clone (1,557 samples, 85.69%)</title><rect x="13.1535%" y="1173" width="85.6907%" height="15" fill="rgb(215,211,37)" fg:x="239" fg:w="1557"/><text x="13.4035%" y="1183.50">__GI___clone</text></g><g><title>start_thread (1,557 samples, 85.69%)</title><rect x="13.1535%" y="1157" width="85.6907%" height="15" fill="rgb(241,128,51)" fg:x="239" fg:w="1557"/><text x="13.4035%" y="1167.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,555 samples, 85.58%)</title><rect x="13.2636%" y="1141" width="85.5806%" height="15" fill="rgb(227,165,31)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="1151.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,555 samples, 85.58%)</title><rect x="13.2636%" y="1125" width="85.5806%" height="15" fill="rgb(228,167,24)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="1135.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,555 samples, 85.58%)</title><rect x="13.2636%" y="1109" width="85.5806%" height="15" fill="rgb(228,143,12)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="1119.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,555 samples, 85.58%)</title><rect x="13.2636%" y="1093" width="85.5806%" height="15" fill="rgb(249,149,8)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="1103.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (1,555 samples, 85.58%)</title><rect x="13.2636%" y="1077" width="85.5806%" height="15" fill="rgb(243,35,44)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="1087.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,555 samples, 85.58%)</title><rect x="13.2636%" y="1061" width="85.5806%" height="15" fill="rgb(246,89,9)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,555 samples, 85.58%)</title><rect x="13.2636%" y="1045" width="85.5806%" height="15" fill="rgb(233,213,13)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,555 samples, 85.58%)</title><rect x="13.2636%" y="1029" width="85.5806%" height="15" fill="rgb(233,141,41)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="1039.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,555 samples, 85.58%)</title><rect x="13.2636%" y="1013" width="85.5806%" height="15" fill="rgb(239,167,4)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="1023.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1,555 samples, 85.58%)</title><rect x="13.2636%" y="997" width="85.5806%" height="15" fill="rgb(209,217,16)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="1007.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,555 samples, 85.58%)</title><rect x="13.2636%" y="981" width="85.5806%" height="15" fill="rgb(219,88,35)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="991.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::run_test_inner::{{closure}} (1,555 samples, 85.58%)</title><rect x="13.2636%" y="965" width="85.5806%" height="15" fill="rgb(220,193,23)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="975.50">test::run_test::run_test_inner::{{closure}}</text></g><g><title>test::run_test::run_test_inner::{{closure}} (1,555 samples, 85.58%)</title><rect x="13.2636%" y="949" width="85.5806%" height="15" fill="rgb(230,90,52)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="959.50">test::run_test::run_test_inner::{{closure}}</text></g><g><title>test::run_test_in_process (1,555 samples, 85.58%)</title><rect x="13.2636%" y="933" width="85.5806%" height="15" fill="rgb(252,106,19)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="943.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (1,555 samples, 85.58%)</title><rect x="13.2636%" y="917" width="85.5806%" height="15" fill="rgb(206,74,20)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,555 samples, 85.58%)</title><rect x="13.2636%" y="901" width="85.5806%" height="15" fill="rgb(230,138,44)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,555 samples, 85.58%)</title><rect x="13.2636%" y="885" width="85.5806%" height="15" fill="rgb(235,182,43)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="895.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,555 samples, 85.58%)</title><rect x="13.2636%" y="869" width="85.5806%" height="15" fill="rgb(242,16,51)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="879.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,555 samples, 85.58%)</title><rect x="13.2636%" y="853" width="85.5806%" height="15" fill="rgb(248,9,4)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="863.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>test::__rust_begin_short_backtrace (1,555 samples, 85.58%)</title><rect x="13.2636%" y="837" width="85.5806%" height="15" fill="rgb(210,31,22)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="847.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,555 samples, 85.58%)</title><rect x="13.2636%" y="821" width="85.5806%" height="15" fill="rgb(239,54,39)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="831.50">core::ops::function::FnOnce::call_once</text></g><g><title>sweepers::solver::tests::cross_deduction (1,555 samples, 85.58%)</title><rect x="13.2636%" y="805" width="85.5806%" height="15" fill="rgb(230,99,41)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="815.50">sweepers::solver::tests::cross_deduction</text></g><g><title>sweepers::solver::Solver::solve_dump (1,555 samples, 85.58%)</title><rect x="13.2636%" y="789" width="85.5806%" height="15" fill="rgb(253,106,12)" fg:x="241" fg:w="1555"/><text x="13.5136%" y="799.50">sweepers::solver::Solver::solve_dump</text></g><g><title>std::io::stdio::_print (18 samples, 0.99%)</title><rect x="97.8536%" y="773" width="0.9906%" height="15" fill="rgb(213,46,41)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="783.50"></text></g><g><title>std::io::stdio::print_to (18 samples, 0.99%)</title><rect x="97.8536%" y="757" width="0.9906%" height="15" fill="rgb(215,133,35)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.99%)</title><rect x="97.8536%" y="741" width="0.9906%" height="15" fill="rgb(213,28,5)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="751.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (18 samples, 0.99%)</title><rect x="97.8536%" y="725" width="0.9906%" height="15" fill="rgb(215,77,49)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (18 samples, 0.99%)</title><rect x="97.8536%" y="709" width="0.9906%" height="15" fill="rgb(248,100,22)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="719.50"></text></g><g><title>std::io::stdio::print_to::{{closure}}::{{closure}} (18 samples, 0.99%)</title><rect x="97.8536%" y="693" width="0.9906%" height="15" fill="rgb(208,67,9)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="703.50"></text></g><g><title>std::io::Write::write_fmt (18 samples, 0.99%)</title><rect x="97.8536%" y="677" width="0.9906%" height="15" fill="rgb(219,133,21)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="687.50"></text></g><g><title>core::fmt::write (18 samples, 0.99%)</title><rect x="97.8536%" y="661" width="0.9906%" height="15" fill="rgb(246,46,29)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="671.50"></text></g><g><title>core::fmt::run (18 samples, 0.99%)</title><rect x="97.8536%" y="645" width="0.9906%" height="15" fill="rgb(246,185,52)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="655.50"></text></g><g><title>sweepers::solver::_DERIVE_core_fmt_Debug_FOR_Solver::&lt;impl core::fmt::Debug for sweepers::solver::Solver&gt;::fmt (18 samples, 0.99%)</title><rect x="97.8536%" y="629" width="0.9906%" height="15" fill="rgb(252,136,11)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="639.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (18 samples, 0.99%)</title><rect x="97.8536%" y="613" width="0.9906%" height="15" fill="rgb(219,138,53)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (18 samples, 0.99%)</title><rect x="97.8536%" y="597" width="0.9906%" height="15" fill="rgb(211,51,23)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (18 samples, 0.99%)</title><rect x="97.8536%" y="581" width="0.9906%" height="15" fill="rgb(247,221,28)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="591.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (18 samples, 0.99%)</title><rect x="97.8536%" y="565" width="0.9906%" height="15" fill="rgb(251,222,45)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="575.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (18 samples, 0.99%)</title><rect x="97.8536%" y="549" width="0.9906%" height="15" fill="rgb(217,162,53)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="559.50"></text></g><g><title>core::fmt::builders::DebugInner::entry (18 samples, 0.99%)</title><rect x="97.8536%" y="533" width="0.9906%" height="15" fill="rgb(229,93,14)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (18 samples, 0.99%)</title><rect x="97.8536%" y="517" width="0.9906%" height="15" fill="rgb(209,67,49)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="527.50"></text></g><g><title>core::fmt::builders::DebugInner::entry::{{closure}} (18 samples, 0.99%)</title><rect x="97.8536%" y="501" width="0.9906%" height="15" fill="rgb(213,87,29)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="511.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (18 samples, 0.99%)</title><rect x="97.8536%" y="485" width="0.9906%" height="15" fill="rgb(205,151,52)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="495.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (18 samples, 0.99%)</title><rect x="97.8536%" y="469" width="0.9906%" height="15" fill="rgb(253,215,39)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (18 samples, 0.99%)</title><rect x="97.8536%" y="453" width="0.9906%" height="15" fill="rgb(221,220,41)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="463.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (18 samples, 0.99%)</title><rect x="97.8536%" y="437" width="0.9906%" height="15" fill="rgb(218,133,21)" fg:x="1778" fg:w="18"/><text x="98.1036%" y="447.50"></text></g><g><title>sweepers::solver::set_fmt (7 samples, 0.39%)</title><rect x="98.4590%" y="421" width="0.3853%" height="15" fill="rgb(221,193,43)" fg:x="1789" fg:w="7"/><text x="98.7090%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (6 samples, 0.33%)</title><rect x="98.5140%" y="405" width="0.3302%" height="15" fill="rgb(240,128,52)" fg:x="1790" fg:w="6"/><text x="98.7640%" y="415.50"></text></g><g><title>core::fmt::write (6 samples, 0.33%)</title><rect x="98.5140%" y="389" width="0.3302%" height="15" fill="rgb(253,114,12)" fg:x="1790" fg:w="6"/><text x="98.7640%" y="399.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.11%)</title><rect x="98.7342%" y="373" width="0.1101%" height="15" fill="rgb(215,223,47)" fg:x="1794" fg:w="2"/><text x="98.9842%" y="383.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.7892%" y="357" width="0.0550%" height="15" fill="rgb(248,225,23)" fg:x="1795" fg:w="1"/><text x="99.0392%" y="367.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="98.7892%" y="341" width="0.0550%" height="15" fill="rgb(250,108,0)" fg:x="1795" fg:w="1"/><text x="99.0392%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="98.8442%" y="1173" width="0.0550%" height="15" fill="rgb(228,208,7)" fg:x="1796" fg:w="1"/><text x="99.0942%" y="1183.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="98.8442%" y="1157" width="0.0550%" height="15" fill="rgb(244,45,10)" fg:x="1796" fg:w="1"/><text x="99.0942%" y="1167.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="98.8993%" y="1173" width="0.0550%" height="15" fill="rgb(207,125,25)" fg:x="1797" fg:w="1"/><text x="99.1493%" y="1183.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.06%)</title><rect x="98.9543%" y="1173" width="0.0550%" height="15" fill="rgb(210,195,18)" fg:x="1798" fg:w="1"/><text x="99.2043%" y="1183.50"></text></g><g><title>solver::tests:: (1,801 samples, 99.12%)</title><rect x="0.0000%" y="1189" width="99.1194%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="1801"/><text x="0.2500%" y="1199.50">solver::tests::</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.11%)</title><rect x="99.0094%" y="1173" width="0.1101%" height="15" fill="rgb(221,65,9)" fg:x="1799" fg:w="2"/><text x="99.2594%" y="1183.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv_timeout (5 samples, 0.28%)</title><rect x="99.3946%" y="949" width="0.2752%" height="15" fill="rgb(235,49,36)" fg:x="1806" fg:w="5"/><text x="99.6446%" y="959.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv_deadline (5 samples, 0.28%)</title><rect x="99.3946%" y="933" width="0.2752%" height="15" fill="rgb(225,32,20)" fg:x="1806" fg:w="5"/><text x="99.6446%" y="943.50"></text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::recv (5 samples, 0.28%)</title><rect x="99.3946%" y="917" width="0.2752%" height="15" fill="rgb(215,141,46)" fg:x="1806" fg:w="5"/><text x="99.6446%" y="927.50"></text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait_max_until (5 samples, 0.28%)</title><rect x="99.3946%" y="901" width="0.2752%" height="15" fill="rgb(250,160,47)" fg:x="1806" fg:w="5"/><text x="99.6446%" y="911.50"></text></g><g><title>std::thread::park_timeout (5 samples, 0.28%)</title><rect x="99.3946%" y="885" width="0.2752%" height="15" fill="rgb(216,222,40)" fg:x="1806" fg:w="5"/><text x="99.6446%" y="895.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park_timeout (5 samples, 0.28%)</title><rect x="99.3946%" y="869" width="0.2752%" height="15" fill="rgb(234,217,39)" fg:x="1806" fg:w="5"/><text x="99.6446%" y="879.50"></text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 0.28%)</title><rect x="99.3946%" y="853" width="0.2752%" height="15" fill="rgb(207,178,40)" fg:x="1806" fg:w="5"/><text x="99.6446%" y="863.50"></text></g><g><title>syscall (5 samples, 0.28%)</title><rect x="99.3946%" y="837" width="0.2752%" height="15" fill="rgb(221,136,13)" fg:x="1806" fg:w="5"/><text x="99.6446%" y="847.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (1 samples, 0.06%)</title><rect x="99.6698%" y="949" width="0.0550%" height="15" fill="rgb(249,199,10)" fg:x="1811" fg:w="1"/><text x="99.9198%" y="959.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.06%)</title><rect x="99.6698%" y="933" width="0.0550%" height="15" fill="rgb(249,222,13)" fg:x="1811" fg:w="1"/><text x="99.9198%" y="943.50"></text></g><g><title>std::sys::unix::thread::Thread::join (1 samples, 0.06%)</title><rect x="99.6698%" y="917" width="0.0550%" height="15" fill="rgb(244,185,38)" fg:x="1811" fg:w="1"/><text x="99.9198%" y="927.50"></text></g><g><title>__pthread_clockjoin_ex (1 samples, 0.06%)</title><rect x="99.6698%" y="901" width="0.0550%" height="15" fill="rgb(236,202,9)" fg:x="1811" fg:w="1"/><text x="99.9198%" y="911.50"></text></g><g><title>__futex_abstimed_wait_common64 (1 samples, 0.06%)</title><rect x="99.6698%" y="885" width="0.0550%" height="15" fill="rgb(250,229,37)" fg:x="1811" fg:w="1"/><text x="99.9198%" y="895.50"></text></g><g><title>__libc_start_main (9 samples, 0.50%)</title><rect x="99.3946%" y="1157" width="0.4953%" height="15" fill="rgb(206,174,23)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1167.50"></text></g><g><title>main (9 samples, 0.50%)</title><rect x="99.3946%" y="1141" width="0.4953%" height="15" fill="rgb(211,33,43)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1151.50"></text></g><g><title>std::rt::lang_start_internal (9 samples, 0.50%)</title><rect x="99.3946%" y="1125" width="0.4953%" height="15" fill="rgb(245,58,50)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1135.50"></text></g><g><title>std::panic::catch_unwind (9 samples, 0.50%)</title><rect x="99.3946%" y="1109" width="0.4953%" height="15" fill="rgb(244,68,36)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1119.50"></text></g><g><title>std::panicking::try (9 samples, 0.50%)</title><rect x="99.3946%" y="1093" width="0.4953%" height="15" fill="rgb(232,229,15)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1103.50"></text></g><g><title>std::panicking::try::do_call (9 samples, 0.50%)</title><rect x="99.3946%" y="1077" width="0.4953%" height="15" fill="rgb(254,30,23)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1087.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9 samples, 0.50%)</title><rect x="99.3946%" y="1061" width="0.4953%" height="15" fill="rgb(235,160,14)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1071.50"></text></g><g><title>std::rt::lang_start::{{closure}} (9 samples, 0.50%)</title><rect x="99.3946%" y="1045" width="0.4953%" height="15" fill="rgb(212,155,44)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1055.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9 samples, 0.50%)</title><rect x="99.3946%" y="1029" width="0.4953%" height="15" fill="rgb(226,2,50)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1039.50"></text></g><g><title>test::test_main_static (9 samples, 0.50%)</title><rect x="99.3946%" y="1013" width="0.4953%" height="15" fill="rgb(234,177,6)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1023.50"></text></g><g><title>test::test_main (9 samples, 0.50%)</title><rect x="99.3946%" y="997" width="0.4953%" height="15" fill="rgb(217,24,9)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="1007.50"></text></g><g><title>test::console::run_tests_console (9 samples, 0.50%)</title><rect x="99.3946%" y="981" width="0.4953%" height="15" fill="rgb(220,13,46)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="991.50"></text></g><g><title>test::run_tests (9 samples, 0.50%)</title><rect x="99.3946%" y="965" width="0.4953%" height="15" fill="rgb(239,221,27)" fg:x="1806" fg:w="9"/><text x="99.6446%" y="975.50"></text></g><g><title>test::console::run_tests_console::{{closure}} (3 samples, 0.17%)</title><rect x="99.7248%" y="949" width="0.1651%" height="15" fill="rgb(222,198,25)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="959.50"></text></g><g><title>test::console::on_test_event (3 samples, 0.17%)</title><rect x="99.7248%" y="933" width="0.1651%" height="15" fill="rgb(211,99,13)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="943.50"></text></g><g><title>&lt;test::event::TestEvent as core::clone::Clone&gt;::clone (3 samples, 0.17%)</title><rect x="99.7248%" y="917" width="0.1651%" height="15" fill="rgb(232,111,31)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="927.50"></text></g><g><title>&lt;test::event::CompletedTest as core::clone::Clone&gt;::clone (3 samples, 0.17%)</title><rect x="99.7248%" y="901" width="0.1651%" height="15" fill="rgb(245,82,37)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.17%)</title><rect x="99.7248%" y="885" width="0.1651%" height="15" fill="rgb(227,149,46)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.17%)</title><rect x="99.7248%" y="869" width="0.1651%" height="15" fill="rgb(218,36,50)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.17%)</title><rect x="99.7248%" y="853" width="0.1651%" height="15" fill="rgb(226,80,48)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.17%)</title><rect x="99.7248%" y="837" width="0.1651%" height="15" fill="rgb(238,224,15)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="847.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.17%)</title><rect x="99.7248%" y="821" width="0.1651%" height="15" fill="rgb(241,136,10)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.17%)</title><rect x="99.7248%" y="805" width="0.1651%" height="15" fill="rgb(208,32,45)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="815.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.17%)</title><rect x="99.7248%" y="789" width="0.1651%" height="15" fill="rgb(207,135,9)" fg:x="1812" fg:w="3"/><text x="99.9748%" y="799.50"></text></g><g><title>all (1,817 samples, 100%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="1817"/><text x="0.2500%" y="1215.50"></text></g><g><title>sweepers-4c2ea9 (16 samples, 0.88%)</title><rect x="99.1194%" y="1189" width="0.8806%" height="15" fill="rgb(245,177,15)" fg:x="1801" fg:w="16"/><text x="99.3694%" y="1199.50"></text></g><g><title>_start (16 samples, 0.88%)</title><rect x="99.1194%" y="1173" width="0.8806%" height="15" fill="rgb(206,64,50)" fg:x="1801" fg:w="16"/><text x="99.3694%" y="1183.50"></text></g><g><title>_dl_start (2 samples, 0.11%)</title><rect x="99.8899%" y="1157" width="0.1101%" height="15" fill="rgb(234,36,40)" fg:x="1815" fg:w="2"/><text x="100.1399%" y="1167.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.06%)</title><rect x="99.9450%" y="1141" width="0.0550%" height="15" fill="rgb(213,64,8)" fg:x="1816" fg:w="1"/><text x="100.1950%" y="1151.50"></text></g><g><title>dl_main (1 samples, 0.06%)</title><rect x="99.9450%" y="1125" width="0.0550%" height="15" fill="rgb(210,75,36)" fg:x="1816" fg:w="1"/><text x="100.1950%" y="1135.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.06%)</title><rect x="99.9450%" y="1109" width="0.0550%" height="15" fill="rgb(229,88,21)" fg:x="1816" fg:w="1"/><text x="100.1950%" y="1119.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.06%)</title><rect x="99.9450%" y="1093" width="0.0550%" height="15" fill="rgb(252,204,47)" fg:x="1816" fg:w="1"/><text x="100.1950%" y="1103.50"></text></g><g><title>openaux (1 samples, 0.06%)</title><rect x="99.9450%" y="1077" width="0.0550%" height="15" fill="rgb(208,77,27)" fg:x="1816" fg:w="1"/><text x="100.1950%" y="1087.50"></text></g><g><title>_dl_map_object (1 samples, 0.06%)</title><rect x="99.9450%" y="1061" width="0.0550%" height="15" fill="rgb(221,76,26)" fg:x="1816" fg:w="1"/><text x="100.1950%" y="1071.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.06%)</title><rect x="99.9450%" y="1045" width="0.0550%" height="15" fill="rgb(225,139,18)" fg:x="1816" fg:w="1"/><text x="100.1950%" y="1055.50"></text></g><g><title>__mmap (1 samples, 0.06%)</title><rect x="99.9450%" y="1029" width="0.0550%" height="15" fill="rgb(230,137,11)" fg:x="1816" fg:w="1"/><text x="100.1950%" y="1039.50"></text></g></svg></svg>