<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1094" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1077.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1077.00"> </text><svg id="frames" x="10" width="1180" total_samples="1870"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.11%)</title><rect x="0.0000%" y="997" width="0.1070%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1007.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (3 samples, 0.16%)</title><rect x="0.1070%" y="997" width="0.1604%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="3"/><text x="0.3570%" y="1007.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="0.2674%" y="997" width="0.0535%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.5174%" y="1007.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.11%)</title><rect x="0.3209%" y="997" width="0.1070%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="2"/><text x="0.5709%" y="1007.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (2 samples, 0.11%)</title><rect x="0.3209%" y="981" width="0.1070%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="2"/><text x="0.5709%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.05%)</title><rect x="0.4278%" y="997" width="0.0535%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="1"/><text x="0.6778%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 1.66%)</title><rect x="0.4813%" y="997" width="1.6578%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="31"/><text x="0.7313%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.27%)</title><rect x="2.1390%" y="997" width="0.2674%" height="15" fill="rgb(228,23,34)" fg:x="40" fg:w="5"/><text x="2.3890%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.70%)</title><rect x="2.4064%" y="997" width="0.6952%" height="15" fill="rgb(218,30,26)" fg:x="45" fg:w="13"/><text x="2.6564%" y="1007.50"></text></g><g><title>_int_free (2 samples, 0.11%)</title><rect x="3.1016%" y="997" width="0.1070%" height="15" fill="rgb(220,122,19)" fg:x="58" fg:w="2"/><text x="3.3516%" y="1007.50"></text></g><g><title>_int_malloc (1 samples, 0.05%)</title><rect x="3.2086%" y="997" width="0.0535%" height="15" fill="rgb(250,228,42)" fg:x="60" fg:w="1"/><text x="3.4586%" y="1007.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (2 samples, 0.11%)</title><rect x="3.2620%" y="997" width="0.1070%" height="15" fill="rgb(240,193,28)" fg:x="61" fg:w="2"/><text x="3.5120%" y="1007.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.16%)</title><rect x="3.3690%" y="997" width="0.1604%" height="15" fill="rgb(216,20,37)" fg:x="63" fg:w="3"/><text x="3.6190%" y="1007.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.05%)</title><rect x="3.5294%" y="997" width="0.0535%" height="15" fill="rgb(206,188,39)" fg:x="66" fg:w="1"/><text x="3.7794%" y="1007.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.16%)</title><rect x="3.5829%" y="997" width="0.1604%" height="15" fill="rgb(217,207,13)" fg:x="67" fg:w="3"/><text x="3.8329%" y="1007.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.11%)</title><rect x="3.7433%" y="997" width="0.1070%" height="15" fill="rgb(231,73,38)" fg:x="70" fg:w="2"/><text x="3.9933%" y="1007.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (59 samples, 3.16%)</title><rect x="3.8503%" y="997" width="3.1551%" height="15" fill="rgb(225,20,46)" fg:x="72" fg:w="59"/><text x="4.1003%" y="1007.50">all..</text></g><g><title>core::unicode::printable::is_printable (1 samples, 0.05%)</title><rect x="7.0053%" y="997" width="0.0535%" height="15" fill="rgb(210,31,41)" fg:x="131" fg:w="1"/><text x="7.2553%" y="1007.50"></text></g><g><title>[anon] (134 samples, 7.17%)</title><rect x="0.0000%" y="1013" width="7.1658%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="134"/><text x="0.2500%" y="1023.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.11%)</title><rect x="7.0588%" y="997" width="0.1070%" height="15" fill="rgb(226,26,5)" fg:x="132" fg:w="2"/><text x="7.3088%" y="1007.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (1 samples, 0.05%)</title><rect x="7.1658%" y="997" width="0.0535%" height="15" fill="rgb(249,33,26)" fg:x="134" fg:w="1"/><text x="7.4158%" y="1007.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.11%)</title><rect x="7.2193%" y="997" width="0.1070%" height="15" fill="rgb(235,183,28)" fg:x="135" fg:w="2"/><text x="7.4693%" y="1007.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="7.3262%" y="997" width="0.0535%" height="15" fill="rgb(221,5,38)" fg:x="137" fg:w="1"/><text x="7.5762%" y="1007.50"></text></g><g><title>__GI___libc_free (2 samples, 0.11%)</title><rect x="7.3797%" y="997" width="0.1070%" height="15" fill="rgb(247,18,42)" fg:x="138" fg:w="2"/><text x="7.6297%" y="1007.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (6 samples, 0.32%)</title><rect x="7.4866%" y="997" width="0.3209%" height="15" fill="rgb(241,131,45)" fg:x="140" fg:w="6"/><text x="7.7366%" y="1007.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (20 samples, 1.07%)</title><rect x="7.8075%" y="997" width="1.0695%" height="15" fill="rgb(249,31,29)" fg:x="146" fg:w="20"/><text x="8.0575%" y="1007.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (8 samples, 0.43%)</title><rect x="8.8770%" y="997" width="0.4278%" height="15" fill="rgb(225,111,53)" fg:x="166" fg:w="8"/><text x="9.1270%" y="1007.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.21%)</title><rect x="9.3048%" y="997" width="0.2139%" height="15" fill="rgb(238,160,17)" fg:x="174" fg:w="4"/><text x="9.5548%" y="1007.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (54 samples, 2.89%)</title><rect x="9.5187%" y="997" width="2.8877%" height="15" fill="rgb(214,148,48)" fg:x="178" fg:w="54"/><text x="9.7687%" y="1007.50">al..</text></g><g><title>[unknown] (100 samples, 5.35%)</title><rect x="7.1658%" y="1013" width="5.3476%" height="15" fill="rgb(232,36,49)" fg:x="134" fg:w="100"/><text x="7.4158%" y="1023.50">[unknow..</text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.11%)</title><rect x="12.4064%" y="997" width="0.1070%" height="15" fill="rgb(209,103,24)" fg:x="232" fg:w="2"/><text x="12.6564%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.05%)</title><rect x="12.5134%" y="757" width="0.0535%" height="15" fill="rgb(229,88,8)" fg:x="234" fg:w="1"/><text x="12.7634%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.05%)</title><rect x="12.5134%" y="741" width="0.0535%" height="15" fill="rgb(213,181,19)" fg:x="234" fg:w="1"/><text x="12.7634%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.05%)</title><rect x="12.5134%" y="725" width="0.0535%" height="15" fill="rgb(254,191,54)" fg:x="234" fg:w="1"/><text x="12.7634%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.05%)</title><rect x="12.5134%" y="709" width="0.0535%" height="15" fill="rgb(241,83,37)" fg:x="234" fg:w="1"/><text x="12.7634%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.05%)</title><rect x="12.5134%" y="693" width="0.0535%" height="15" fill="rgb(233,36,39)" fg:x="234" fg:w="1"/><text x="12.7634%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="12.5134%" y="677" width="0.0535%" height="15" fill="rgb(226,3,54)" fg:x="234" fg:w="1"/><text x="12.7634%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="12.5134%" y="661" width="0.0535%" height="15" fill="rgb(245,192,40)" fg:x="234" fg:w="1"/><text x="12.7634%" y="671.50"></text></g><g><title>&lt;sweepers::solver::MaxRemoveLocations as sweepers::solver::Rule&gt;::derive (2 samples, 0.11%)</title><rect x="12.5668%" y="597" width="0.1070%" height="15" fill="rgb(238,167,29)" fg:x="235" fg:w="2"/><text x="12.8168%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.11%)</title><rect x="12.5668%" y="581" width="0.1070%" height="15" fill="rgb(232,182,51)" fg:x="235" fg:w="2"/><text x="12.8168%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.11%)</title><rect x="12.5668%" y="565" width="0.1070%" height="15" fill="rgb(231,60,39)" fg:x="235" fg:w="2"/><text x="12.8168%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as sweepers::solver::Without&lt;T&gt;&gt;::without (2 samples, 0.11%)</title><rect x="12.5668%" y="549" width="0.1070%" height="15" fill="rgb(208,69,12)" fg:x="235" fg:w="2"/><text x="12.8168%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.11%)</title><rect x="12.5668%" y="533" width="0.1070%" height="15" fill="rgb(235,93,37)" fg:x="235" fg:w="2"/><text x="12.8168%" y="543.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.11%)</title><rect x="12.5668%" y="517" width="0.1070%" height="15" fill="rgb(213,116,39)" fg:x="235" fg:w="2"/><text x="12.8168%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.53%)</title><rect x="16.3636%" y="517" width="0.5348%" height="15" fill="rgb(222,207,29)" fg:x="306" fg:w="10"/><text x="16.6136%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (2 samples, 0.11%)</title><rect x="16.7914%" y="501" width="0.1070%" height="15" fill="rgb(206,96,30)" fg:x="314" fg:w="2"/><text x="17.0414%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.11%)</title><rect x="16.8984%" y="517" width="0.1070%" height="15" fill="rgb(218,138,4)" fg:x="316" fg:w="2"/><text x="17.1484%" y="527.50"></text></g><g><title>__GI___libc_malloc (19 samples, 1.02%)</title><rect x="17.3797%" y="501" width="1.0160%" height="15" fill="rgb(250,191,14)" fg:x="325" fg:w="19"/><text x="17.6297%" y="511.50"></text></g><g><title>_int_malloc (15 samples, 0.80%)</title><rect x="17.5936%" y="485" width="0.8021%" height="15" fill="rgb(239,60,40)" fg:x="329" fg:w="15"/><text x="17.8436%" y="495.50"></text></g><g><title>sysmalloc (14 samples, 0.75%)</title><rect x="17.6471%" y="469" width="0.7487%" height="15" fill="rgb(206,27,48)" fg:x="330" fg:w="14"/><text x="17.8971%" y="479.50"></text></g><g><title>__GI___mprotect (6 samples, 0.32%)</title><rect x="18.0749%" y="453" width="0.3209%" height="15" fill="rgb(225,35,8)" fg:x="338" fg:w="6"/><text x="18.3249%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.11%)</title><rect x="18.3957%" y="501" width="0.1070%" height="15" fill="rgb(250,213,24)" fg:x="344" fg:w="2"/><text x="18.6457%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.05%)</title><rect x="18.4492%" y="485" width="0.0535%" height="15" fill="rgb(247,123,22)" fg:x="345" fg:w="1"/><text x="18.6992%" y="495.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (53 samples, 2.83%)</title><rect x="15.9893%" y="549" width="2.8342%" height="15" fill="rgb(231,138,38)" fg:x="299" fg:w="53"/><text x="16.2393%" y="559.50">&lt;&amp;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 2.51%)</title><rect x="16.3102%" y="533" width="2.5134%" height="15" fill="rgb(231,145,46)" fg:x="305" fg:w="47"/><text x="16.5602%" y="543.50">&lt;c..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (34 samples, 1.82%)</title><rect x="17.0053%" y="517" width="1.8182%" height="15" fill="rgb(251,118,11)" fg:x="318" fg:w="34"/><text x="17.2553%" y="527.50">a..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.32%)</title><rect x="18.5027%" y="501" width="0.3209%" height="15" fill="rgb(217,147,25)" fg:x="346" fg:w="6"/><text x="18.7527%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.70%)</title><rect x="19.0909%" y="533" width="0.6952%" height="15" fill="rgb(247,81,37)" fg:x="357" fg:w="13"/><text x="19.3409%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (2 samples, 0.11%)</title><rect x="22.1390%" y="517" width="0.1070%" height="15" fill="rgb(209,12,38)" fg:x="414" fg:w="2"/><text x="22.3890%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (8 samples, 0.43%)</title><rect x="22.2460%" y="517" width="0.4278%" height="15" fill="rgb(227,1,9)" fg:x="416" fg:w="8"/><text x="22.4960%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (74 samples, 3.96%)</title><rect x="18.8235%" y="549" width="3.9572%" height="15" fill="rgb(248,47,43)" fg:x="352" fg:w="74"/><text x="19.0735%" y="559.50">&lt;cor..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (56 samples, 2.99%)</title><rect x="19.7861%" y="533" width="2.9947%" height="15" fill="rgb(221,10,30)" fg:x="370" fg:w="56"/><text x="20.0361%" y="543.50">all..</text></g><g><title>alloc::collections::btree::navigate::full_range (2 samples, 0.11%)</title><rect x="22.6738%" y="517" width="0.1070%" height="15" fill="rgb(210,229,1)" fg:x="424" fg:w="2"/><text x="22.9238%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 4.49%)</title><rect x="22.7807%" y="549" width="4.4920%" height="15" fill="rgb(222,148,37)" fg:x="426" fg:w="84"/><text x="23.0307%" y="559.50">&lt;hash..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (21 samples, 1.12%)</title><rect x="46.2567%" y="533" width="1.1230%" height="15" fill="rgb(234,67,33)" fg:x="865" fg:w="21"/><text x="46.5067%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (56 samples, 2.99%)</title><rect x="47.3797%" y="533" width="2.9947%" height="15" fill="rgb(247,98,35)" fg:x="886" fg:w="56"/><text x="47.6297%" y="543.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (739 samples, 39.52%)</title><rect x="12.8342%" y="565" width="39.5187%" height="15" fill="rgb(247,138,52)" fg:x="240" fg:w="739"/><text x="13.0842%" y="575.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iter..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (469 samples, 25.08%)</title><rect x="27.2727%" y="549" width="25.0802%" height="15" fill="rgb(213,79,30)" fg:x="510" fg:w="469"/><text x="27.5227%" y="559.50">alloc::collections::btree::set::BTreeSet..</text></g><g><title>alloc::collections::btree::navigate::full_range (37 samples, 1.98%)</title><rect x="50.3743%" y="533" width="1.9786%" height="15" fill="rgb(246,177,23)" fg:x="942" fg:w="37"/><text x="50.6243%" y="543.50">a..</text></g><g><title>&lt;sweepers::solver::MaxWithinMinCombinator as sweepers::solver::Rule&gt;::derive (750 samples, 40.11%)</title><rect x="12.6738%" y="597" width="40.1070%" height="15" fill="rgb(230,62,27)" fg:x="237" fg:w="750"/><text x="12.9238%" y="607.50">&lt;sweepers::solver::MaxWithinMinCombinator as sweepers::solver::Ru..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (750 samples, 40.11%)</title><rect x="12.6738%" y="581" width="40.1070%" height="15" fill="rgb(216,154,8)" fg:x="237" fg:w="750"/><text x="12.9238%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.43%)</title><rect x="52.3529%" y="565" width="0.4278%" height="15" fill="rgb(244,35,45)" fg:x="979" fg:w="8"/><text x="52.6029%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.43%)</title><rect x="52.3529%" y="549" width="0.4278%" height="15" fill="rgb(251,115,12)" fg:x="979" fg:w="8"/><text x="52.6029%" y="559.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.43%)</title><rect x="52.3529%" y="533" width="0.4278%" height="15" fill="rgb(240,54,50)" fg:x="979" fg:w="8"/><text x="52.6029%" y="543.50"></text></g><g><title>_int_realloc (8 samples, 0.43%)</title><rect x="52.3529%" y="517" width="0.4278%" height="15" fill="rgb(233,84,52)" fg:x="979" fg:w="8"/><text x="52.6029%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.43%)</title><rect x="52.3529%" y="501" width="0.4278%" height="15" fill="rgb(207,117,47)" fg:x="979" fg:w="8"/><text x="52.6029%" y="511.50"></text></g><g><title>&lt;sweepers::solver::MinAllToExact as sweepers::solver::Rule&gt;::derive (1 samples, 0.05%)</title><rect x="52.7807%" y="597" width="0.0535%" height="15" fill="rgb(249,43,39)" fg:x="987" fg:w="1"/><text x="53.0307%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="52.7807%" y="581" width="0.0535%" height="15" fill="rgb(209,38,44)" fg:x="987" fg:w="1"/><text x="53.0307%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.18%)</title><rect x="57.4332%" y="517" width="1.1765%" height="15" fill="rgb(236,212,23)" fg:x="1074" fg:w="22"/><text x="57.6832%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (10 samples, 0.53%)</title><rect x="58.0749%" y="501" width="0.5348%" height="15" fill="rgb(242,79,21)" fg:x="1086" fg:w="10"/><text x="58.3249%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="58.6096%" y="517" width="0.0535%" height="15" fill="rgb(211,96,35)" fg:x="1096" fg:w="1"/><text x="58.8596%" y="527.50"></text></g><g><title>__GI___libc_malloc (86 samples, 4.60%)</title><rect x="59.4118%" y="501" width="4.5989%" height="15" fill="rgb(253,215,40)" fg:x="1111" fg:w="86"/><text x="59.6618%" y="511.50">__GI_..</text></g><g><title>_int_malloc (77 samples, 4.12%)</title><rect x="59.8930%" y="485" width="4.1176%" height="15" fill="rgb(211,81,21)" fg:x="1120" fg:w="77"/><text x="60.1430%" y="495.50">_int..</text></g><g><title>sysmalloc (64 samples, 3.42%)</title><rect x="60.5882%" y="469" width="3.4225%" height="15" fill="rgb(208,190,38)" fg:x="1133" fg:w="64"/><text x="60.8382%" y="479.50">sys..</text></g><g><title>__GI___mprotect (34 samples, 1.82%)</title><rect x="62.1925%" y="453" width="1.8182%" height="15" fill="rgb(235,213,38)" fg:x="1163" fg:w="34"/><text x="62.4425%" y="463.50">_..</text></g><g><title>__rust_alloc (1 samples, 0.05%)</title><rect x="64.0107%" y="501" width="0.0535%" height="15" fill="rgb(237,122,38)" fg:x="1197" fg:w="1"/><text x="64.2607%" y="511.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (140 samples, 7.49%)</title><rect x="57.0588%" y="549" width="7.4866%" height="15" fill="rgb(244,218,35)" fg:x="1067" fg:w="140"/><text x="57.3088%" y="559.50">&lt;&amp;alloc::c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (135 samples, 7.22%)</title><rect x="57.3262%" y="533" width="7.2193%" height="15" fill="rgb(240,68,47)" fg:x="1072" fg:w="135"/><text x="57.5762%" y="543.50">&lt;core::ite..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (110 samples, 5.88%)</title><rect x="58.6631%" y="517" width="5.8824%" height="15" fill="rgb(210,16,53)" fg:x="1097" fg:w="110"/><text x="58.9131%" y="527.50">alloc::..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (9 samples, 0.48%)</title><rect x="64.0642%" y="501" width="0.4813%" height="15" fill="rgb(235,124,12)" fg:x="1198" fg:w="9"/><text x="64.3142%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (6 samples, 0.32%)</title><rect x="64.2246%" y="485" width="0.3209%" height="15" fill="rgb(224,169,11)" fg:x="1201" fg:w="6"/><text x="64.4746%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.21%)</title><rect x="64.9198%" y="533" width="0.2139%" height="15" fill="rgb(250,166,2)" fg:x="1214" fg:w="4"/><text x="65.1698%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 1.44%)</title><rect x="64.5455%" y="549" width="1.4439%" height="15" fill="rgb(242,216,29)" fg:x="1207" fg:w="27"/><text x="64.7955%" y="559.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (16 samples, 0.86%)</title><rect x="65.1337%" y="533" width="0.8556%" height="15" fill="rgb(230,116,27)" fg:x="1218" fg:w="16"/><text x="65.3837%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 4.22%)</title><rect x="65.9893%" y="549" width="4.2246%" height="15" fill="rgb(228,99,48)" fg:x="1234" fg:w="79"/><text x="66.2393%" y="559.50">&lt;hash..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (8 samples, 0.43%)</title><rect x="84.0107%" y="533" width="0.4278%" height="15" fill="rgb(253,11,6)" fg:x="1571" fg:w="8"/><text x="84.2607%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (44 samples, 2.35%)</title><rect x="84.4385%" y="533" width="2.3529%" height="15" fill="rgb(247,143,39)" fg:x="1579" fg:w="44"/><text x="84.6885%" y="543.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (650 samples, 34.76%)</title><rect x="53.3690%" y="565" width="34.7594%" height="15" fill="rgb(236,97,10)" fg:x="998" fg:w="650"/><text x="53.6190%" y="575.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::trai..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (335 samples, 17.91%)</title><rect x="70.2139%" y="549" width="17.9144%" height="15" fill="rgb(233,208,19)" fg:x="1313" fg:w="335"/><text x="70.4639%" y="559.50">alloc::collections::btree::s..</text></g><g><title>alloc::collections::btree::navigate::full_range (25 samples, 1.34%)</title><rect x="86.7914%" y="533" width="1.3369%" height="15" fill="rgb(216,164,2)" fg:x="1623" fg:w="25"/><text x="87.0414%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,418 samples, 75.83%)</title><rect x="12.5668%" y="613" width="75.8289%" height="15" fill="rgb(220,129,5)" fg:x="235" fg:w="1418"/><text x="12.8168%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;sweepers::solver::MinWithinMaxCombinator as sweepers::solver::Rule&gt;::derive (665 samples, 35.56%)</title><rect x="52.8342%" y="597" width="35.5615%" height="15" fill="rgb(242,17,10)" fg:x="988" fg:w="665"/><text x="53.0842%" y="607.50">&lt;sweepers::solver::MinWithinMaxCombinator as sweepers::sol..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (665 samples, 35.56%)</title><rect x="52.8342%" y="581" width="35.5615%" height="15" fill="rgb(242,107,0)" fg:x="988" fg:w="665"/><text x="53.0842%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFro..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.27%)</title><rect x="88.1283%" y="565" width="0.2674%" height="15" fill="rgb(251,28,31)" fg:x="1648" fg:w="5"/><text x="88.3783%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.27%)</title><rect x="88.1283%" y="549" width="0.2674%" height="15" fill="rgb(233,223,10)" fg:x="1648" fg:w="5"/><text x="88.3783%" y="559.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.27%)</title><rect x="88.1283%" y="533" width="0.2674%" height="15" fill="rgb(215,21,27)" fg:x="1648" fg:w="5"/><text x="88.3783%" y="543.50"></text></g><g><title>_int_realloc (5 samples, 0.27%)</title><rect x="88.1283%" y="517" width="0.2674%" height="15" fill="rgb(232,23,21)" fg:x="1648" fg:w="5"/><text x="88.3783%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.27%)</title><rect x="88.1283%" y="501" width="0.2674%" height="15" fill="rgb(244,5,23)" fg:x="1648" fg:w="5"/><text x="88.3783%" y="511.50"></text></g><g><title>__GI___libc_free (2 samples, 0.11%)</title><rect x="88.9305%" y="581" width="0.1070%" height="15" fill="rgb(226,81,46)" fg:x="1663" fg:w="2"/><text x="89.1805%" y="591.50"></text></g><g><title>__GI_munmap (2 samples, 0.11%)</title><rect x="88.9305%" y="565" width="0.1070%" height="15" fill="rgb(247,70,30)" fg:x="1663" fg:w="2"/><text x="89.1805%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (34 samples, 1.82%)</title><rect x="90.5348%" y="565" width="1.8182%" height="15" fill="rgb(212,68,19)" fg:x="1693" fg:w="34"/><text x="90.7848%" y="575.50">&lt;..</text></g><g><title>alloc::collections::btree::navigate::full_range (8 samples, 0.43%)</title><rect x="91.9251%" y="549" width="0.4278%" height="15" fill="rgb(240,187,13)" fg:x="1719" fg:w="8"/><text x="92.1751%" y="559.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (3 samples, 0.16%)</title><rect x="93.6898%" y="549" width="0.1604%" height="15" fill="rgb(223,113,26)" fg:x="1752" fg:w="3"/><text x="93.9398%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (67 samples, 3.58%)</title><rect x="92.3529%" y="565" width="3.5829%" height="15" fill="rgb(206,192,2)" fg:x="1727" fg:w="67"/><text x="92.6029%" y="575.50">&lt;all..</text></g><g><title>core::hash::Hasher::write_usize (39 samples, 2.09%)</title><rect x="93.8503%" y="549" width="2.0856%" height="15" fill="rgb(241,108,4)" fg:x="1755" fg:w="39"/><text x="94.1003%" y="559.50">c..</text></g><g><title>__GI___libc_free (15 samples, 0.80%)</title><rect x="96.0963%" y="549" width="0.8021%" height="15" fill="rgb(247,173,49)" fg:x="1797" fg:w="15"/><text x="96.3463%" y="559.50"></text></g><g><title>_int_free (14 samples, 0.75%)</title><rect x="96.1497%" y="533" width="0.7487%" height="15" fill="rgb(224,114,35)" fg:x="1798" fg:w="14"/><text x="96.3997%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.12%)</title><rect x="95.9358%" y="565" width="1.1230%" height="15" fill="rgb(245,159,27)" fg:x="1794" fg:w="21"/><text x="96.1858%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (3 samples, 0.16%)</title><rect x="96.8984%" y="549" width="0.1604%" height="15" fill="rgb(245,172,44)" fg:x="1812" fg:w="3"/><text x="97.1484%" y="559.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.32%)</title><rect x="97.0588%" y="565" width="0.3209%" height="15" fill="rgb(236,23,11)" fg:x="1815" fg:w="6"/><text x="97.3088%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (169 samples, 9.04%)</title><rect x="88.3957%" y="613" width="9.0374%" height="15" fill="rgb(205,117,38)" fg:x="1653" fg:w="169"/><text x="88.6457%" y="623.50">&lt;hashbrown::m..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (169 samples, 9.04%)</title><rect x="88.3957%" y="597" width="9.0374%" height="15" fill="rgb(237,72,25)" fg:x="1653" fg:w="169"/><text x="88.6457%" y="607.50">&lt;core::iter::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (157 samples, 8.40%)</title><rect x="89.0374%" y="581" width="8.3957%" height="15" fill="rgb(244,70,9)" fg:x="1665" fg:w="157"/><text x="89.2874%" y="591.50">hashbrown::m..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.05%)</title><rect x="97.3797%" y="565" width="0.0535%" height="15" fill="rgb(217,125,39)" fg:x="1821" fg:w="1"/><text x="97.6297%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.05%)</title><rect x="97.3797%" y="549" width="0.0535%" height="15" fill="rgb(235,36,10)" fg:x="1821" fg:w="1"/><text x="97.6297%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.05%)</title><rect x="97.3797%" y="533" width="0.0535%" height="15" fill="rgb(251,123,47)" fg:x="1821" fg:w="1"/><text x="97.6297%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (1 samples, 0.05%)</title><rect x="97.3797%" y="517" width="0.0535%" height="15" fill="rgb(221,13,13)" fg:x="1821" fg:w="1"/><text x="97.6297%" y="527.50"></text></g><g><title>core::fmt::builders::DebugInner::entry (1 samples, 0.05%)</title><rect x="97.4332%" y="357" width="0.0535%" height="15" fill="rgb(238,131,9)" fg:x="1822" fg:w="1"/><text x="97.6832%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.11%)</title><rect x="97.4866%" y="261" width="0.1070%" height="15" fill="rgb(211,50,8)" fg:x="1823" fg:w="2"/><text x="97.7366%" y="271.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.11%)</title><rect x="97.4866%" y="245" width="0.1070%" height="15" fill="rgb(245,182,24)" fg:x="1823" fg:w="2"/><text x="97.7366%" y="255.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.11%)</title><rect x="97.4866%" y="229" width="0.1070%" height="15" fill="rgb(242,14,37)" fg:x="1823" fg:w="2"/><text x="97.7366%" y="239.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.11%)</title><rect x="97.4866%" y="213" width="0.1070%" height="15" fill="rgb(246,228,12)" fg:x="1823" fg:w="2"/><text x="97.7366%" y="223.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.05%)</title><rect x="97.5936%" y="261" width="0.0535%" height="15" fill="rgb(213,55,15)" fg:x="1825" fg:w="1"/><text x="97.8436%" y="271.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.05%)</title><rect x="97.5936%" y="245" width="0.0535%" height="15" fill="rgb(209,9,3)" fg:x="1825" fg:w="1"/><text x="97.8436%" y="255.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.5936%" y="229" width="0.0535%" height="15" fill="rgb(230,59,30)" fg:x="1825" fg:w="1"/><text x="97.8436%" y="239.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.5936%" y="213" width="0.0535%" height="15" fill="rgb(209,121,21)" fg:x="1825" fg:w="1"/><text x="97.8436%" y="223.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.5936%" y="197" width="0.0535%" height="15" fill="rgb(220,109,13)" fg:x="1825" fg:w="1"/><text x="97.8436%" y="207.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (1 samples, 0.05%)</title><rect x="97.6471%" y="165" width="0.0535%" height="15" fill="rgb(232,18,1)" fg:x="1826" fg:w="1"/><text x="97.8971%" y="175.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (1 samples, 0.05%)</title><rect x="97.6471%" y="149" width="0.0535%" height="15" fill="rgb(215,41,42)" fg:x="1826" fg:w="1"/><text x="97.8971%" y="159.50"></text></g><g><title>core::unicode::unicode_data::skip_search (1 samples, 0.05%)</title><rect x="97.6471%" y="133" width="0.0535%" height="15" fill="rgb(224,123,36)" fg:x="1826" fg:w="1"/><text x="97.8971%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (1 samples, 0.05%)</title><rect x="97.6471%" y="117" width="0.0535%" height="15" fill="rgb(240,125,3)" fg:x="1826" fg:w="1"/><text x="97.8971%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (1 samples, 0.05%)</title><rect x="97.6471%" y="101" width="0.0535%" height="15" fill="rgb(205,98,50)" fg:x="1826" fg:w="1"/><text x="97.8971%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (1 samples, 0.05%)</title><rect x="97.6471%" y="85" width="0.0535%" height="15" fill="rgb(205,185,37)" fg:x="1826" fg:w="1"/><text x="97.8971%" y="95.50"></text></g><g><title>core::unicode::unicode_data::skip_search::{{closure}} (1 samples, 0.05%)</title><rect x="97.6471%" y="69" width="0.0535%" height="15" fill="rgb(238,207,15)" fg:x="1826" fg:w="1"/><text x="97.8971%" y="79.50"></text></g><g><title>&lt;&amp;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (1 samples, 0.05%)</title><rect x="97.6471%" y="53" width="0.0535%" height="15" fill="rgb(213,199,42)" fg:x="1826" fg:w="1"/><text x="97.8971%" y="63.50"></text></g><g><title>&lt;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (1 samples, 0.05%)</title><rect x="97.6471%" y="37" width="0.0535%" height="15" fill="rgb(235,201,11)" fg:x="1826" fg:w="1"/><text x="97.8971%" y="47.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (2 samples, 0.11%)</title><rect x="97.6471%" y="197" width="0.1070%" height="15" fill="rgb(207,46,11)" fg:x="1826" fg:w="2"/><text x="97.8971%" y="207.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (2 samples, 0.11%)</title><rect x="97.6471%" y="181" width="0.1070%" height="15" fill="rgb(241,35,35)" fg:x="1826" fg:w="2"/><text x="97.8971%" y="191.50"></text></g><g><title>core::unicode::printable::is_printable (1 samples, 0.05%)</title><rect x="97.7005%" y="165" width="0.0535%" height="15" fill="rgb(243,32,47)" fg:x="1827" fg:w="1"/><text x="97.9505%" y="175.50"></text></g><g><title>core::unicode::printable::check (1 samples, 0.05%)</title><rect x="97.7005%" y="149" width="0.0535%" height="15" fill="rgb(247,202,23)" fg:x="1827" fg:w="1"/><text x="97.9505%" y="159.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.05%)</title><rect x="97.7540%" y="197" width="0.0535%" height="15" fill="rgb(219,102,11)" fg:x="1828" fg:w="1"/><text x="98.0040%" y="207.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.7540%" y="181" width="0.0535%" height="15" fill="rgb(243,110,44)" fg:x="1828" fg:w="1"/><text x="98.0040%" y="191.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.7540%" y="165" width="0.0535%" height="15" fill="rgb(222,74,54)" fg:x="1828" fg:w="1"/><text x="98.0040%" y="175.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.7540%" y="149" width="0.0535%" height="15" fill="rgb(216,99,12)" fg:x="1828" fg:w="1"/><text x="98.0040%" y="159.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.7540%" y="133" width="0.0535%" height="15" fill="rgb(226,22,26)" fg:x="1828" fg:w="1"/><text x="98.0040%" y="143.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.7540%" y="117" width="0.0535%" height="15" fill="rgb(217,163,10)" fg:x="1828" fg:w="1"/><text x="98.0040%" y="127.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.05%)</title><rect x="97.7540%" y="101" width="0.0535%" height="15" fill="rgb(213,25,53)" fg:x="1828" fg:w="1"/><text x="98.0040%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="97.7540%" y="85" width="0.0535%" height="15" fill="rgb(252,105,26)" fg:x="1828" fg:w="1"/><text x="98.0040%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="97.7540%" y="69" width="0.0535%" height="15" fill="rgb(220,39,43)" fg:x="1828" fg:w="1"/><text x="98.0040%" y="79.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.7540%" y="53" width="0.0535%" height="15" fill="rgb(229,68,48)" fg:x="1828" fg:w="1"/><text x="98.0040%" y="63.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (4 samples, 0.21%)</title><rect x="97.6471%" y="245" width="0.2139%" height="15" fill="rgb(252,8,32)" fg:x="1826" fg:w="4"/><text x="97.8971%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.21%)</title><rect x="97.6471%" y="229" width="0.2139%" height="15" fill="rgb(223,20,43)" fg:x="1826" fg:w="4"/><text x="97.8971%" y="239.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (4 samples, 0.21%)</title><rect x="97.6471%" y="213" width="0.2139%" height="15" fill="rgb(229,81,49)" fg:x="1826" fg:w="4"/><text x="97.8971%" y="223.50"></text></g><g><title>core::fmt::builders::PadAdapter::wrap (1 samples, 0.05%)</title><rect x="97.8075%" y="197" width="0.0535%" height="15" fill="rgb(236,28,36)" fg:x="1829" fg:w="1"/><text x="98.0575%" y="207.50"></text></g><g><title>core::fmt::Formatter::wrap_buf (1 samples, 0.05%)</title><rect x="97.8075%" y="181" width="0.0535%" height="15" fill="rgb(249,185,26)" fg:x="1829" fg:w="1"/><text x="98.0575%" y="191.50"></text></g><g><title>sweepers::solver::_DERIVE_core_fmt_Debug_FOR_FactDebug::&lt;impl core::fmt::Debug for sweepers::solver::FactDebug&gt;::fmt (5 samples, 0.27%)</title><rect x="97.6471%" y="261" width="0.2674%" height="15" fill="rgb(249,174,33)" fg:x="1826" fg:w="5"/><text x="97.8971%" y="271.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.05%)</title><rect x="97.8610%" y="245" width="0.0535%" height="15" fill="rgb(233,201,37)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.05%)</title><rect x="97.8610%" y="229" width="0.0535%" height="15" fill="rgb(221,78,26)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="239.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.05%)</title><rect x="97.8610%" y="213" width="0.0535%" height="15" fill="rgb(250,127,30)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="223.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.8610%" y="197" width="0.0535%" height="15" fill="rgb(230,49,44)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="207.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.8610%" y="181" width="0.0535%" height="15" fill="rgb(229,67,23)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="191.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.8610%" y="165" width="0.0535%" height="15" fill="rgb(249,83,47)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="175.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="97.8610%" y="149" width="0.0535%" height="15" fill="rgb(215,43,3)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="159.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.05%)</title><rect x="97.8610%" y="133" width="0.0535%" height="15" fill="rgb(238,154,13)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="97.8610%" y="117" width="0.0535%" height="15" fill="rgb(219,56,2)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="97.8610%" y="101" width="0.0535%" height="15" fill="rgb(233,0,4)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.05%)</title><rect x="97.8610%" y="85" width="0.0535%" height="15" fill="rgb(235,30,7)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="97.8610%" y="69" width="0.0535%" height="15" fill="rgb(250,79,13)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="79.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="97.8610%" y="53" width="0.0535%" height="15" fill="rgb(211,146,34)" fg:x="1830" fg:w="1"/><text x="98.1110%" y="63.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.11%)</title><rect x="97.9679%" y="165" width="0.1070%" height="15" fill="rgb(228,22,38)" fg:x="1832" fg:w="2"/><text x="98.2179%" y="175.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="98.0214%" y="149" width="0.0535%" height="15" fill="rgb(235,168,5)" fg:x="1833" fg:w="1"/><text x="98.2714%" y="159.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="98.2353%" y="85" width="0.0535%" height="15" fill="rgb(221,155,16)" fg:x="1837" fg:w="1"/><text x="98.4853%" y="95.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="98.2353%" y="69" width="0.0535%" height="15" fill="rgb(215,215,53)" fg:x="1837" fg:w="1"/><text x="98.4853%" y="79.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.05%)</title><rect x="98.2353%" y="53" width="0.0535%" height="15" fill="rgb(223,4,10)" fg:x="1837" fg:w="1"/><text x="98.4853%" y="63.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (8 samples, 0.43%)</title><rect x="97.9144%" y="213" width="0.4278%" height="15" fill="rgb(234,103,6)" fg:x="1831" fg:w="8"/><text x="98.1644%" y="223.50"></text></g><g><title>core::fmt::Formatter::write_fmt (7 samples, 0.37%)</title><rect x="97.9679%" y="197" width="0.3743%" height="15" fill="rgb(227,97,0)" fg:x="1832" fg:w="7"/><text x="98.2179%" y="207.50"></text></g><g><title>core::fmt::write (7 samples, 0.37%)</title><rect x="97.9679%" y="181" width="0.3743%" height="15" fill="rgb(234,150,53)" fg:x="1832" fg:w="7"/><text x="98.2179%" y="191.50"></text></g><g><title>&lt;sweepers::core::location::Bounded as core::fmt::Display&gt;::fmt (5 samples, 0.27%)</title><rect x="98.0749%" y="165" width="0.2674%" height="15" fill="rgb(228,201,54)" fg:x="1834" fg:w="5"/><text x="98.3249%" y="175.50"></text></g><g><title>core::fmt::Formatter::write_fmt (4 samples, 0.21%)</title><rect x="98.1283%" y="149" width="0.2139%" height="15" fill="rgb(222,22,37)" fg:x="1835" fg:w="4"/><text x="98.3783%" y="159.50"></text></g><g><title>core::fmt::write (3 samples, 0.16%)</title><rect x="98.1818%" y="133" width="0.1604%" height="15" fill="rgb(237,53,32)" fg:x="1836" fg:w="3"/><text x="98.4318%" y="143.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.11%)</title><rect x="98.2353%" y="117" width="0.1070%" height="15" fill="rgb(233,25,53)" fg:x="1837" fg:w="2"/><text x="98.4853%" y="127.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.11%)</title><rect x="98.2353%" y="101" width="0.1070%" height="15" fill="rgb(210,40,34)" fg:x="1837" fg:w="2"/><text x="98.4853%" y="111.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.05%)</title><rect x="98.2888%" y="85" width="0.0535%" height="15" fill="rgb(241,220,44)" fg:x="1838" fg:w="1"/><text x="98.5388%" y="95.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (17 samples, 0.91%)</title><rect x="97.4866%" y="309" width="0.9091%" height="15" fill="rgb(235,28,35)" fg:x="1823" fg:w="17"/><text x="97.7366%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (17 samples, 0.91%)</title><rect x="97.4866%" y="293" width="0.9091%" height="15" fill="rgb(210,56,17)" fg:x="1823" fg:w="17"/><text x="97.7366%" y="303.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (17 samples, 0.91%)</title><rect x="97.4866%" y="277" width="0.9091%" height="15" fill="rgb(224,130,29)" fg:x="1823" fg:w="17"/><text x="97.7366%" y="287.50"></text></g><g><title>sweepers::solver::set_fmt (9 samples, 0.48%)</title><rect x="97.9144%" y="261" width="0.4813%" height="15" fill="rgb(235,212,8)" fg:x="1831" fg:w="9"/><text x="98.1644%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (9 samples, 0.48%)</title><rect x="97.9144%" y="245" width="0.4813%" height="15" fill="rgb(223,33,50)" fg:x="1831" fg:w="9"/><text x="98.1644%" y="255.50"></text></g><g><title>core::fmt::write (9 samples, 0.48%)</title><rect x="97.9144%" y="229" width="0.4813%" height="15" fill="rgb(219,149,13)" fg:x="1831" fg:w="9"/><text x="98.1644%" y="239.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="98.3422%" y="213" width="0.0535%" height="15" fill="rgb(250,156,29)" fg:x="1839" fg:w="1"/><text x="98.5922%" y="223.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="98.3422%" y="197" width="0.0535%" height="15" fill="rgb(216,193,19)" fg:x="1839" fg:w="1"/><text x="98.5922%" y="207.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="98.3422%" y="181" width="0.0535%" height="15" fill="rgb(216,135,14)" fg:x="1839" fg:w="1"/><text x="98.5922%" y="191.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="98.3422%" y="165" width="0.0535%" height="15" fill="rgb(241,47,5)" fg:x="1839" fg:w="1"/><text x="98.5922%" y="175.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.05%)</title><rect x="98.3422%" y="149" width="0.0535%" height="15" fill="rgb(233,42,35)" fg:x="1839" fg:w="1"/><text x="98.5922%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="98.3422%" y="133" width="0.0535%" height="15" fill="rgb(231,13,6)" fg:x="1839" fg:w="1"/><text x="98.5922%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="98.3422%" y="117" width="0.0535%" height="15" fill="rgb(207,181,40)" fg:x="1839" fg:w="1"/><text x="98.5922%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="98.3422%" y="101" width="0.0535%" height="15" fill="rgb(254,173,49)" fg:x="1839" fg:w="1"/><text x="98.5922%" y="111.50"></text></g><g><title>__GI___clone (1,607 samples, 85.94%)</title><rect x="12.5134%" y="1013" width="85.9358%" height="15" fill="rgb(221,1,38)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="1023.50">__GI___clone</text></g><g><title>start_thread (1,607 samples, 85.94%)</title><rect x="12.5134%" y="997" width="85.9358%" height="15" fill="rgb(206,124,46)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="1007.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,607 samples, 85.94%)</title><rect x="12.5134%" y="981" width="85.9358%" height="15" fill="rgb(249,21,11)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="991.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,607 samples, 85.94%)</title><rect x="12.5134%" y="965" width="85.9358%" height="15" fill="rgb(222,201,40)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="975.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,607 samples, 85.94%)</title><rect x="12.5134%" y="949" width="85.9358%" height="15" fill="rgb(235,61,29)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="959.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,607 samples, 85.94%)</title><rect x="12.5134%" y="933" width="85.9358%" height="15" fill="rgb(219,207,3)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="943.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (1,607 samples, 85.94%)</title><rect x="12.5134%" y="917" width="85.9358%" height="15" fill="rgb(222,56,46)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="927.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,607 samples, 85.94%)</title><rect x="12.5134%" y="901" width="85.9358%" height="15" fill="rgb(239,76,54)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,607 samples, 85.94%)</title><rect x="12.5134%" y="885" width="85.9358%" height="15" fill="rgb(231,124,27)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,607 samples, 85.94%)</title><rect x="12.5134%" y="869" width="85.9358%" height="15" fill="rgb(249,195,6)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="879.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,607 samples, 85.94%)</title><rect x="12.5134%" y="853" width="85.9358%" height="15" fill="rgb(237,174,47)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="863.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1,607 samples, 85.94%)</title><rect x="12.5134%" y="837" width="85.9358%" height="15" fill="rgb(206,201,31)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="847.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,607 samples, 85.94%)</title><rect x="12.5134%" y="821" width="85.9358%" height="15" fill="rgb(231,57,52)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::run_test_inner::{{closure}} (1,607 samples, 85.94%)</title><rect x="12.5134%" y="805" width="85.9358%" height="15" fill="rgb(248,177,22)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="815.50">test::run_test::run_test_inner::{{closure}}</text></g><g><title>test::run_test::run_test_inner::{{closure}} (1,607 samples, 85.94%)</title><rect x="12.5134%" y="789" width="85.9358%" height="15" fill="rgb(215,211,37)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="799.50">test::run_test::run_test_inner::{{closure}}</text></g><g><title>test::run_test_in_process (1,607 samples, 85.94%)</title><rect x="12.5134%" y="773" width="85.9358%" height="15" fill="rgb(241,128,51)" fg:x="234" fg:w="1607"/><text x="12.7634%" y="783.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (1,606 samples, 85.88%)</title><rect x="12.5668%" y="757" width="85.8824%" height="15" fill="rgb(227,165,31)" fg:x="235" fg:w="1606"/><text x="12.8168%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,606 samples, 85.88%)</title><rect x="12.5668%" y="741" width="85.8824%" height="15" fill="rgb(228,167,24)" fg:x="235" fg:w="1606"/><text x="12.8168%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,606 samples, 85.88%)</title><rect x="12.5668%" y="725" width="85.8824%" height="15" fill="rgb(228,143,12)" fg:x="235" fg:w="1606"/><text x="12.8168%" y="735.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,606 samples, 85.88%)</title><rect x="12.5668%" y="709" width="85.8824%" height="15" fill="rgb(249,149,8)" fg:x="235" fg:w="1606"/><text x="12.8168%" y="719.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,606 samples, 85.88%)</title><rect x="12.5668%" y="693" width="85.8824%" height="15" fill="rgb(243,35,44)" fg:x="235" fg:w="1606"/><text x="12.8168%" y="703.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>test::__rust_begin_short_backtrace (1,606 samples, 85.88%)</title><rect x="12.5668%" y="677" width="85.8824%" height="15" fill="rgb(246,89,9)" fg:x="235" fg:w="1606"/><text x="12.8168%" y="687.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,606 samples, 85.88%)</title><rect x="12.5668%" y="661" width="85.8824%" height="15" fill="rgb(233,213,13)" fg:x="235" fg:w="1606"/><text x="12.8168%" y="671.50">core::ops::function::FnOnce::call_once</text></g><g><title>sweepers::solver::tests::cross_deduction (1,606 samples, 85.88%)</title><rect x="12.5668%" y="645" width="85.8824%" height="15" fill="rgb(233,141,41)" fg:x="235" fg:w="1606"/><text x="12.8168%" y="655.50">sweepers::solver::tests::cross_deduction</text></g><g><title>sweepers::solver::Solver::solve_dump (1,606 samples, 85.88%)</title><rect x="12.5668%" y="629" width="85.8824%" height="15" fill="rgb(239,167,4)" fg:x="235" fg:w="1606"/><text x="12.8168%" y="639.50">sweepers::solver::Solver::solve_dump</text></g><g><title>std::io::stdio::_print (19 samples, 1.02%)</title><rect x="97.4332%" y="613" width="1.0160%" height="15" fill="rgb(209,217,16)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="623.50"></text></g><g><title>std::io::stdio::print_to (19 samples, 1.02%)</title><rect x="97.4332%" y="597" width="1.0160%" height="15" fill="rgb(219,88,35)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="607.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19 samples, 1.02%)</title><rect x="97.4332%" y="581" width="1.0160%" height="15" fill="rgb(220,193,23)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="591.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (19 samples, 1.02%)</title><rect x="97.4332%" y="565" width="1.0160%" height="15" fill="rgb(230,90,52)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 1.02%)</title><rect x="97.4332%" y="549" width="1.0160%" height="15" fill="rgb(252,106,19)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="559.50"></text></g><g><title>std::io::stdio::print_to::{{closure}}::{{closure}} (19 samples, 1.02%)</title><rect x="97.4332%" y="533" width="1.0160%" height="15" fill="rgb(206,74,20)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="543.50"></text></g><g><title>std::io::Write::write_fmt (19 samples, 1.02%)</title><rect x="97.4332%" y="517" width="1.0160%" height="15" fill="rgb(230,138,44)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="527.50"></text></g><g><title>core::fmt::write (19 samples, 1.02%)</title><rect x="97.4332%" y="501" width="1.0160%" height="15" fill="rgb(235,182,43)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="511.50"></text></g><g><title>core::fmt::run (19 samples, 1.02%)</title><rect x="97.4332%" y="485" width="1.0160%" height="15" fill="rgb(242,16,51)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="495.50"></text></g><g><title>sweepers::solver::_DERIVE_core_fmt_Debug_FOR_Solver::&lt;impl core::fmt::Debug for sweepers::solver::Solver&gt;::fmt (19 samples, 1.02%)</title><rect x="97.4332%" y="469" width="1.0160%" height="15" fill="rgb(248,9,4)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="479.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (19 samples, 1.02%)</title><rect x="97.4332%" y="453" width="1.0160%" height="15" fill="rgb(210,31,22)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (19 samples, 1.02%)</title><rect x="97.4332%" y="437" width="1.0160%" height="15" fill="rgb(239,54,39)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (19 samples, 1.02%)</title><rect x="97.4332%" y="421" width="1.0160%" height="15" fill="rgb(230,99,41)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="431.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (19 samples, 1.02%)</title><rect x="97.4332%" y="405" width="1.0160%" height="15" fill="rgb(253,106,12)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="415.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (19 samples, 1.02%)</title><rect x="97.4332%" y="389" width="1.0160%" height="15" fill="rgb(213,46,41)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="399.50"></text></g><g><title>core::fmt::builders::DebugInner::entry (19 samples, 1.02%)</title><rect x="97.4332%" y="373" width="1.0160%" height="15" fill="rgb(215,133,35)" fg:x="1822" fg:w="19"/><text x="97.6832%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (18 samples, 0.96%)</title><rect x="97.4866%" y="357" width="0.9626%" height="15" fill="rgb(213,28,5)" fg:x="1823" fg:w="18"/><text x="97.7366%" y="367.50"></text></g><g><title>core::fmt::builders::DebugInner::entry::{{closure}} (18 samples, 0.96%)</title><rect x="97.4866%" y="341" width="0.9626%" height="15" fill="rgb(215,77,49)" fg:x="1823" fg:w="18"/><text x="97.7366%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (18 samples, 0.96%)</title><rect x="97.4866%" y="325" width="0.9626%" height="15" fill="rgb(248,100,22)" fg:x="1823" fg:w="18"/><text x="97.7366%" y="335.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.05%)</title><rect x="98.3957%" y="309" width="0.0535%" height="15" fill="rgb(208,67,9)" fg:x="1840" fg:w="1"/><text x="98.6457%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.05%)</title><rect x="98.3957%" y="293" width="0.0535%" height="15" fill="rgb(219,133,21)" fg:x="1840" fg:w="1"/><text x="98.6457%" y="303.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.05%)</title><rect x="98.3957%" y="277" width="0.0535%" height="15" fill="rgb(246,46,29)" fg:x="1840" fg:w="1"/><text x="98.6457%" y="287.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="98.3957%" y="261" width="0.0535%" height="15" fill="rgb(246,185,52)" fg:x="1840" fg:w="1"/><text x="98.6457%" y="271.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="98.3957%" y="245" width="0.0535%" height="15" fill="rgb(252,136,11)" fg:x="1840" fg:w="1"/><text x="98.6457%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.05%)</title><rect x="98.4492%" y="1013" width="0.0535%" height="15" fill="rgb(219,138,53)" fg:x="1841" fg:w="1"/><text x="98.6992%" y="1023.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.05%)</title><rect x="98.4492%" y="997" width="0.0535%" height="15" fill="rgb(211,51,23)" fg:x="1841" fg:w="1"/><text x="98.6992%" y="1007.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (3 samples, 0.16%)</title><rect x="98.5027%" y="1013" width="0.1604%" height="15" fill="rgb(247,221,28)" fg:x="1842" fg:w="3"/><text x="98.7527%" y="1023.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.16%)</title><rect x="98.6631%" y="1013" width="0.1604%" height="15" fill="rgb(251,222,45)" fg:x="1845" fg:w="3"/><text x="98.9131%" y="1023.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (3 samples, 0.16%)</title><rect x="98.8235%" y="1013" width="0.1604%" height="15" fill="rgb(217,162,53)" fg:x="1848" fg:w="3"/><text x="99.0735%" y="1023.50"></text></g><g><title>solver::tests:: (1,854 samples, 99.14%)</title><rect x="0.0000%" y="1029" width="99.1444%" height="15" fill="rgb(229,93,14)" fg:x="0" fg:w="1854"/><text x="0.2500%" y="1039.50">solver::tests::</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.16%)</title><rect x="98.9840%" y="1013" width="0.1604%" height="15" fill="rgb(209,67,49)" fg:x="1851" fg:w="3"/><text x="99.2340%" y="1023.50"></text></g><g><title>__GI___clone (6 samples, 0.32%)</title><rect x="99.1444%" y="1013" width="0.3209%" height="15" fill="rgb(213,87,29)" fg:x="1854" fg:w="6"/><text x="99.3944%" y="1023.50"></text></g><g><title>start_thread (1 samples, 0.05%)</title><rect x="99.4118%" y="997" width="0.0535%" height="15" fill="rgb(205,151,52)" fg:x="1859" fg:w="1"/><text x="99.6618%" y="1007.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.05%)</title><rect x="99.4118%" y="981" width="0.0535%" height="15" fill="rgb(253,215,39)" fg:x="1859" fg:w="1"/><text x="99.6618%" y="991.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (1 samples, 0.05%)</title><rect x="99.4118%" y="965" width="0.0535%" height="15" fill="rgb(221,220,41)" fg:x="1859" fg:w="1"/><text x="99.6618%" y="975.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.05%)</title><rect x="99.4118%" y="949" width="0.0535%" height="15" fill="rgb(218,133,21)" fg:x="1859" fg:w="1"/><text x="99.6618%" y="959.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.05%)</title><rect x="99.4118%" y="933" width="0.0535%" height="15" fill="rgb(221,193,43)" fg:x="1859" fg:w="1"/><text x="99.6618%" y="943.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.05%)</title><rect x="99.4118%" y="917" width="0.0535%" height="15" fill="rgb(240,128,52)" fg:x="1859" fg:w="1"/><text x="99.6618%" y="927.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.05%)</title><rect x="99.4118%" y="901" width="0.0535%" height="15" fill="rgb(253,114,12)" fg:x="1859" fg:w="1"/><text x="99.6618%" y="911.50"></text></g><g><title>_init (1 samples, 0.05%)</title><rect x="99.4652%" y="1013" width="0.0535%" height="15" fill="rgb(215,223,47)" fg:x="1860" fg:w="1"/><text x="99.7152%" y="1023.50"></text></g><g><title>__pthread_initialize_minimal_internal (1 samples, 0.05%)</title><rect x="99.4652%" y="997" width="0.0535%" height="15" fill="rgb(248,225,23)" fg:x="1860" fg:w="1"/><text x="99.7152%" y="1007.50"></text></g><g><title>__GI_madvise (1 samples, 0.05%)</title><rect x="99.8396%" y="741" width="0.0535%" height="15" fill="rgb(250,108,0)" fg:x="1867" fg:w="1"/><text x="100.0896%" y="751.50"></text></g><g><title>__libc_start_main (2 samples, 0.11%)</title><rect x="99.8396%" y="997" width="0.1070%" height="15" fill="rgb(228,208,7)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="1007.50"></text></g><g><title>main (2 samples, 0.11%)</title><rect x="99.8396%" y="981" width="0.1070%" height="15" fill="rgb(244,45,10)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="991.50"></text></g><g><title>std::rt::lang_start_internal (2 samples, 0.11%)</title><rect x="99.8396%" y="965" width="0.1070%" height="15" fill="rgb(207,125,25)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="975.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.11%)</title><rect x="99.8396%" y="949" width="0.1070%" height="15" fill="rgb(210,195,18)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="959.50"></text></g><g><title>std::panicking::try (2 samples, 0.11%)</title><rect x="99.8396%" y="933" width="0.1070%" height="15" fill="rgb(249,80,12)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="943.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.11%)</title><rect x="99.8396%" y="917" width="0.1070%" height="15" fill="rgb(221,65,9)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="927.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2 samples, 0.11%)</title><rect x="99.8396%" y="901" width="0.1070%" height="15" fill="rgb(235,49,36)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="911.50"></text></g><g><title>std::rt::lang_start::{{closure}} (2 samples, 0.11%)</title><rect x="99.8396%" y="885" width="0.1070%" height="15" fill="rgb(225,32,20)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.11%)</title><rect x="99.8396%" y="869" width="0.1070%" height="15" fill="rgb(215,141,46)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="879.50"></text></g><g><title>test::test_main_static (2 samples, 0.11%)</title><rect x="99.8396%" y="853" width="0.1070%" height="15" fill="rgb(250,160,47)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="863.50"></text></g><g><title>test::test_main (2 samples, 0.11%)</title><rect x="99.8396%" y="837" width="0.1070%" height="15" fill="rgb(216,222,40)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="847.50"></text></g><g><title>test::console::run_tests_console (2 samples, 0.11%)</title><rect x="99.8396%" y="821" width="0.1070%" height="15" fill="rgb(234,217,39)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="831.50"></text></g><g><title>test::run_tests (2 samples, 0.11%)</title><rect x="99.8396%" y="805" width="0.1070%" height="15" fill="rgb(207,178,40)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="815.50"></text></g><g><title>test::console::run_tests_console::{{closure}} (2 samples, 0.11%)</title><rect x="99.8396%" y="789" width="0.1070%" height="15" fill="rgb(221,136,13)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="799.50"></text></g><g><title>__GI___libc_free (2 samples, 0.11%)</title><rect x="99.8396%" y="773" width="0.1070%" height="15" fill="rgb(249,199,10)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="783.50"></text></g><g><title>_int_free (2 samples, 0.11%)</title><rect x="99.8396%" y="757" width="0.1070%" height="15" fill="rgb(249,222,13)" fg:x="1867" fg:w="2"/><text x="100.0896%" y="767.50"></text></g><g><title>__GI_munmap (1 samples, 0.05%)</title><rect x="99.8930%" y="741" width="0.0535%" height="15" fill="rgb(244,185,38)" fg:x="1868" fg:w="1"/><text x="100.1430%" y="751.50"></text></g><g><title>all (1,870 samples, 100%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="1870"/><text x="0.2500%" y="1055.50"></text></g><g><title>sweepers-4c2ea9 (16 samples, 0.86%)</title><rect x="99.1444%" y="1029" width="0.8556%" height="15" fill="rgb(250,229,37)" fg:x="1854" fg:w="16"/><text x="99.3944%" y="1039.50"></text></g><g><title>_start (9 samples, 0.48%)</title><rect x="99.5187%" y="1013" width="0.4813%" height="15" fill="rgb(206,174,23)" fg:x="1861" fg:w="9"/><text x="99.7687%" y="1023.50"></text></g><g><title>_dl_start (1 samples, 0.05%)</title><rect x="99.9465%" y="997" width="0.0535%" height="15" fill="rgb(211,33,43)" fg:x="1869" fg:w="1"/><text x="100.1965%" y="1007.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.05%)</title><rect x="99.9465%" y="981" width="0.0535%" height="15" fill="rgb(245,58,50)" fg:x="1869" fg:w="1"/><text x="100.1965%" y="991.50"></text></g><g><title>dl_main (1 samples, 0.05%)</title><rect x="99.9465%" y="965" width="0.0535%" height="15" fill="rgb(244,68,36)" fg:x="1869" fg:w="1"/><text x="100.1965%" y="975.50"></text></g></svg></svg>