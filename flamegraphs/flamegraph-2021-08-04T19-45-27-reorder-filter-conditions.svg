<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1125.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1280"><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="0.0000%" y="1061" width="0.3125%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.23%)</title><rect x="0.3125%" y="1061" width="0.2344%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="3"/><text x="0.5625%" y="1071.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (5 samples, 0.39%)</title><rect x="0.5469%" y="1045" width="0.3906%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="5"/><text x="0.7969%" y="1055.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="0.9375%" y="1045" width="0.0781%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="1"/><text x="1.1875%" y="1055.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (3 samples, 0.23%)</title><rect x="1.0156%" y="1045" width="0.2344%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="3"/><text x="1.2656%" y="1055.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (2 samples, 0.16%)</title><rect x="1.0938%" y="1029" width="0.1562%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="2"/><text x="1.3438%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.09%)</title><rect x="1.2500%" y="1045" width="1.0938%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="14"/><text x="1.5000%" y="1055.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.3438%" y="1045" width="0.0781%" height="15" fill="rgb(228,23,34)" fg:x="30" fg:w="1"/><text x="2.5938%" y="1055.50"></text></g><g><title>_int_malloc (1 samples, 0.08%)</title><rect x="2.4219%" y="1045" width="0.0781%" height="15" fill="rgb(218,30,26)" fg:x="31" fg:w="1"/><text x="2.6719%" y="1055.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (3 samples, 0.23%)</title><rect x="2.5000%" y="1045" width="0.2344%" height="15" fill="rgb(220,122,19)" fg:x="32" fg:w="3"/><text x="2.7500%" y="1055.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.23%)</title><rect x="2.7344%" y="1045" width="0.2344%" height="15" fill="rgb(250,228,42)" fg:x="35" fg:w="3"/><text x="2.9844%" y="1055.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.31%)</title><rect x="2.9688%" y="1045" width="0.3125%" height="15" fill="rgb(240,193,28)" fg:x="38" fg:w="4"/><text x="3.2188%" y="1055.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.08%)</title><rect x="3.2812%" y="1045" width="0.0781%" height="15" fill="rgb(216,20,37)" fg:x="42" fg:w="1"/><text x="3.5312%" y="1055.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (31 samples, 2.42%)</title><rect x="3.3594%" y="1045" width="2.4219%" height="15" fill="rgb(206,188,39)" fg:x="43" fg:w="31"/><text x="3.6094%" y="1055.50">al..</text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="5.7812%" y="1045" width="0.0781%" height="15" fill="rgb(217,207,13)" fg:x="74" fg:w="1"/><text x="6.0312%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.8594%" y="1045" width="0.1562%" height="15" fill="rgb(231,73,38)" fg:x="75" fg:w="2"/><text x="6.1094%" y="1055.50"></text></g><g><title>[anon] (71 samples, 5.55%)</title><rect x="0.5469%" y="1061" width="5.5469%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="71"/><text x="0.7969%" y="1071.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.08%)</title><rect x="6.0156%" y="1045" width="0.0781%" height="15" fill="rgb(210,31,41)" fg:x="77" fg:w="1"/><text x="6.2656%" y="1055.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.0938%" y="1045" width="0.0781%" height="15" fill="rgb(221,200,47)" fg:x="78" fg:w="1"/><text x="6.3438%" y="1055.50"></text></g><g><title>[sweepers-4c2ea9598e7bd92e] (2 samples, 0.16%)</title><rect x="6.0938%" y="1061" width="0.1562%" height="15" fill="rgb(226,26,5)" fg:x="78" fg:w="2"/><text x="6.3438%" y="1071.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.1719%" y="1045" width="0.0781%" height="15" fill="rgb(249,33,26)" fg:x="79" fg:w="1"/><text x="6.4219%" y="1055.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="6.2500%" y="1045" width="0.1562%" height="15" fill="rgb(235,183,28)" fg:x="80" fg:w="2"/><text x="6.5000%" y="1055.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (2 samples, 0.16%)</title><rect x="6.4062%" y="1045" width="0.1562%" height="15" fill="rgb(221,5,38)" fg:x="82" fg:w="2"/><text x="6.6562%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 2.27%)</title><rect x="6.5625%" y="1045" width="2.2656%" height="15" fill="rgb(247,18,42)" fg:x="84" fg:w="29"/><text x="6.8125%" y="1055.50">&lt;..</text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.8281%" y="1045" width="0.0781%" height="15" fill="rgb(241,131,45)" fg:x="113" fg:w="1"/><text x="9.0781%" y="1055.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="8.9062%" y="1045" width="0.1562%" height="15" fill="rgb(249,31,29)" fg:x="114" fg:w="2"/><text x="9.1562%" y="1055.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.23%)</title><rect x="9.0625%" y="1045" width="0.2344%" height="15" fill="rgb(225,111,53)" fg:x="116" fg:w="3"/><text x="9.3125%" y="1055.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.2969%" y="1045" width="0.0781%" height="15" fill="rgb(238,160,17)" fg:x="119" fg:w="1"/><text x="9.5469%" y="1055.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.08%)</title><rect x="9.3750%" y="1045" width="0.0781%" height="15" fill="rgb(214,148,48)" fg:x="120" fg:w="1"/><text x="9.6250%" y="1055.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (3 samples, 0.23%)</title><rect x="9.4531%" y="1045" width="0.2344%" height="15" fill="rgb(232,36,49)" fg:x="121" fg:w="3"/><text x="9.7031%" y="1055.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (6 samples, 0.47%)</title><rect x="9.6875%" y="1045" width="0.4688%" height="15" fill="rgb(209,103,24)" fg:x="124" fg:w="6"/><text x="9.9375%" y="1055.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (6 samples, 0.47%)</title><rect x="10.1562%" y="1045" width="0.4688%" height="15" fill="rgb(229,88,8)" fg:x="130" fg:w="6"/><text x="10.4062%" y="1055.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.31%)</title><rect x="10.6250%" y="1045" width="0.3125%" height="15" fill="rgb(213,181,19)" fg:x="136" fg:w="4"/><text x="10.8750%" y="1055.50"></text></g><g><title>[unknown] (62 samples, 4.84%)</title><rect x="6.2500%" y="1061" width="4.8438%" height="15" fill="rgb(254,191,54)" fg:x="80" fg:w="62"/><text x="6.5000%" y="1071.50">[unkno..</text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.16%)</title><rect x="10.9375%" y="1045" width="0.1562%" height="15" fill="rgb(241,83,37)" fg:x="140" fg:w="2"/><text x="11.1875%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="11.0938%" y="805" width="0.0781%" height="15" fill="rgb(233,36,39)" fg:x="142" fg:w="1"/><text x="11.3438%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.0938%" y="789" width="0.0781%" height="15" fill="rgb(226,3,54)" fg:x="142" fg:w="1"/><text x="11.3438%" y="799.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="11.0938%" y="773" width="0.0781%" height="15" fill="rgb(245,192,40)" fg:x="142" fg:w="1"/><text x="11.3438%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="11.0938%" y="757" width="0.0781%" height="15" fill="rgb(238,167,29)" fg:x="142" fg:w="1"/><text x="11.3438%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="11.0938%" y="741" width="0.0781%" height="15" fill="rgb(232,182,51)" fg:x="142" fg:w="1"/><text x="11.3438%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.08%)</title><rect x="11.0938%" y="725" width="0.0781%" height="15" fill="rgb(231,60,39)" fg:x="142" fg:w="1"/><text x="11.3438%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.08%)</title><rect x="11.0938%" y="709" width="0.0781%" height="15" fill="rgb(208,69,12)" fg:x="142" fg:w="1"/><text x="11.3438%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.0938%" y="693" width="0.0781%" height="15" fill="rgb(235,93,37)" fg:x="142" fg:w="1"/><text x="11.3438%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.08%)</title><rect x="11.0938%" y="677" width="0.0781%" height="15" fill="rgb(213,116,39)" fg:x="142" fg:w="1"/><text x="11.3438%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.08%)</title><rect x="11.0938%" y="661" width="0.0781%" height="15" fill="rgb(222,207,29)" fg:x="142" fg:w="1"/><text x="11.3438%" y="671.50"></text></g><g><title>__GI___libc_free (1 samples, 0.08%)</title><rect x="11.0938%" y="645" width="0.0781%" height="15" fill="rgb(206,96,30)" fg:x="142" fg:w="1"/><text x="11.3438%" y="655.50"></text></g><g><title>_int_free (1 samples, 0.08%)</title><rect x="11.0938%" y="629" width="0.0781%" height="15" fill="rgb(218,138,4)" fg:x="142" fg:w="1"/><text x="11.3438%" y="639.50"></text></g><g><title>__GI_madvise (1 samples, 0.08%)</title><rect x="11.0938%" y="613" width="0.0781%" height="15" fill="rgb(250,191,14)" fg:x="142" fg:w="1"/><text x="11.3438%" y="623.50"></text></g><g><title>__GI___libc_free (1 samples, 0.08%)</title><rect x="11.1719%" y="645" width="0.0781%" height="15" fill="rgb(239,60,40)" fg:x="143" fg:w="1"/><text x="11.4219%" y="655.50"></text></g><g><title>_int_free (1 samples, 0.08%)</title><rect x="11.1719%" y="629" width="0.0781%" height="15" fill="rgb(206,27,48)" fg:x="143" fg:w="1"/><text x="11.4219%" y="639.50"></text></g><g><title>__GI_munmap (1 samples, 0.08%)</title><rect x="11.1719%" y="613" width="0.0781%" height="15" fill="rgb(225,35,8)" fg:x="143" fg:w="1"/><text x="11.4219%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="11.1719%" y="661" width="0.1562%" height="15" fill="rgb(250,213,24)" fg:x="143" fg:w="2"/><text x="11.4219%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (1 samples, 0.08%)</title><rect x="11.2500%" y="645" width="0.0781%" height="15" fill="rgb(247,123,22)" fg:x="144" fg:w="1"/><text x="11.5000%" y="655.50"></text></g><g><title>&lt;sweepers::solver::MaxRemoveLocations as sweepers::solver::Rule&gt;::derive (3 samples, 0.23%)</title><rect x="11.3281%" y="645" width="0.2344%" height="15" fill="rgb(231,138,38)" fg:x="145" fg:w="3"/><text x="11.5781%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="11.3281%" y="629" width="0.2344%" height="15" fill="rgb(231,145,46)" fg:x="145" fg:w="3"/><text x="11.5781%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="11.3281%" y="613" width="0.2344%" height="15" fill="rgb(251,118,11)" fg:x="145" fg:w="3"/><text x="11.5781%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as sweepers::solver::Without&lt;T&gt;&gt;::without (3 samples, 0.23%)</title><rect x="11.3281%" y="597" width="0.2344%" height="15" fill="rgb(217,147,25)" fg:x="145" fg:w="3"/><text x="11.5781%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="11.3281%" y="581" width="0.2344%" height="15" fill="rgb(247,81,37)" fg:x="145" fg:w="3"/><text x="11.5781%" y="591.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.16%)</title><rect x="11.4062%" y="565" width="0.1562%" height="15" fill="rgb(209,12,38)" fg:x="146" fg:w="2"/><text x="11.6562%" y="575.50"></text></g><g><title>_int_malloc (1 samples, 0.08%)</title><rect x="11.4844%" y="549" width="0.0781%" height="15" fill="rgb(227,1,9)" fg:x="147" fg:w="1"/><text x="11.7344%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.70%)</title><rect x="18.9062%" y="581" width="0.7031%" height="15" fill="rgb(248,47,43)" fg:x="242" fg:w="9"/><text x="19.1562%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (2 samples, 0.16%)</title><rect x="19.4531%" y="565" width="0.1562%" height="15" fill="rgb(221,10,30)" fg:x="249" fg:w="2"/><text x="19.7031%" y="575.50"></text></g><g><title>__GI___libc_malloc (25 samples, 1.95%)</title><rect x="20.2344%" y="565" width="1.9531%" height="15" fill="rgb(210,229,1)" fg:x="259" fg:w="25"/><text x="20.4844%" y="575.50">_..</text></g><g><title>_int_malloc (22 samples, 1.72%)</title><rect x="20.4688%" y="549" width="1.7188%" height="15" fill="rgb(222,148,37)" fg:x="262" fg:w="22"/><text x="20.7188%" y="559.50"></text></g><g><title>sysmalloc (17 samples, 1.33%)</title><rect x="20.8594%" y="533" width="1.3281%" height="15" fill="rgb(234,67,33)" fg:x="267" fg:w="17"/><text x="21.1094%" y="543.50"></text></g><g><title>__GI___mprotect (6 samples, 0.47%)</title><rect x="21.7188%" y="517" width="0.4688%" height="15" fill="rgb(247,98,35)" fg:x="278" fg:w="6"/><text x="21.9688%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="22.1875%" y="565" width="0.0781%" height="15" fill="rgb(247,138,52)" fg:x="284" fg:w="1"/><text x="22.4375%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="22.1875%" y="549" width="0.0781%" height="15" fill="rgb(213,79,30)" fg:x="284" fg:w="1"/><text x="22.4375%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (5 samples, 0.39%)</title><rect x="22.2656%" y="565" width="0.3906%" height="15" fill="rgb(246,177,23)" fg:x="285" fg:w="5"/><text x="22.5156%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.31%)</title><rect x="22.3438%" y="549" width="0.3125%" height="15" fill="rgb(230,62,27)" fg:x="286" fg:w="4"/><text x="22.5938%" y="559.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (60 samples, 4.69%)</title><rect x="18.4375%" y="613" width="4.6875%" height="15" fill="rgb(216,154,8)" fg:x="236" fg:w="60"/><text x="18.6875%" y="623.50">&lt;&amp;all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56 samples, 4.38%)</title><rect x="18.7500%" y="597" width="4.3750%" height="15" fill="rgb(244,35,45)" fg:x="240" fg:w="56"/><text x="19.0000%" y="607.50">&lt;core..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (45 samples, 3.52%)</title><rect x="19.6094%" y="581" width="3.5156%" height="15" fill="rgb(251,115,12)" fg:x="251" fg:w="45"/><text x="19.8594%" y="591.50">all..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.47%)</title><rect x="22.6562%" y="565" width="0.4688%" height="15" fill="rgb(240,54,50)" fg:x="290" fg:w="6"/><text x="22.9062%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.09%)</title><rect x="23.9844%" y="597" width="1.0938%" height="15" fill="rgb(233,84,52)" fg:x="307" fg:w="14"/><text x="24.2344%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (29 samples, 2.27%)</title><rect x="23.1250%" y="613" width="2.2656%" height="15" fill="rgb(207,117,47)" fg:x="296" fg:w="29"/><text x="23.3750%" y="623.50">&lt;..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (4 samples, 0.31%)</title><rect x="25.0781%" y="597" width="0.3125%" height="15" fill="rgb(249,43,39)" fg:x="321" fg:w="4"/><text x="25.3281%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.08%)</title><rect x="25.3125%" y="581" width="0.0781%" height="15" fill="rgb(209,38,44)" fg:x="324" fg:w="1"/><text x="25.5625%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 7.11%)</title><rect x="25.3906%" y="613" width="7.1094%" height="15" fill="rgb(236,212,23)" fg:x="325" fg:w="91"/><text x="25.6406%" y="623.50">&lt;hashbrown..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (4 samples, 0.31%)</title><rect x="38.2031%" y="597" width="0.3125%" height="15" fill="rgb(242,79,21)" fg:x="489" fg:w="4"/><text x="38.4531%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (11 samples, 0.86%)</title><rect x="38.5156%" y="597" width="0.8594%" height="15" fill="rgb(211,96,35)" fg:x="493" fg:w="11"/><text x="38.7656%" y="607.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (94 samples, 7.34%)</title><rect x="32.5000%" y="613" width="7.3438%" height="15" fill="rgb(253,215,40)" fg:x="416" fg:w="94"/><text x="32.7500%" y="623.50">alloc::col..</text></g><g><title>alloc::collections::btree::navigate::full_range (6 samples, 0.47%)</title><rect x="39.3750%" y="597" width="0.4688%" height="15" fill="rgb(211,81,21)" fg:x="504" fg:w="6"/><text x="39.6250%" y="607.50"></text></g><g><title>&lt;sweepers::solver::MaxWithinMinCombinator as sweepers::solver::Rule&gt;::derive (368 samples, 28.75%)</title><rect x="11.5625%" y="645" width="28.7500%" height="15" fill="rgb(208,190,38)" fg:x="148" fg:w="368"/><text x="11.8125%" y="655.50">&lt;sweepers::solver::MaxWithinMinCombinator as s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (368 samples, 28.75%)</title><rect x="11.5625%" y="629" width="28.7500%" height="15" fill="rgb(235,213,38)" fg:x="148" fg:w="368"/><text x="11.8125%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_i..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.47%)</title><rect x="39.8438%" y="613" width="0.4688%" height="15" fill="rgb(237,122,38)" fg:x="510" fg:w="6"/><text x="40.0938%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="39.8438%" y="597" width="0.4688%" height="15" fill="rgb(244,218,35)" fg:x="510" fg:w="6"/><text x="40.0938%" y="607.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.47%)</title><rect x="39.8438%" y="581" width="0.4688%" height="15" fill="rgb(240,68,47)" fg:x="510" fg:w="6"/><text x="40.0938%" y="591.50"></text></g><g><title>_int_realloc (6 samples, 0.47%)</title><rect x="39.8438%" y="565" width="0.4688%" height="15" fill="rgb(210,16,53)" fg:x="510" fg:w="6"/><text x="40.0938%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.47%)</title><rect x="39.8438%" y="549" width="0.4688%" height="15" fill="rgb(235,124,12)" fg:x="510" fg:w="6"/><text x="40.0938%" y="559.50"></text></g><g><title>&lt;sweepers::solver::MaxZeroToExact as sweepers::solver::Rule&gt;::derive (1 samples, 0.08%)</title><rect x="40.3125%" y="645" width="0.0781%" height="15" fill="rgb(224,169,11)" fg:x="516" fg:w="1"/><text x="40.5625%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="40.3125%" y="629" width="0.0781%" height="15" fill="rgb(250,166,2)" fg:x="516" fg:w="1"/><text x="40.5625%" y="639.50"></text></g><g><title>&lt;sweepers::solver::MinAllToExact as sweepers::solver::Rule&gt;::derive (1 samples, 0.08%)</title><rect x="40.3906%" y="645" width="0.0781%" height="15" fill="rgb(242,216,29)" fg:x="517" fg:w="1"/><text x="40.6406%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="40.3906%" y="629" width="0.0781%" height="15" fill="rgb(230,116,27)" fg:x="517" fg:w="1"/><text x="40.6406%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.09%)</title><rect x="49.8438%" y="581" width="1.0938%" height="15" fill="rgb(228,99,48)" fg:x="638" fg:w="14"/><text x="50.0938%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (5 samples, 0.39%)</title><rect x="50.5469%" y="565" width="0.3906%" height="15" fill="rgb(253,11,6)" fg:x="647" fg:w="5"/><text x="50.7969%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.23%)</title><rect x="50.9375%" y="581" width="0.2344%" height="15" fill="rgb(247,143,39)" fg:x="652" fg:w="3"/><text x="51.1875%" y="591.50"></text></g><g><title>__GI___libc_malloc (52 samples, 4.06%)</title><rect x="51.5625%" y="565" width="4.0625%" height="15" fill="rgb(236,97,10)" fg:x="660" fg:w="52"/><text x="51.8125%" y="575.50">__GI..</text></g><g><title>_int_malloc (47 samples, 3.67%)</title><rect x="51.9531%" y="549" width="3.6719%" height="15" fill="rgb(233,208,19)" fg:x="665" fg:w="47"/><text x="52.2031%" y="559.50">_int..</text></g><g><title>sysmalloc (43 samples, 3.36%)</title><rect x="52.2656%" y="533" width="3.3594%" height="15" fill="rgb(216,164,2)" fg:x="669" fg:w="43"/><text x="52.5156%" y="543.50">sys..</text></g><g><title>__GI___mprotect (15 samples, 1.17%)</title><rect x="54.4531%" y="517" width="1.1719%" height="15" fill="rgb(220,129,5)" fg:x="697" fg:w="15"/><text x="54.7031%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (11 samples, 0.86%)</title><rect x="55.6250%" y="565" width="0.8594%" height="15" fill="rgb(242,17,10)" fg:x="712" fg:w="11"/><text x="55.8750%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 0.55%)</title><rect x="55.9375%" y="549" width="0.5469%" height="15" fill="rgb(242,107,0)" fg:x="716" fg:w="7"/><text x="56.1875%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (88 samples, 6.88%)</title><rect x="49.8438%" y="597" width="6.8750%" height="15" fill="rgb(251,28,31)" fg:x="638" fg:w="88"/><text x="50.0938%" y="607.50">&lt;core::it..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (71 samples, 5.55%)</title><rect x="51.1719%" y="581" width="5.5469%" height="15" fill="rgb(233,223,10)" fg:x="655" fg:w="71"/><text x="51.4219%" y="591.50">alloc::..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.23%)</title><rect x="56.4844%" y="565" width="0.2344%" height="15" fill="rgb(215,21,27)" fg:x="723" fg:w="3"/><text x="56.7344%" y="575.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (96 samples, 7.50%)</title><rect x="49.2969%" y="613" width="7.5000%" height="15" fill="rgb(232,23,21)" fg:x="631" fg:w="96"/><text x="49.5469%" y="623.50">&lt;&amp;alloc::c..</text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.08%)</title><rect x="56.7188%" y="597" width="0.0781%" height="15" fill="rgb(244,5,23)" fg:x="726" fg:w="1"/><text x="56.9688%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="57.1094%" y="597" width="0.3125%" height="15" fill="rgb(226,81,46)" fg:x="731" fg:w="4"/><text x="57.3594%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (2 samples, 0.16%)</title><rect x="57.7344%" y="581" width="0.1562%" height="15" fill="rgb(247,70,30)" fg:x="739" fg:w="2"/><text x="57.9844%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.08%)</title><rect x="57.8906%" y="581" width="0.0781%" height="15" fill="rgb(212,68,19)" fg:x="741" fg:w="1"/><text x="58.1406%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 1.25%)</title><rect x="56.7969%" y="613" width="1.2500%" height="15" fill="rgb(240,187,13)" fg:x="727" fg:w="16"/><text x="57.0469%" y="623.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (8 samples, 0.62%)</title><rect x="57.4219%" y="597" width="0.6250%" height="15" fill="rgb(223,113,26)" fg:x="735" fg:w="8"/><text x="57.6719%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.08%)</title><rect x="57.9688%" y="581" width="0.0781%" height="15" fill="rgb(206,192,2)" fg:x="742" fg:w="1"/><text x="58.2188%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 7.19%)</title><rect x="58.0469%" y="613" width="7.1875%" height="15" fill="rgb(241,108,4)" fg:x="743" fg:w="92"/><text x="58.2969%" y="623.50">&lt;hashbrown..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (7 samples, 0.55%)</title><rect x="78.9844%" y="597" width="0.5469%" height="15" fill="rgb(247,173,49)" fg:x="1011" fg:w="7"/><text x="79.2344%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (34 samples, 2.66%)</title><rect x="79.5312%" y="597" width="2.6562%" height="15" fill="rgb(224,114,35)" fg:x="1018" fg:w="34"/><text x="79.7812%" y="607.50">al..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (229 samples, 17.89%)</title><rect x="65.2344%" y="613" width="17.8906%" height="15" fill="rgb(245,159,27)" fg:x="835" fg:w="229"/><text x="65.4844%" y="623.50">alloc::collections::btree::s..</text></g><g><title>alloc::collections::btree::navigate::full_range (12 samples, 0.94%)</title><rect x="82.1875%" y="597" width="0.9375%" height="15" fill="rgb(245,172,44)" fg:x="1052" fg:w="12"/><text x="82.4375%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.39%)</title><rect x="83.1250%" y="549" width="0.3906%" height="15" fill="rgb(236,23,11)" fg:x="1064" fg:w="5"/><text x="83.3750%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (926 samples, 72.34%)</title><rect x="11.3281%" y="661" width="72.3438%" height="15" fill="rgb(205,117,38)" fg:x="145" fg:w="926"/><text x="11.5781%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;sweepers::solver::MinWithinMaxCombinator as sweepers::solver::Rule&gt;::derive (553 samples, 43.20%)</title><rect x="40.4688%" y="645" width="43.2031%" height="15" fill="rgb(237,72,25)" fg:x="518" fg:w="553"/><text x="40.7188%" y="655.50">&lt;sweepers::solver::MinWithinMaxCombinator as sweepers::solver::Rule&gt;::d..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (553 samples, 43.20%)</title><rect x="40.4688%" y="629" width="43.2031%" height="15" fill="rgb(244,70,9)" fg:x="518" fg:w="553"/><text x="40.7188%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.55%)</title><rect x="83.1250%" y="613" width="0.5469%" height="15" fill="rgb(217,125,39)" fg:x="1064" fg:w="7"/><text x="83.3750%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.55%)</title><rect x="83.1250%" y="597" width="0.5469%" height="15" fill="rgb(235,36,10)" fg:x="1064" fg:w="7"/><text x="83.3750%" y="607.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.55%)</title><rect x="83.1250%" y="581" width="0.5469%" height="15" fill="rgb(251,123,47)" fg:x="1064" fg:w="7"/><text x="83.3750%" y="591.50"></text></g><g><title>_int_realloc (7 samples, 0.55%)</title><rect x="83.1250%" y="565" width="0.5469%" height="15" fill="rgb(221,13,13)" fg:x="1064" fg:w="7"/><text x="83.3750%" y="575.50"></text></g><g><title>_int_malloc (2 samples, 0.16%)</title><rect x="83.5156%" y="549" width="0.1562%" height="15" fill="rgb(238,131,9)" fg:x="1069" fg:w="2"/><text x="83.7656%" y="559.50"></text></g><g><title>sysmalloc (1 samples, 0.08%)</title><rect x="83.5938%" y="533" width="0.0781%" height="15" fill="rgb(211,50,8)" fg:x="1070" fg:w="1"/><text x="83.8438%" y="543.50"></text></g><g><title>__GI___libc_free (2 samples, 0.16%)</title><rect x="83.9062%" y="629" width="0.1562%" height="15" fill="rgb(245,182,24)" fg:x="1074" fg:w="2"/><text x="84.1562%" y="639.50"></text></g><g><title>__GI_munmap (2 samples, 0.16%)</title><rect x="83.9062%" y="613" width="0.1562%" height="15" fill="rgb(242,14,37)" fg:x="1074" fg:w="2"/><text x="84.1562%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.08%)</title><rect x="84.0625%" y="629" width="0.0781%" height="15" fill="rgb(246,228,12)" fg:x="1076" fg:w="1"/><text x="84.3125%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (40 samples, 3.12%)</title><rect x="85.0781%" y="613" width="3.1250%" height="15" fill="rgb(213,55,15)" fg:x="1089" fg:w="40"/><text x="85.3281%" y="623.50">&lt;al..</text></g><g><title>alloc::collections::btree::navigate::full_range (13 samples, 1.02%)</title><rect x="87.1875%" y="597" width="1.0156%" height="15" fill="rgb(209,9,3)" fg:x="1116" fg:w="13"/><text x="87.4375%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.08%)</title><rect x="89.4531%" y="597" width="0.0781%" height="15" fill="rgb(230,59,30)" fg:x="1145" fg:w="1"/><text x="89.7031%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (49 samples, 3.83%)</title><rect x="88.2031%" y="613" width="3.8281%" height="15" fill="rgb(209,121,21)" fg:x="1129" fg:w="49"/><text x="88.4531%" y="623.50">&lt;all..</text></g><g><title>core::hash::Hasher::write_usize (32 samples, 2.50%)</title><rect x="89.5312%" y="597" width="2.5000%" height="15" fill="rgb(220,109,13)" fg:x="1146" fg:w="32"/><text x="89.7812%" y="607.50">co..</text></g><g><title>__GI___libc_free (20 samples, 1.56%)</title><rect x="92.3438%" y="597" width="1.5625%" height="15" fill="rgb(232,18,1)" fg:x="1182" fg:w="20"/><text x="92.5938%" y="607.50"></text></g><g><title>_int_free (19 samples, 1.48%)</title><rect x="92.4219%" y="581" width="1.4844%" height="15" fill="rgb(215,41,42)" fg:x="1183" fg:w="19"/><text x="92.6719%" y="591.50"></text></g><g><title>__rust_dealloc (2 samples, 0.16%)</title><rect x="93.9062%" y="597" width="0.1562%" height="15" fill="rgb(224,123,36)" fg:x="1202" fg:w="2"/><text x="94.1562%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 2.27%)</title><rect x="92.0312%" y="613" width="2.2656%" height="15" fill="rgb(240,125,3)" fg:x="1178" fg:w="29"/><text x="92.2812%" y="623.50">&lt;..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (3 samples, 0.23%)</title><rect x="94.0625%" y="597" width="0.2344%" height="15" fill="rgb(205,98,50)" fg:x="1204" fg:w="3"/><text x="94.3125%" y="607.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.47%)</title><rect x="94.2969%" y="613" width="0.4688%" height="15" fill="rgb(205,185,37)" fg:x="1207" fg:w="6"/><text x="94.5469%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (143 samples, 11.17%)</title><rect x="83.6719%" y="661" width="11.1719%" height="15" fill="rgb(238,207,15)" fg:x="1071" fg:w="143"/><text x="83.9219%" y="671.50">&lt;hashbrown::map:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (143 samples, 11.17%)</title><rect x="83.6719%" y="645" width="11.1719%" height="15" fill="rgb(213,199,42)" fg:x="1071" fg:w="143"/><text x="83.9219%" y="655.50">&lt;core::iter::ada..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (137 samples, 10.70%)</title><rect x="84.1406%" y="629" width="10.7031%" height="15" fill="rgb(235,201,11)" fg:x="1077" fg:w="137"/><text x="84.3906%" y="639.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="94.7656%" y="613" width="0.0781%" height="15" fill="rgb(207,46,11)" fg:x="1213" fg:w="1"/><text x="95.0156%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="94.8438%" y="357" width="0.0781%" height="15" fill="rgb(241,35,35)" fg:x="1214" fg:w="1"/><text x="95.0938%" y="367.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="94.8438%" y="341" width="0.0781%" height="15" fill="rgb(243,32,47)" fg:x="1214" fg:w="1"/><text x="95.0938%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="94.8438%" y="325" width="0.0781%" height="15" fill="rgb(247,202,23)" fg:x="1214" fg:w="1"/><text x="95.0938%" y="335.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="94.8438%" y="309" width="0.0781%" height="15" fill="rgb(219,102,11)" fg:x="1214" fg:w="1"/><text x="95.0938%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.08%)</title><rect x="94.8438%" y="293" width="0.0781%" height="15" fill="rgb(243,110,44)" fg:x="1214" fg:w="1"/><text x="95.0938%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.08%)</title><rect x="94.8438%" y="277" width="0.0781%" height="15" fill="rgb(222,74,54)" fg:x="1214" fg:w="1"/><text x="95.0938%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="94.8438%" y="261" width="0.0781%" height="15" fill="rgb(216,99,12)" fg:x="1214" fg:w="1"/><text x="95.0938%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.08%)</title><rect x="94.8438%" y="245" width="0.0781%" height="15" fill="rgb(226,22,26)" fg:x="1214" fg:w="1"/><text x="95.0938%" y="255.50"></text></g><g><title>core::slice::memchr::memchr::{{closure}} (1 samples, 0.08%)</title><rect x="94.8438%" y="229" width="0.0781%" height="15" fill="rgb(217,163,10)" fg:x="1214" fg:w="1"/><text x="95.0938%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="95.2344%" y="165" width="0.0781%" height="15" fill="rgb(213,25,53)" fg:x="1219" fg:w="1"/><text x="95.4844%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="95.2344%" y="149" width="0.0781%" height="15" fill="rgb(252,105,26)" fg:x="1219" fg:w="1"/><text x="95.4844%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.08%)</title><rect x="95.2344%" y="133" width="0.0781%" height="15" fill="rgb(220,39,43)" fg:x="1219" fg:w="1"/><text x="95.4844%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.08%)</title><rect x="95.2344%" y="117" width="0.0781%" height="15" fill="rgb(229,68,48)" fg:x="1219" fg:w="1"/><text x="95.4844%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="95.2344%" y="245" width="0.1562%" height="15" fill="rgb(252,8,32)" fg:x="1219" fg:w="2"/><text x="95.4844%" y="255.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.16%)</title><rect x="95.2344%" y="229" width="0.1562%" height="15" fill="rgb(223,20,43)" fg:x="1219" fg:w="2"/><text x="95.4844%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="95.2344%" y="213" width="0.1562%" height="15" fill="rgb(229,81,49)" fg:x="1219" fg:w="2"/><text x="95.4844%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="95.2344%" y="197" width="0.1562%" height="15" fill="rgb(236,28,36)" fg:x="1219" fg:w="2"/><text x="95.4844%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="95.2344%" y="181" width="0.1562%" height="15" fill="rgb(249,185,26)" fg:x="1219" fg:w="2"/><text x="95.4844%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="95.3125%" y="165" width="0.0781%" height="15" fill="rgb(249,174,33)" fg:x="1220" fg:w="1"/><text x="95.5625%" y="175.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (6 samples, 0.47%)</title><rect x="95.0781%" y="261" width="0.4688%" height="15" fill="rgb(233,201,37)" fg:x="1217" fg:w="6"/><text x="95.3281%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (2 samples, 0.16%)</title><rect x="95.3906%" y="245" width="0.1562%" height="15" fill="rgb(221,78,26)" fg:x="1221" fg:w="2"/><text x="95.6406%" y="255.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (2 samples, 0.16%)</title><rect x="95.3906%" y="229" width="0.1562%" height="15" fill="rgb(250,127,30)" fg:x="1221" fg:w="2"/><text x="95.6406%" y="239.50"></text></g><g><title>core::slice::memchr::memchr (2 samples, 0.16%)</title><rect x="95.3906%" y="213" width="0.1562%" height="15" fill="rgb(230,49,44)" fg:x="1221" fg:w="2"/><text x="95.6406%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2 samples, 0.16%)</title><rect x="95.3906%" y="197" width="0.1562%" height="15" fill="rgb(229,67,23)" fg:x="1221" fg:w="2"/><text x="95.6406%" y="207.50"></text></g><g><title>core::slice::memchr::memchr::{{closure}} (1 samples, 0.08%)</title><rect x="95.4688%" y="181" width="0.0781%" height="15" fill="rgb(249,83,47)" fg:x="1222" fg:w="1"/><text x="95.7188%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (3 samples, 0.23%)</title><rect x="95.5469%" y="261" width="0.2344%" height="15" fill="rgb(215,43,3)" fg:x="1223" fg:w="3"/><text x="95.7969%" y="271.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3 samples, 0.23%)</title><rect x="95.5469%" y="245" width="0.2344%" height="15" fill="rgb(238,154,13)" fg:x="1223" fg:w="3"/><text x="95.7969%" y="255.50"></text></g><g><title>core::slice::memchr::memchr (2 samples, 0.16%)</title><rect x="95.6250%" y="229" width="0.1562%" height="15" fill="rgb(219,56,2)" fg:x="1224" fg:w="2"/><text x="95.8750%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2 samples, 0.16%)</title><rect x="95.6250%" y="213" width="0.1562%" height="15" fill="rgb(233,0,4)" fg:x="1224" fg:w="2"/><text x="95.8750%" y="223.50"></text></g><g><title>core::slice::memchr::memchr::{{closure}} (1 samples, 0.08%)</title><rect x="95.7031%" y="197" width="0.0781%" height="15" fill="rgb(235,30,7)" fg:x="1225" fg:w="1"/><text x="95.9531%" y="207.50"></text></g><g><title>core::fmt::Formatter::write_str (12 samples, 0.94%)</title><rect x="94.9219%" y="309" width="0.9375%" height="15" fill="rgb(250,79,13)" fg:x="1215" fg:w="12"/><text x="95.1719%" y="319.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (12 samples, 0.94%)</title><rect x="94.9219%" y="293" width="0.9375%" height="15" fill="rgb(211,146,34)" fg:x="1215" fg:w="12"/><text x="95.1719%" y="303.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (11 samples, 0.86%)</title><rect x="95.0000%" y="277" width="0.8594%" height="15" fill="rgb(228,22,38)" fg:x="1216" fg:w="11"/><text x="95.2500%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.08%)</title><rect x="95.7812%" y="261" width="0.0781%" height="15" fill="rgb(235,168,5)" fg:x="1226" fg:w="1"/><text x="96.0312%" y="271.50"></text></g><g><title>core::fmt::builders::PadAdapter::wrap (1 samples, 0.08%)</title><rect x="95.8594%" y="309" width="0.0781%" height="15" fill="rgb(221,155,16)" fg:x="1227" fg:w="1"/><text x="96.1094%" y="319.50"></text></g><g><title>core::fmt::Formatter::wrap_buf (1 samples, 0.08%)</title><rect x="95.8594%" y="293" width="0.0781%" height="15" fill="rgb(215,215,53)" fg:x="1227" fg:w="1"/><text x="96.1094%" y="303.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="95.9375%" y="309" width="0.0781%" height="15" fill="rgb(223,4,10)" fg:x="1228" fg:w="1"/><text x="96.1875%" y="319.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="95.9375%" y="293" width="0.0781%" height="15" fill="rgb(234,103,6)" fg:x="1228" fg:w="1"/><text x="96.1875%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="95.9375%" y="277" width="0.0781%" height="15" fill="rgb(227,97,0)" fg:x="1228" fg:w="1"/><text x="96.1875%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="95.9375%" y="261" width="0.0781%" height="15" fill="rgb(234,150,53)" fg:x="1228" fg:w="1"/><text x="96.1875%" y="271.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="96.0156%" y="293" width="0.0781%" height="15" fill="rgb(228,201,54)" fg:x="1229" fg:w="1"/><text x="96.2656%" y="303.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="96.0156%" y="277" width="0.0781%" height="15" fill="rgb(222,22,37)" fg:x="1229" fg:w="1"/><text x="96.2656%" y="287.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="96.0156%" y="261" width="0.0781%" height="15" fill="rgb(237,53,32)" fg:x="1229" fg:w="1"/><text x="96.2656%" y="271.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.0156%" y="245" width="0.0781%" height="15" fill="rgb(233,25,53)" fg:x="1229" fg:w="1"/><text x="96.2656%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (1 samples, 0.08%)</title><rect x="96.1719%" y="213" width="0.0781%" height="15" fill="rgb(210,40,34)" fg:x="1231" fg:w="1"/><text x="96.4219%" y="223.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (1 samples, 0.08%)</title><rect x="96.1719%" y="197" width="0.0781%" height="15" fill="rgb(241,220,44)" fg:x="1231" fg:w="1"/><text x="96.4219%" y="207.50"></text></g><g><title>core::unicode::unicode_data::skip_search (1 samples, 0.08%)</title><rect x="96.1719%" y="181" width="0.0781%" height="15" fill="rgb(235,28,35)" fg:x="1231" fg:w="1"/><text x="96.4219%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (1 samples, 0.08%)</title><rect x="96.1719%" y="165" width="0.0781%" height="15" fill="rgb(210,56,17)" fg:x="1231" fg:w="1"/><text x="96.4219%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (1 samples, 0.08%)</title><rect x="96.1719%" y="149" width="0.0781%" height="15" fill="rgb(224,130,29)" fg:x="1231" fg:w="1"/><text x="96.4219%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (1 samples, 0.08%)</title><rect x="96.1719%" y="133" width="0.0781%" height="15" fill="rgb(235,212,8)" fg:x="1231" fg:w="1"/><text x="96.4219%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (1 samples, 0.08%)</title><rect x="96.1719%" y="117" width="0.0781%" height="15" fill="rgb(223,33,50)" fg:x="1231" fg:w="1"/><text x="96.4219%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.2500%" y="165" width="0.0781%" height="15" fill="rgb(219,149,13)" fg:x="1232" fg:w="1"/><text x="96.5000%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="96.2500%" y="181" width="0.1562%" height="15" fill="rgb(250,156,29)" fg:x="1232" fg:w="2"/><text x="96.5000%" y="191.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (1 samples, 0.08%)</title><rect x="96.3281%" y="165" width="0.0781%" height="15" fill="rgb(216,193,19)" fg:x="1233" fg:w="1"/><text x="96.5781%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.08%)</title><rect x="96.3281%" y="149" width="0.0781%" height="15" fill="rgb(216,135,14)" fg:x="1233" fg:w="1"/><text x="96.5781%" y="159.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (4 samples, 0.31%)</title><rect x="96.1719%" y="229" width="0.3125%" height="15" fill="rgb(241,47,5)" fg:x="1231" fg:w="4"/><text x="96.4219%" y="239.50"></text></g><g><title>core::unicode::printable::is_printable (3 samples, 0.23%)</title><rect x="96.2500%" y="213" width="0.2344%" height="15" fill="rgb(233,42,35)" fg:x="1232" fg:w="3"/><text x="96.5000%" y="223.50"></text></g><g><title>core::unicode::printable::check (3 samples, 0.23%)</title><rect x="96.2500%" y="197" width="0.2344%" height="15" fill="rgb(231,13,6)" fg:x="1232" fg:w="3"/><text x="96.5000%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.08%)</title><rect x="96.4062%" y="181" width="0.0781%" height="15" fill="rgb(207,181,40)" fg:x="1234" fg:w="1"/><text x="96.6562%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.08%)</title><rect x="96.4062%" y="165" width="0.0781%" height="15" fill="rgb(254,173,49)" fg:x="1234" fg:w="1"/><text x="96.6562%" y="175.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.4844%" y="197" width="0.0781%" height="15" fill="rgb(221,1,38)" fg:x="1235" fg:w="1"/><text x="96.7344%" y="207.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.4844%" y="181" width="0.0781%" height="15" fill="rgb(206,124,46)" fg:x="1235" fg:w="1"/><text x="96.7344%" y="191.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.4844%" y="165" width="0.0781%" height="15" fill="rgb(249,21,11)" fg:x="1235" fg:w="1"/><text x="96.7344%" y="175.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (7 samples, 0.55%)</title><rect x="96.0938%" y="245" width="0.5469%" height="15" fill="rgb(222,201,40)" fg:x="1230" fg:w="7"/><text x="96.3438%" y="255.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.16%)</title><rect x="96.4844%" y="229" width="0.1562%" height="15" fill="rgb(235,61,29)" fg:x="1235" fg:w="2"/><text x="96.7344%" y="239.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="96.4844%" y="213" width="0.1562%" height="15" fill="rgb(219,207,3)" fg:x="1235" fg:w="2"/><text x="96.7344%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.08%)</title><rect x="96.5625%" y="197" width="0.0781%" height="15" fill="rgb(222,56,46)" fg:x="1236" fg:w="1"/><text x="96.8125%" y="207.50"></text></g><g><title>sweepers::solver::_DERIVE_core_fmt_Debug_FOR_FactDebug::&lt;impl core::fmt::Debug for sweepers::solver::FactDebug&gt;::fmt (9 samples, 0.70%)</title><rect x="96.0156%" y="309" width="0.7031%" height="15" fill="rgb(239,76,54)" fg:x="1229" fg:w="9"/><text x="96.2656%" y="319.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (8 samples, 0.62%)</title><rect x="96.0938%" y="293" width="0.6250%" height="15" fill="rgb(231,124,27)" fg:x="1230" fg:w="8"/><text x="96.3438%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (8 samples, 0.62%)</title><rect x="96.0938%" y="277" width="0.6250%" height="15" fill="rgb(249,195,6)" fg:x="1230" fg:w="8"/><text x="96.3438%" y="287.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (8 samples, 0.62%)</title><rect x="96.0938%" y="261" width="0.6250%" height="15" fill="rgb(237,174,47)" fg:x="1230" fg:w="8"/><text x="96.3438%" y="271.50"></text></g><g><title>core::fmt::Write::write_char (1 samples, 0.08%)</title><rect x="96.6406%" y="245" width="0.0781%" height="15" fill="rgb(206,201,31)" fg:x="1237" fg:w="1"/><text x="96.8906%" y="255.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.6406%" y="229" width="0.0781%" height="15" fill="rgb(231,57,52)" fg:x="1237" fg:w="1"/><text x="96.8906%" y="239.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.6406%" y="213" width="0.0781%" height="15" fill="rgb(248,177,22)" fg:x="1237" fg:w="1"/><text x="96.8906%" y="223.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.6406%" y="197" width="0.0781%" height="15" fill="rgb(215,211,37)" fg:x="1237" fg:w="1"/><text x="96.8906%" y="207.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.6406%" y="181" width="0.0781%" height="15" fill="rgb(241,128,51)" fg:x="1237" fg:w="1"/><text x="96.8906%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.08%)</title><rect x="96.6406%" y="165" width="0.0781%" height="15" fill="rgb(227,165,31)" fg:x="1237" fg:w="1"/><text x="96.8906%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.08%)</title><rect x="96.6406%" y="149" width="0.0781%" height="15" fill="rgb(228,167,24)" fg:x="1237" fg:w="1"/><text x="96.8906%" y="159.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="96.6406%" y="133" width="0.0781%" height="15" fill="rgb(228,143,12)" fg:x="1237" fg:w="1"/><text x="96.8906%" y="143.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.6406%" y="117" width="0.0781%" height="15" fill="rgb(249,149,8)" fg:x="1237" fg:w="1"/><text x="96.8906%" y="127.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.08%)</title><rect x="96.7188%" y="293" width="0.0781%" height="15" fill="rgb(243,35,44)" fg:x="1238" fg:w="1"/><text x="96.9688%" y="303.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.8750%" y="213" width="0.0781%" height="15" fill="rgb(246,89,9)" fg:x="1240" fg:w="1"/><text x="97.1250%" y="223.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.8750%" y="197" width="0.0781%" height="15" fill="rgb(233,213,13)" fg:x="1240" fg:w="1"/><text x="97.1250%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.08%)</title><rect x="96.8750%" y="181" width="0.0781%" height="15" fill="rgb(233,141,41)" fg:x="1240" fg:w="1"/><text x="97.1250%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.08%)</title><rect x="96.8750%" y="165" width="0.0781%" height="15" fill="rgb(239,167,4)" fg:x="1240" fg:w="1"/><text x="97.1250%" y="175.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="96.8750%" y="149" width="0.0781%" height="15" fill="rgb(209,217,16)" fg:x="1240" fg:w="1"/><text x="97.1250%" y="159.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.8750%" y="133" width="0.0781%" height="15" fill="rgb(219,88,35)" fg:x="1240" fg:w="1"/><text x="97.1250%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.1094%" y="165" width="0.0781%" height="15" fill="rgb(220,193,23)" fg:x="1243" fg:w="1"/><text x="97.3594%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.08%)</title><rect x="97.1094%" y="149" width="0.0781%" height="15" fill="rgb(230,90,52)" fg:x="1243" fg:w="1"/><text x="97.3594%" y="159.50"></text></g><g><title>&lt;u64 as core::fmt::num::DisplayInt&gt;::to_u64 (1 samples, 0.08%)</title><rect x="97.1875%" y="149" width="0.0781%" height="15" fill="rgb(252,106,19)" fg:x="1244" fg:w="1"/><text x="97.4375%" y="159.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.2656%" y="117" width="0.0781%" height="15" fill="rgb(206,74,20)" fg:x="1245" fg:w="1"/><text x="97.5156%" y="127.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.08%)</title><rect x="97.2656%" y="101" width="0.0781%" height="15" fill="rgb(230,138,44)" fg:x="1245" fg:w="1"/><text x="97.5156%" y="111.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.08%)</title><rect x="97.2656%" y="85" width="0.0781%" height="15" fill="rgb(235,182,43)" fg:x="1245" fg:w="1"/><text x="97.5156%" y="95.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="97.2656%" y="69" width="0.0781%" height="15" fill="rgb(242,16,51)" fg:x="1245" fg:w="1"/><text x="97.5156%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.08%)</title><rect x="97.2656%" y="53" width="0.0781%" height="15" fill="rgb(248,9,4)" fg:x="1245" fg:w="1"/><text x="97.5156%" y="63.50"></text></g><g><title>core::slice::memchr::memchr::{{closure}} (1 samples, 0.08%)</title><rect x="97.2656%" y="37" width="0.0781%" height="15" fill="rgb(210,31,22)" fg:x="1245" fg:w="1"/><text x="97.5156%" y="47.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="97.2656%" y="133" width="0.1562%" height="15" fill="rgb(239,54,39)" fg:x="1245" fg:w="2"/><text x="97.5156%" y="143.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.08%)</title><rect x="97.3438%" y="117" width="0.0781%" height="15" fill="rgb(230,99,41)" fg:x="1246" fg:w="1"/><text x="97.5938%" y="127.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (1 samples, 0.08%)</title><rect x="97.3438%" y="101" width="0.0781%" height="15" fill="rgb(253,106,12)" fg:x="1246" fg:w="1"/><text x="97.5938%" y="111.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (1 samples, 0.08%)</title><rect x="97.3438%" y="85" width="0.0781%" height="15" fill="rgb(213,46,41)" fg:x="1246" fg:w="1"/><text x="97.5938%" y="95.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (33 samples, 2.58%)</title><rect x="94.9219%" y="357" width="2.5781%" height="15" fill="rgb(215,133,35)" fg:x="1215" fg:w="33"/><text x="95.1719%" y="367.50">co..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (33 samples, 2.58%)</title><rect x="94.9219%" y="341" width="2.5781%" height="15" fill="rgb(213,28,5)" fg:x="1215" fg:w="33"/><text x="95.1719%" y="351.50">co..</text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (33 samples, 2.58%)</title><rect x="94.9219%" y="325" width="2.5781%" height="15" fill="rgb(215,77,49)" fg:x="1215" fg:w="33"/><text x="95.1719%" y="335.50">co..</text></g><g><title>sweepers::solver::set_fmt (10 samples, 0.78%)</title><rect x="96.7188%" y="309" width="0.7812%" height="15" fill="rgb(248,100,22)" fg:x="1238" fg:w="10"/><text x="96.9688%" y="319.50"></text></g><g><title>core::fmt::Formatter::write_fmt (9 samples, 0.70%)</title><rect x="96.7969%" y="293" width="0.7031%" height="15" fill="rgb(208,67,9)" fg:x="1239" fg:w="9"/><text x="97.0469%" y="303.50"></text></g><g><title>core::fmt::write (9 samples, 0.70%)</title><rect x="96.7969%" y="277" width="0.7031%" height="15" fill="rgb(219,133,21)" fg:x="1239" fg:w="9"/><text x="97.0469%" y="287.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (9 samples, 0.70%)</title><rect x="96.7969%" y="261" width="0.7031%" height="15" fill="rgb(246,46,29)" fg:x="1239" fg:w="9"/><text x="97.0469%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (9 samples, 0.70%)</title><rect x="96.7969%" y="245" width="0.7031%" height="15" fill="rgb(246,185,52)" fg:x="1239" fg:w="9"/><text x="97.0469%" y="255.50"></text></g><g><title>core::fmt::write (8 samples, 0.62%)</title><rect x="96.8750%" y="229" width="0.6250%" height="15" fill="rgb(252,136,11)" fg:x="1240" fg:w="8"/><text x="97.1250%" y="239.50"></text></g><g><title>&lt;sweepers::core::location::Bounded as core::fmt::Display&gt;::fmt (7 samples, 0.55%)</title><rect x="96.9531%" y="213" width="0.5469%" height="15" fill="rgb(219,138,53)" fg:x="1241" fg:w="7"/><text x="97.2031%" y="223.50"></text></g><g><title>core::fmt::Formatter::write_fmt (6 samples, 0.47%)</title><rect x="97.0312%" y="197" width="0.4688%" height="15" fill="rgb(211,51,23)" fg:x="1242" fg:w="6"/><text x="97.2812%" y="207.50"></text></g><g><title>core::fmt::write (6 samples, 0.47%)</title><rect x="97.0312%" y="181" width="0.4688%" height="15" fill="rgb(247,221,28)" fg:x="1242" fg:w="6"/><text x="97.2812%" y="191.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (4 samples, 0.31%)</title><rect x="97.1875%" y="165" width="0.3125%" height="15" fill="rgb(251,222,45)" fg:x="1244" fg:w="4"/><text x="97.4375%" y="175.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (3 samples, 0.23%)</title><rect x="97.2656%" y="149" width="0.2344%" height="15" fill="rgb(217,162,53)" fg:x="1245" fg:w="3"/><text x="97.5156%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="97.4219%" y="133" width="0.0781%" height="15" fill="rgb(229,93,14)" fg:x="1247" fg:w="1"/><text x="97.6719%" y="143.50"></text></g><g><title>__GI___clone (1,107 samples, 86.48%)</title><rect x="11.0938%" y="1061" width="86.4844%" height="15" fill="rgb(209,67,49)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="1071.50">__GI___clone</text></g><g><title>start_thread (1,107 samples, 86.48%)</title><rect x="11.0938%" y="1045" width="86.4844%" height="15" fill="rgb(213,87,29)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="1055.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,107 samples, 86.48%)</title><rect x="11.0938%" y="1029" width="86.4844%" height="15" fill="rgb(205,151,52)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="1039.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,107 samples, 86.48%)</title><rect x="11.0938%" y="1013" width="86.4844%" height="15" fill="rgb(253,215,39)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="1023.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,107 samples, 86.48%)</title><rect x="11.0938%" y="997" width="86.4844%" height="15" fill="rgb(221,220,41)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="1007.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,107 samples, 86.48%)</title><rect x="11.0938%" y="981" width="86.4844%" height="15" fill="rgb(218,133,21)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="991.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (1,107 samples, 86.48%)</title><rect x="11.0938%" y="965" width="86.4844%" height="15" fill="rgb(221,193,43)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="975.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,107 samples, 86.48%)</title><rect x="11.0938%" y="949" width="86.4844%" height="15" fill="rgb(240,128,52)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,107 samples, 86.48%)</title><rect x="11.0938%" y="933" width="86.4844%" height="15" fill="rgb(253,114,12)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,107 samples, 86.48%)</title><rect x="11.0938%" y="917" width="86.4844%" height="15" fill="rgb(215,223,47)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="927.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,107 samples, 86.48%)</title><rect x="11.0938%" y="901" width="86.4844%" height="15" fill="rgb(248,225,23)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="911.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1,107 samples, 86.48%)</title><rect x="11.0938%" y="885" width="86.4844%" height="15" fill="rgb(250,108,0)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="895.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,107 samples, 86.48%)</title><rect x="11.0938%" y="869" width="86.4844%" height="15" fill="rgb(228,208,7)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="879.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::run_test_inner::{{closure}} (1,107 samples, 86.48%)</title><rect x="11.0938%" y="853" width="86.4844%" height="15" fill="rgb(244,45,10)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="863.50">test::run_test::run_test_inner::{{closure}}</text></g><g><title>test::run_test::run_test_inner::{{closure}} (1,107 samples, 86.48%)</title><rect x="11.0938%" y="837" width="86.4844%" height="15" fill="rgb(207,125,25)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="847.50">test::run_test::run_test_inner::{{closure}}</text></g><g><title>test::run_test_in_process (1,107 samples, 86.48%)</title><rect x="11.0938%" y="821" width="86.4844%" height="15" fill="rgb(210,195,18)" fg:x="142" fg:w="1107"/><text x="11.3438%" y="831.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (1,106 samples, 86.41%)</title><rect x="11.1719%" y="805" width="86.4062%" height="15" fill="rgb(249,80,12)" fg:x="143" fg:w="1106"/><text x="11.4219%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,106 samples, 86.41%)</title><rect x="11.1719%" y="789" width="86.4062%" height="15" fill="rgb(221,65,9)" fg:x="143" fg:w="1106"/><text x="11.4219%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,106 samples, 86.41%)</title><rect x="11.1719%" y="773" width="86.4062%" height="15" fill="rgb(235,49,36)" fg:x="143" fg:w="1106"/><text x="11.4219%" y="783.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,106 samples, 86.41%)</title><rect x="11.1719%" y="757" width="86.4062%" height="15" fill="rgb(225,32,20)" fg:x="143" fg:w="1106"/><text x="11.4219%" y="767.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,106 samples, 86.41%)</title><rect x="11.1719%" y="741" width="86.4062%" height="15" fill="rgb(215,141,46)" fg:x="143" fg:w="1106"/><text x="11.4219%" y="751.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>test::__rust_begin_short_backtrace (1,106 samples, 86.41%)</title><rect x="11.1719%" y="725" width="86.4062%" height="15" fill="rgb(250,160,47)" fg:x="143" fg:w="1106"/><text x="11.4219%" y="735.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,106 samples, 86.41%)</title><rect x="11.1719%" y="709" width="86.4062%" height="15" fill="rgb(216,222,40)" fg:x="143" fg:w="1106"/><text x="11.4219%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>sweepers::solver::tests::cross_deduction (1,106 samples, 86.41%)</title><rect x="11.1719%" y="693" width="86.4062%" height="15" fill="rgb(234,217,39)" fg:x="143" fg:w="1106"/><text x="11.4219%" y="703.50">sweepers::solver::tests::cross_deduction</text></g><g><title>sweepers::solver::Solver::solve_dump (1,106 samples, 86.41%)</title><rect x="11.1719%" y="677" width="86.4062%" height="15" fill="rgb(207,178,40)" fg:x="143" fg:w="1106"/><text x="11.4219%" y="687.50">sweepers::solver::Solver::solve_dump</text></g><g><title>std::io::stdio::_print (35 samples, 2.73%)</title><rect x="94.8438%" y="661" width="2.7344%" height="15" fill="rgb(221,136,13)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="671.50">st..</text></g><g><title>std::io::stdio::print_to (35 samples, 2.73%)</title><rect x="94.8438%" y="645" width="2.7344%" height="15" fill="rgb(249,199,10)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="655.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (35 samples, 2.73%)</title><rect x="94.8438%" y="629" width="2.7344%" height="15" fill="rgb(249,222,13)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="639.50">st..</text></g><g><title>std::io::stdio::print_to::{{closure}} (35 samples, 2.73%)</title><rect x="94.8438%" y="613" width="2.7344%" height="15" fill="rgb(244,185,38)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="623.50">st..</text></g><g><title>core::option::Option&lt;T&gt;::map (35 samples, 2.73%)</title><rect x="94.8438%" y="597" width="2.7344%" height="15" fill="rgb(236,202,9)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="607.50">co..</text></g><g><title>std::io::stdio::print_to::{{closure}}::{{closure}} (35 samples, 2.73%)</title><rect x="94.8438%" y="581" width="2.7344%" height="15" fill="rgb(250,229,37)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="591.50">st..</text></g><g><title>std::io::Write::write_fmt (35 samples, 2.73%)</title><rect x="94.8438%" y="565" width="2.7344%" height="15" fill="rgb(206,174,23)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="575.50">st..</text></g><g><title>core::fmt::write (35 samples, 2.73%)</title><rect x="94.8438%" y="549" width="2.7344%" height="15" fill="rgb(211,33,43)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="559.50">co..</text></g><g><title>core::fmt::run (35 samples, 2.73%)</title><rect x="94.8438%" y="533" width="2.7344%" height="15" fill="rgb(245,58,50)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="543.50">co..</text></g><g><title>sweepers::solver::_DERIVE_core_fmt_Debug_FOR_Solver::&lt;impl core::fmt::Debug for sweepers::solver::Solver&gt;::fmt (35 samples, 2.73%)</title><rect x="94.8438%" y="517" width="2.7344%" height="15" fill="rgb(244,68,36)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="527.50">sw..</text></g><g><title>core::fmt::builders::DebugStruct::field (35 samples, 2.73%)</title><rect x="94.8438%" y="501" width="2.7344%" height="15" fill="rgb(232,229,15)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="511.50">co..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (35 samples, 2.73%)</title><rect x="94.8438%" y="485" width="2.7344%" height="15" fill="rgb(254,30,23)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="495.50">co..</text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (35 samples, 2.73%)</title><rect x="94.8438%" y="469" width="2.7344%" height="15" fill="rgb(235,160,14)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="479.50">co..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (35 samples, 2.73%)</title><rect x="94.8438%" y="453" width="2.7344%" height="15" fill="rgb(212,155,44)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="463.50">&lt;s..</text></g><g><title>core::fmt::builders::DebugSet::entry (35 samples, 2.73%)</title><rect x="94.8438%" y="437" width="2.7344%" height="15" fill="rgb(226,2,50)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="447.50">co..</text></g><g><title>core::fmt::builders::DebugInner::entry (35 samples, 2.73%)</title><rect x="94.8438%" y="421" width="2.7344%" height="15" fill="rgb(234,177,6)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="431.50">co..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (35 samples, 2.73%)</title><rect x="94.8438%" y="405" width="2.7344%" height="15" fill="rgb(217,24,9)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="415.50">co..</text></g><g><title>core::fmt::builders::DebugInner::entry::{{closure}} (35 samples, 2.73%)</title><rect x="94.8438%" y="389" width="2.7344%" height="15" fill="rgb(220,13,46)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="399.50">co..</text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (35 samples, 2.73%)</title><rect x="94.8438%" y="373" width="2.7344%" height="15" fill="rgb(239,221,27)" fg:x="1214" fg:w="35"/><text x="95.0938%" y="383.50">&lt;&amp;..</text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="97.5000%" y="357" width="0.0781%" height="15" fill="rgb(222,198,25)" fg:x="1248" fg:w="1"/><text x="97.7500%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="97.5000%" y="341" width="0.0781%" height="15" fill="rgb(211,99,13)" fg:x="1248" fg:w="1"/><text x="97.7500%" y="351.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="97.5000%" y="325" width="0.0781%" height="15" fill="rgb(232,111,31)" fg:x="1248" fg:w="1"/><text x="97.7500%" y="335.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.5000%" y="309" width="0.0781%" height="15" fill="rgb(245,82,37)" fg:x="1248" fg:w="1"/><text x="97.7500%" y="319.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.5000%" y="293" width="0.0781%" height="15" fill="rgb(227,149,46)" fg:x="1248" fg:w="1"/><text x="97.7500%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.08%)</title><rect x="97.5000%" y="277" width="0.0781%" height="15" fill="rgb(218,36,50)" fg:x="1248" fg:w="1"/><text x="97.7500%" y="287.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.08%)</title><rect x="97.5000%" y="261" width="0.0781%" height="15" fill="rgb(226,80,48)" fg:x="1248" fg:w="1"/><text x="97.7500%" y="271.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="97.5000%" y="245" width="0.0781%" height="15" fill="rgb(238,224,15)" fg:x="1248" fg:w="1"/><text x="97.7500%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.08%)</title><rect x="97.5000%" y="229" width="0.0781%" height="15" fill="rgb(241,136,10)" fg:x="1248" fg:w="1"/><text x="97.7500%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.5000%" y="213" width="0.0781%" height="15" fill="rgb(208,32,45)" fg:x="1248" fg:w="1"/><text x="97.7500%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.08%)</title><rect x="97.5781%" y="1061" width="0.0781%" height="15" fill="rgb(207,135,9)" fg:x="1249" fg:w="1"/><text x="97.8281%" y="1071.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (2 samples, 0.16%)</title><rect x="97.6562%" y="1061" width="0.1562%" height="15" fill="rgb(206,86,44)" fg:x="1250" fg:w="2"/><text x="97.9062%" y="1071.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.08%)</title><rect x="97.8125%" y="1061" width="0.0781%" height="15" fill="rgb(245,177,15)" fg:x="1252" fg:w="1"/><text x="98.0625%" y="1071.50"></text></g><g><title>solver::tests:: (1,256 samples, 98.12%)</title><rect x="0.0000%" y="1077" width="98.1250%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="1256"/><text x="0.2500%" y="1087.50">solver::tests::</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.23%)</title><rect x="97.8906%" y="1061" width="0.2344%" height="15" fill="rgb(234,36,40)" fg:x="1253" fg:w="3"/><text x="98.1406%" y="1071.50"></text></g><g><title>[[stack]] (1 samples, 0.08%)</title><rect x="98.1250%" y="1061" width="0.0781%" height="15" fill="rgb(213,64,8)" fg:x="1256" fg:w="1"/><text x="98.3750%" y="1071.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.08%)</title><rect x="98.1250%" y="1045" width="0.0781%" height="15" fill="rgb(210,75,36)" fg:x="1256" fg:w="1"/><text x="98.3750%" y="1055.50"></text></g><g><title>_fini (1 samples, 0.08%)</title><rect x="98.1250%" y="1029" width="0.0781%" height="15" fill="rgb(229,88,21)" fg:x="1256" fg:w="1"/><text x="98.3750%" y="1039.50"></text></g><g><title>__GI___clone (6 samples, 0.47%)</title><rect x="98.2031%" y="1061" width="0.4688%" height="15" fill="rgb(252,204,47)" fg:x="1257" fg:w="6"/><text x="98.4531%" y="1071.50"></text></g><g><title>start_thread (1 samples, 0.08%)</title><rect x="98.5938%" y="1045" width="0.0781%" height="15" fill="rgb(208,77,27)" fg:x="1262" fg:w="1"/><text x="98.8438%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.08%)</title><rect x="98.5938%" y="1029" width="0.0781%" height="15" fill="rgb(221,76,26)" fg:x="1262" fg:w="1"/><text x="98.8438%" y="1039.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (1 samples, 0.08%)</title><rect x="98.5938%" y="1013" width="0.0781%" height="15" fill="rgb(225,139,18)" fg:x="1262" fg:w="1"/><text x="98.8438%" y="1023.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.08%)</title><rect x="98.5938%" y="997" width="0.0781%" height="15" fill="rgb(230,137,11)" fg:x="1262" fg:w="1"/><text x="98.8438%" y="1007.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.08%)</title><rect x="98.5938%" y="981" width="0.0781%" height="15" fill="rgb(212,28,1)" fg:x="1262" fg:w="1"/><text x="98.8438%" y="991.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.08%)</title><rect x="98.5938%" y="965" width="0.0781%" height="15" fill="rgb(248,164,17)" fg:x="1262" fg:w="1"/><text x="98.8438%" y="975.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.08%)</title><rect x="98.5938%" y="949" width="0.0781%" height="15" fill="rgb(222,171,42)" fg:x="1262" fg:w="1"/><text x="98.8438%" y="959.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv_timeout (5 samples, 0.39%)</title><rect x="99.0625%" y="837" width="0.3906%" height="15" fill="rgb(243,84,45)" fg:x="1268" fg:w="5"/><text x="99.3125%" y="847.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv_deadline (5 samples, 0.39%)</title><rect x="99.0625%" y="821" width="0.3906%" height="15" fill="rgb(252,49,23)" fg:x="1268" fg:w="5"/><text x="99.3125%" y="831.50"></text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::recv (5 samples, 0.39%)</title><rect x="99.0625%" y="805" width="0.3906%" height="15" fill="rgb(215,19,7)" fg:x="1268" fg:w="5"/><text x="99.3125%" y="815.50"></text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait_max_until (5 samples, 0.39%)</title><rect x="99.0625%" y="789" width="0.3906%" height="15" fill="rgb(238,81,41)" fg:x="1268" fg:w="5"/><text x="99.3125%" y="799.50"></text></g><g><title>std::thread::park_timeout (5 samples, 0.39%)</title><rect x="99.0625%" y="773" width="0.3906%" height="15" fill="rgb(210,199,37)" fg:x="1268" fg:w="5"/><text x="99.3125%" y="783.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park_timeout (5 samples, 0.39%)</title><rect x="99.0625%" y="757" width="0.3906%" height="15" fill="rgb(244,192,49)" fg:x="1268" fg:w="5"/><text x="99.3125%" y="767.50"></text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 0.39%)</title><rect x="99.0625%" y="741" width="0.3906%" height="15" fill="rgb(226,211,11)" fg:x="1268" fg:w="5"/><text x="99.3125%" y="751.50"></text></g><g><title>syscall (5 samples, 0.39%)</title><rect x="99.0625%" y="725" width="0.3906%" height="15" fill="rgb(236,162,54)" fg:x="1268" fg:w="5"/><text x="99.3125%" y="735.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (1 samples, 0.08%)</title><rect x="99.4531%" y="837" width="0.0781%" height="15" fill="rgb(220,229,9)" fg:x="1273" fg:w="1"/><text x="99.7031%" y="847.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.08%)</title><rect x="99.4531%" y="821" width="0.0781%" height="15" fill="rgb(250,87,22)" fg:x="1273" fg:w="1"/><text x="99.7031%" y="831.50"></text></g><g><title>std::sys::unix::thread::Thread::join (1 samples, 0.08%)</title><rect x="99.4531%" y="805" width="0.0781%" height="15" fill="rgb(239,43,17)" fg:x="1273" fg:w="1"/><text x="99.7031%" y="815.50"></text></g><g><title>__pthread_clockjoin_ex (1 samples, 0.08%)</title><rect x="99.4531%" y="789" width="0.0781%" height="15" fill="rgb(231,177,25)" fg:x="1273" fg:w="1"/><text x="99.7031%" y="799.50"></text></g><g><title>__futex_abstimed_wait_common64 (1 samples, 0.08%)</title><rect x="99.4531%" y="773" width="0.0781%" height="15" fill="rgb(219,179,1)" fg:x="1273" fg:w="1"/><text x="99.7031%" y="783.50"></text></g><g><title>__libc_start_main (10 samples, 0.78%)</title><rect x="99.0625%" y="1045" width="0.7812%" height="15" fill="rgb(238,219,53)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="1055.50"></text></g><g><title>main (10 samples, 0.78%)</title><rect x="99.0625%" y="1029" width="0.7812%" height="15" fill="rgb(232,167,36)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="1039.50"></text></g><g><title>std::rt::lang_start_internal (10 samples, 0.78%)</title><rect x="99.0625%" y="1013" width="0.7812%" height="15" fill="rgb(244,19,51)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="1023.50"></text></g><g><title>std::panic::catch_unwind (10 samples, 0.78%)</title><rect x="99.0625%" y="997" width="0.7812%" height="15" fill="rgb(224,6,22)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="1007.50"></text></g><g><title>std::panicking::try (10 samples, 0.78%)</title><rect x="99.0625%" y="981" width="0.7812%" height="15" fill="rgb(224,145,5)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="991.50"></text></g><g><title>std::panicking::try::do_call (10 samples, 0.78%)</title><rect x="99.0625%" y="965" width="0.7812%" height="15" fill="rgb(234,130,49)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="975.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (10 samples, 0.78%)</title><rect x="99.0625%" y="949" width="0.7812%" height="15" fill="rgb(254,6,2)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="959.50"></text></g><g><title>std::rt::lang_start::{{closure}} (10 samples, 0.78%)</title><rect x="99.0625%" y="933" width="0.7812%" height="15" fill="rgb(208,96,46)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="943.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10 samples, 0.78%)</title><rect x="99.0625%" y="917" width="0.7812%" height="15" fill="rgb(239,3,39)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="927.50"></text></g><g><title>test::test_main_static (10 samples, 0.78%)</title><rect x="99.0625%" y="901" width="0.7812%" height="15" fill="rgb(233,210,1)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="911.50"></text></g><g><title>test::test_main (10 samples, 0.78%)</title><rect x="99.0625%" y="885" width="0.7812%" height="15" fill="rgb(244,137,37)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="895.50"></text></g><g><title>test::console::run_tests_console (10 samples, 0.78%)</title><rect x="99.0625%" y="869" width="0.7812%" height="15" fill="rgb(240,136,2)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="879.50"></text></g><g><title>test::run_tests (10 samples, 0.78%)</title><rect x="99.0625%" y="853" width="0.7812%" height="15" fill="rgb(239,18,37)" fg:x="1268" fg:w="10"/><text x="99.3125%" y="863.50"></text></g><g><title>test::console::run_tests_console::{{closure}} (4 samples, 0.31%)</title><rect x="99.5312%" y="837" width="0.3125%" height="15" fill="rgb(218,185,22)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="847.50"></text></g><g><title>test::console::on_test_event (4 samples, 0.31%)</title><rect x="99.5312%" y="821" width="0.3125%" height="15" fill="rgb(225,218,4)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="831.50"></text></g><g><title>&lt;test::event::TestEvent as core::clone::Clone&gt;::clone (4 samples, 0.31%)</title><rect x="99.5312%" y="805" width="0.3125%" height="15" fill="rgb(230,182,32)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="815.50"></text></g><g><title>&lt;test::event::CompletedTest as core::clone::Clone&gt;::clone (4 samples, 0.31%)</title><rect x="99.5312%" y="789" width="0.3125%" height="15" fill="rgb(242,56,43)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.31%)</title><rect x="99.5312%" y="773" width="0.3125%" height="15" fill="rgb(233,99,24)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.31%)</title><rect x="99.5312%" y="757" width="0.3125%" height="15" fill="rgb(234,209,42)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.31%)</title><rect x="99.5312%" y="741" width="0.3125%" height="15" fill="rgb(227,7,12)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.31%)</title><rect x="99.5312%" y="725" width="0.3125%" height="15" fill="rgb(245,203,43)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="735.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.31%)</title><rect x="99.5312%" y="709" width="0.3125%" height="15" fill="rgb(238,205,33)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.31%)</title><rect x="99.5312%" y="693" width="0.3125%" height="15" fill="rgb(231,56,7)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.31%)</title><rect x="99.5312%" y="677" width="0.3125%" height="15" fill="rgb(244,186,29)" fg:x="1274" fg:w="4"/><text x="99.7812%" y="687.50"></text></g><g><title>all (1,280 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="1280"/><text x="0.2500%" y="1103.50"></text></g><g><title>sweepers-4c2ea9 (24 samples, 1.88%)</title><rect x="98.1250%" y="1077" width="1.8750%" height="15" fill="rgb(241,149,10)" fg:x="1256" fg:w="24"/><text x="98.3750%" y="1087.50">s..</text></g><g><title>_start (17 samples, 1.33%)</title><rect x="98.6719%" y="1061" width="1.3281%" height="15" fill="rgb(249,206,44)" fg:x="1263" fg:w="17"/><text x="98.9219%" y="1071.50"></text></g><g><title>_dl_start (2 samples, 0.16%)</title><rect x="99.8438%" y="1045" width="0.1562%" height="15" fill="rgb(251,153,30)" fg:x="1278" fg:w="2"/><text x="100.0938%" y="1055.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.08%)</title><rect x="99.9219%" y="1029" width="0.0781%" height="15" fill="rgb(239,152,38)" fg:x="1279" fg:w="1"/><text x="100.1719%" y="1039.50"></text></g><g><title>dl_main (1 samples, 0.08%)</title><rect x="99.9219%" y="1013" width="0.0781%" height="15" fill="rgb(249,139,47)" fg:x="1279" fg:w="1"/><text x="100.1719%" y="1023.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.08%)</title><rect x="99.9219%" y="997" width="0.0781%" height="15" fill="rgb(244,64,35)" fg:x="1279" fg:w="1"/><text x="100.1719%" y="1007.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="99.9219%" y="981" width="0.0781%" height="15" fill="rgb(216,46,15)" fg:x="1279" fg:w="1"/><text x="100.1719%" y="991.50"></text></g><g><title>openaux (1 samples, 0.08%)</title><rect x="99.9219%" y="965" width="0.0781%" height="15" fill="rgb(250,74,19)" fg:x="1279" fg:w="1"/><text x="100.1719%" y="975.50"></text></g><g><title>_dl_map_object (1 samples, 0.08%)</title><rect x="99.9219%" y="949" width="0.0781%" height="15" fill="rgb(249,42,33)" fg:x="1279" fg:w="1"/><text x="100.1719%" y="959.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.08%)</title><rect x="99.9219%" y="933" width="0.0781%" height="15" fill="rgb(242,149,17)" fg:x="1279" fg:w="1"/><text x="100.1719%" y="943.50"></text></g><g><title>fstatat (1 samples, 0.08%)</title><rect x="99.9219%" y="917" width="0.0781%" height="15" fill="rgb(244,29,21)" fg:x="1279" fg:w="1"/><text x="100.1719%" y="927.50"></text></g></svg></svg>