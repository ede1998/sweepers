<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1270" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1253.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1253.00"> </text><svg id="frames" x="10" width="1180" total_samples="2976"><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.24%)</title><rect x="0.0000%" y="1189" width="0.2352%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="1199.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.10%)</title><rect x="0.2352%" y="1189" width="0.1008%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="3"/><text x="0.4852%" y="1199.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (2 samples, 0.07%)</title><rect x="0.3360%" y="1173" width="0.0672%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="2"/><text x="0.5860%" y="1183.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (6 samples, 0.20%)</title><rect x="0.4032%" y="1173" width="0.2016%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="6"/><text x="0.6532%" y="1183.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.10%)</title><rect x="0.6048%" y="1173" width="0.1008%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="3"/><text x="0.8548%" y="1183.50"></text></g><g><title>&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as sweepers::solver::Without&lt;T&gt;&gt;::without (1 samples, 0.03%)</title><rect x="0.7056%" y="1173" width="0.0336%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="1"/><text x="0.9556%" y="1183.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.17%)</title><rect x="0.7392%" y="1173" width="0.1680%" height="15" fill="rgb(207,160,47)" fg:x="22" fg:w="5"/><text x="0.9892%" y="1183.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.07%)</title><rect x="0.9073%" y="1173" width="0.0672%" height="15" fill="rgb(228,23,34)" fg:x="27" fg:w="2"/><text x="1.1573%" y="1183.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.03%)</title><rect x="0.9409%" y="1157" width="0.0336%" height="15" fill="rgb(218,30,26)" fg:x="28" fg:w="1"/><text x="1.1909%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="0.9745%" y="1173" width="0.0336%" height="15" fill="rgb(220,122,19)" fg:x="29" fg:w="1"/><text x="1.2245%" y="1183.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.71%)</title><rect x="1.0081%" y="1173" width="0.7056%" height="15" fill="rgb(250,228,42)" fg:x="30" fg:w="21"/><text x="1.2581%" y="1183.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="1.7137%" y="1173" width="0.0336%" height="15" fill="rgb(240,193,28)" fg:x="51" fg:w="1"/><text x="1.9637%" y="1183.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (2 samples, 0.07%)</title><rect x="1.7473%" y="1173" width="0.0672%" height="15" fill="rgb(216,20,37)" fg:x="52" fg:w="2"/><text x="1.9973%" y="1183.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.10%)</title><rect x="1.8145%" y="1173" width="0.1008%" height="15" fill="rgb(206,188,39)" fg:x="54" fg:w="3"/><text x="2.0645%" y="1183.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (2 samples, 0.07%)</title><rect x="1.9153%" y="1173" width="0.0672%" height="15" fill="rgb(217,207,13)" fg:x="57" fg:w="2"/><text x="2.1653%" y="1183.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (11 samples, 0.37%)</title><rect x="1.9825%" y="1173" width="0.3696%" height="15" fill="rgb(231,73,38)" fg:x="59" fg:w="11"/><text x="2.2325%" y="1183.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (5 samples, 0.17%)</title><rect x="2.3522%" y="1173" width="0.1680%" height="15" fill="rgb(225,20,46)" fg:x="70" fg:w="5"/><text x="2.6022%" y="1183.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (164 samples, 5.51%)</title><rect x="2.5202%" y="1173" width="5.5108%" height="15" fill="rgb(210,31,41)" fg:x="75" fg:w="164"/><text x="2.7702%" y="1183.50">alloc::..</text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.03%)</title><rect x="8.0309%" y="1173" width="0.0336%" height="15" fill="rgb(221,200,47)" fg:x="239" fg:w="1"/><text x="8.2809%" y="1183.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.03%)</title><rect x="8.0309%" y="1157" width="0.0336%" height="15" fill="rgb(226,26,5)" fg:x="239" fg:w="1"/><text x="8.2809%" y="1167.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.03%)</title><rect x="8.0309%" y="1141" width="0.0336%" height="15" fill="rgb(249,33,26)" fg:x="239" fg:w="1"/><text x="8.2809%" y="1151.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.03%)</title><rect x="8.0309%" y="1125" width="0.0336%" height="15" fill="rgb(235,183,28)" fg:x="239" fg:w="1"/><text x="8.2809%" y="1135.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.03%)</title><rect x="8.0645%" y="1173" width="0.0336%" height="15" fill="rgb(221,5,38)" fg:x="240" fg:w="1"/><text x="8.3145%" y="1183.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.10%)</title><rect x="8.0981%" y="1173" width="0.1008%" height="15" fill="rgb(247,18,42)" fg:x="241" fg:w="3"/><text x="8.3481%" y="1183.50"></text></g><g><title>[anon] (235 samples, 7.90%)</title><rect x="0.3360%" y="1189" width="7.8965%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="235"/><text x="0.5860%" y="1199.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.03%)</title><rect x="8.1989%" y="1173" width="0.0336%" height="15" fill="rgb(249,31,29)" fg:x="244" fg:w="1"/><text x="8.4489%" y="1183.50"></text></g><g><title>[sweepers-4c2ea9598e7bd92e] (1 samples, 0.03%)</title><rect x="8.2325%" y="1189" width="0.0336%" height="15" fill="rgb(225,111,53)" fg:x="245" fg:w="1"/><text x="8.4825%" y="1199.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="8.2325%" y="1173" width="0.0336%" height="15" fill="rgb(238,160,17)" fg:x="245" fg:w="1"/><text x="8.4825%" y="1183.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="8.2661%" y="1173" width="0.0672%" height="15" fill="rgb(214,148,48)" fg:x="246" fg:w="2"/><text x="8.5161%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48 samples, 1.61%)</title><rect x="8.3333%" y="1173" width="1.6129%" height="15" fill="rgb(232,36,49)" fg:x="248" fg:w="48"/><text x="8.5833%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="9.9462%" y="1173" width="0.0672%" height="15" fill="rgb(209,103,24)" fg:x="296" fg:w="2"/><text x="10.1962%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.20%)</title><rect x="10.0134%" y="1173" width="0.2016%" height="15" fill="rgb(229,88,8)" fg:x="298" fg:w="6"/><text x="10.2634%" y="1183.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (9 samples, 0.30%)</title><rect x="10.2151%" y="1173" width="0.3024%" height="15" fill="rgb(213,181,19)" fg:x="304" fg:w="9"/><text x="10.4651%" y="1183.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (49 samples, 1.65%)</title><rect x="10.5175%" y="1173" width="1.6465%" height="15" fill="rgb(254,191,54)" fg:x="313" fg:w="49"/><text x="10.7675%" y="1183.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (17 samples, 0.57%)</title><rect x="12.1640%" y="1173" width="0.5712%" height="15" fill="rgb(241,83,37)" fg:x="362" fg:w="17"/><text x="12.4140%" y="1183.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.07%)</title><rect x="12.7352%" y="1173" width="0.0672%" height="15" fill="rgb(233,36,39)" fg:x="379" fg:w="2"/><text x="12.9852%" y="1183.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (1 samples, 0.03%)</title><rect x="12.8024%" y="1173" width="0.0336%" height="15" fill="rgb(226,3,54)" fg:x="381" fg:w="1"/><text x="13.0524%" y="1183.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (7 samples, 0.24%)</title><rect x="12.8360%" y="1173" width="0.2352%" height="15" fill="rgb(245,192,40)" fg:x="382" fg:w="7"/><text x="13.0860%" y="1183.50"></text></g><g><title>[unknown] (147 samples, 4.94%)</title><rect x="8.2661%" y="1189" width="4.9395%" height="15" fill="rgb(238,167,29)" fg:x="246" fg:w="147"/><text x="8.5161%" y="1199.50">[unkno..</text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.13%)</title><rect x="13.0712%" y="1173" width="0.1344%" height="15" fill="rgb(232,182,51)" fg:x="389" fg:w="4"/><text x="13.3212%" y="1183.50"></text></g><g><title>__GI_madvise (1 samples, 0.03%)</title><rect x="13.2056%" y="1109" width="0.0336%" height="15" fill="rgb(231,60,39)" fg:x="393" fg:w="1"/><text x="13.4556%" y="1119.50"></text></g><g><title>__malloc_arena_thread_freeres (2 samples, 0.07%)</title><rect x="13.2056%" y="1157" width="0.0672%" height="15" fill="rgb(208,69,12)" fg:x="393" fg:w="2"/><text x="13.4556%" y="1167.50"></text></g><g><title>__GI___libc_free (2 samples, 0.07%)</title><rect x="13.2056%" y="1141" width="0.0672%" height="15" fill="rgb(235,93,37)" fg:x="393" fg:w="2"/><text x="13.4556%" y="1151.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="13.2056%" y="1125" width="0.0672%" height="15" fill="rgb(213,116,39)" fg:x="393" fg:w="2"/><text x="13.4556%" y="1135.50"></text></g><g><title>__GI_munmap (1 samples, 0.03%)</title><rect x="13.2392%" y="1109" width="0.0336%" height="15" fill="rgb(222,207,29)" fg:x="394" fg:w="1"/><text x="13.4892%" y="1119.50"></text></g><g><title>__GI_madvise (1 samples, 0.03%)</title><rect x="13.3065%" y="741" width="0.0336%" height="15" fill="rgb(206,96,30)" fg:x="396" fg:w="1"/><text x="13.5565%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.10%)</title><rect x="13.2728%" y="789" width="0.1008%" height="15" fill="rgb(218,138,4)" fg:x="395" fg:w="3"/><text x="13.5228%" y="799.50"></text></g><g><title>__GI___libc_free (3 samples, 0.10%)</title><rect x="13.2728%" y="773" width="0.1008%" height="15" fill="rgb(250,191,14)" fg:x="395" fg:w="3"/><text x="13.5228%" y="783.50"></text></g><g><title>_int_free (3 samples, 0.10%)</title><rect x="13.2728%" y="757" width="0.1008%" height="15" fill="rgb(239,60,40)" fg:x="395" fg:w="3"/><text x="13.5228%" y="767.50"></text></g><g><title>__GI_munmap (1 samples, 0.03%)</title><rect x="13.3401%" y="741" width="0.0336%" height="15" fill="rgb(206,27,48)" fg:x="397" fg:w="1"/><text x="13.5901%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.17%)</title><rect x="13.4409%" y="709" width="0.1680%" height="15" fill="rgb(225,35,8)" fg:x="400" fg:w="5"/><text x="13.6909%" y="719.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.10%)</title><rect x="13.5081%" y="693" width="0.1008%" height="15" fill="rgb(250,213,24)" fg:x="402" fg:w="3"/><text x="13.7581%" y="703.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="13.5417%" y="677" width="0.0672%" height="15" fill="rgb(247,123,22)" fg:x="403" fg:w="2"/><text x="13.7917%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.24%)</title><rect x="13.4073%" y="741" width="0.2352%" height="15" fill="rgb(231,138,38)" fg:x="399" fg:w="7"/><text x="13.6573%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as sweepers::solver::Without&lt;T&gt;&gt;::without (6 samples, 0.20%)</title><rect x="13.4409%" y="725" width="0.2016%" height="15" fill="rgb(231,145,46)" fg:x="400" fg:w="6"/><text x="13.6909%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::remove (1 samples, 0.03%)</title><rect x="13.6089%" y="709" width="0.0336%" height="15" fill="rgb(251,118,11)" fg:x="405" fg:w="1"/><text x="13.8589%" y="719.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.03%)</title><rect x="13.6089%" y="693" width="0.0336%" height="15" fill="rgb(217,147,25)" fg:x="405" fg:w="1"/><text x="13.8589%" y="703.50"></text></g><g><title>&lt;sweepers::solver::MaxRemoveLocations as sweepers::solver::Rule&gt;::derive (9 samples, 0.30%)</title><rect x="13.3737%" y="773" width="0.3024%" height="15" fill="rgb(247,81,37)" fg:x="398" fg:w="9"/><text x="13.6237%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.30%)</title><rect x="13.3737%" y="757" width="0.3024%" height="15" fill="rgb(209,12,38)" fg:x="398" fg:w="9"/><text x="13.6237%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="13.6425%" y="741" width="0.0336%" height="15" fill="rgb(227,1,9)" fg:x="406" fg:w="1"/><text x="13.8925%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="13.6425%" y="725" width="0.0336%" height="15" fill="rgb(248,47,43)" fg:x="406" fg:w="1"/><text x="13.8925%" y="735.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="13.6425%" y="709" width="0.0336%" height="15" fill="rgb(221,10,30)" fg:x="406" fg:w="1"/><text x="13.8925%" y="719.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="13.6425%" y="693" width="0.0336%" height="15" fill="rgb(210,229,1)" fg:x="406" fg:w="1"/><text x="13.8925%" y="703.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="13.6425%" y="677" width="0.0336%" height="15" fill="rgb(222,148,37)" fg:x="406" fg:w="1"/><text x="13.8925%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.40%)</title><rect x="17.2043%" y="709" width="0.4032%" height="15" fill="rgb(234,67,33)" fg:x="512" fg:w="12"/><text x="17.4543%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (3 samples, 0.10%)</title><rect x="17.5067%" y="693" width="0.1008%" height="15" fill="rgb(247,98,35)" fg:x="521" fg:w="3"/><text x="17.7567%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.10%)</title><rect x="17.6075%" y="709" width="0.1008%" height="15" fill="rgb(247,138,52)" fg:x="524" fg:w="3"/><text x="17.8575%" y="719.50"></text></g><g><title>__GI___libc_malloc (46 samples, 1.55%)</title><rect x="17.8763%" y="693" width="1.5457%" height="15" fill="rgb(213,79,30)" fg:x="532" fg:w="46"/><text x="18.1263%" y="703.50"></text></g><g><title>_int_malloc (40 samples, 1.34%)</title><rect x="18.0780%" y="677" width="1.3441%" height="15" fill="rgb(246,177,23)" fg:x="538" fg:w="40"/><text x="18.3280%" y="687.50"></text></g><g><title>sysmalloc (33 samples, 1.11%)</title><rect x="18.3132%" y="661" width="1.1089%" height="15" fill="rgb(230,62,27)" fg:x="545" fg:w="33"/><text x="18.5632%" y="671.50"></text></g><g><title>__GI___mprotect (19 samples, 0.64%)</title><rect x="18.7836%" y="645" width="0.6384%" height="15" fill="rgb(216,154,8)" fg:x="559" fg:w="19"/><text x="19.0336%" y="655.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="19.4220%" y="693" width="0.0336%" height="15" fill="rgb(244,35,45)" fg:x="578" fg:w="1"/><text x="19.6720%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="19.4220%" y="677" width="0.0336%" height="15" fill="rgb(251,115,12)" fg:x="578" fg:w="1"/><text x="19.6720%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (14 samples, 0.47%)</title><rect x="19.4556%" y="693" width="0.4704%" height="15" fill="rgb(240,54,50)" fg:x="579" fg:w="14"/><text x="19.7056%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (9 samples, 0.30%)</title><rect x="19.6237%" y="677" width="0.3024%" height="15" fill="rgb(233,84,52)" fg:x="584" fg:w="9"/><text x="19.8737%" y="687.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (99 samples, 3.33%)</title><rect x="16.9691%" y="741" width="3.3266%" height="15" fill="rgb(207,117,47)" fg:x="505" fg:w="99"/><text x="17.2191%" y="751.50">&lt;&amp;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (94 samples, 3.16%)</title><rect x="17.1371%" y="725" width="3.1586%" height="15" fill="rgb(249,43,39)" fg:x="510" fg:w="94"/><text x="17.3871%" y="735.50">&lt;co..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (77 samples, 2.59%)</title><rect x="17.7083%" y="709" width="2.5874%" height="15" fill="rgb(209,38,44)" fg:x="527" fg:w="77"/><text x="17.9583%" y="719.50">al..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (11 samples, 0.37%)</title><rect x="19.9261%" y="693" width="0.3696%" height="15" fill="rgb(236,212,23)" fg:x="593" fg:w="11"/><text x="20.1761%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.60%)</title><rect x="20.7325%" y="725" width="0.6048%" height="15" fill="rgb(242,79,21)" fg:x="617" fg:w="18"/><text x="20.9825%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (1 samples, 0.03%)</title><rect x="23.7567%" y="709" width="0.0336%" height="15" fill="rgb(211,96,35)" fg:x="707" fg:w="1"/><text x="24.0067%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.24%)</title><rect x="23.7903%" y="709" width="0.2352%" height="15" fill="rgb(253,215,40)" fg:x="708" fg:w="7"/><text x="24.0403%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (122 samples, 4.10%)</title><rect x="20.2957%" y="741" width="4.0995%" height="15" fill="rgb(211,81,21)" fg:x="604" fg:w="122"/><text x="20.5457%" y="751.50">&lt;cor..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (91 samples, 3.06%)</title><rect x="21.3374%" y="725" width="3.0578%" height="15" fill="rgb(208,190,38)" fg:x="635" fg:w="91"/><text x="21.5874%" y="735.50">all..</text></g><g><title>alloc::collections::btree::navigate::full_range (11 samples, 0.37%)</title><rect x="24.0255%" y="709" width="0.3696%" height="15" fill="rgb(235,213,38)" fg:x="715" fg:w="11"/><text x="24.2755%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 3.33%)</title><rect x="24.3952%" y="741" width="3.3266%" height="15" fill="rgb(237,122,38)" fg:x="726" fg:w="99"/><text x="24.6452%" y="751.50">&lt;ha..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (21 samples, 0.71%)</title><rect x="45.8669%" y="725" width="0.7056%" height="15" fill="rgb(244,218,35)" fg:x="1365" fg:w="21"/><text x="46.1169%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (117 samples, 3.93%)</title><rect x="46.5726%" y="725" width="3.9315%" height="15" fill="rgb(240,68,47)" fg:x="1386" fg:w="117"/><text x="46.8226%" y="735.50">allo..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (740 samples, 24.87%)</title><rect x="27.7218%" y="741" width="24.8656%" height="15" fill="rgb(210,16,53)" fg:x="825" fg:w="740"/><text x="27.9718%" y="751.50">alloc::collections::btree::set::BTreeSet..</text></g><g><title>alloc::collections::btree::navigate::full_range (62 samples, 2.08%)</title><rect x="50.5040%" y="725" width="2.0833%" height="15" fill="rgb(235,124,12)" fg:x="1503" fg:w="62"/><text x="50.7540%" y="735.50">a..</text></g><g><title>&lt;sweepers::solver::MaxWithinMinCombinator as sweepers::solver::Rule&gt;::derive (1,170 samples, 39.31%)</title><rect x="13.6761%" y="773" width="39.3145%" height="15" fill="rgb(224,169,11)" fg:x="407" fg:w="1170"/><text x="13.9261%" y="783.50">&lt;sweepers::solver::MaxWithinMinCombinator as sweepers::solver::R..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,170 samples, 39.31%)</title><rect x="13.6761%" y="757" width="39.3145%" height="15" fill="rgb(250,166,2)" fg:x="407" fg:w="1170"/><text x="13.9261%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.40%)</title><rect x="52.5874%" y="741" width="0.4032%" height="15" fill="rgb(242,216,29)" fg:x="1565" fg:w="12"/><text x="52.8374%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.40%)</title><rect x="52.5874%" y="725" width="0.4032%" height="15" fill="rgb(230,116,27)" fg:x="1565" fg:w="12"/><text x="52.8374%" y="735.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.40%)</title><rect x="52.5874%" y="709" width="0.4032%" height="15" fill="rgb(228,99,48)" fg:x="1565" fg:w="12"/><text x="52.8374%" y="719.50"></text></g><g><title>_int_realloc (12 samples, 0.40%)</title><rect x="52.5874%" y="693" width="0.4032%" height="15" fill="rgb(253,11,6)" fg:x="1565" fg:w="12"/><text x="52.8374%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.40%)</title><rect x="52.5874%" y="677" width="0.4032%" height="15" fill="rgb(247,143,39)" fg:x="1565" fg:w="12"/><text x="52.8374%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 1.18%)</title><rect x="57.5605%" y="709" width="1.1761%" height="15" fill="rgb(236,97,10)" fg:x="1713" fg:w="35"/><text x="57.8105%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (10 samples, 0.34%)</title><rect x="58.4005%" y="693" width="0.3360%" height="15" fill="rgb(233,208,19)" fg:x="1738" fg:w="10"/><text x="58.6505%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.20%)</title><rect x="58.7366%" y="709" width="0.2016%" height="15" fill="rgb(216,164,2)" fg:x="1748" fg:w="6"/><text x="58.9866%" y="719.50"></text></g><g><title>__GI___libc_malloc (77 samples, 2.59%)</title><rect x="59.5430%" y="693" width="2.5874%" height="15" fill="rgb(220,129,5)" fg:x="1772" fg:w="77"/><text x="59.7930%" y="703.50">__..</text></g><g><title>_int_malloc (58 samples, 1.95%)</title><rect x="60.1815%" y="677" width="1.9489%" height="15" fill="rgb(242,17,10)" fg:x="1791" fg:w="58"/><text x="60.4315%" y="687.50">_..</text></g><g><title>sysmalloc (49 samples, 1.65%)</title><rect x="60.4839%" y="661" width="1.6465%" height="15" fill="rgb(242,107,0)" fg:x="1800" fg:w="49"/><text x="60.7339%" y="671.50"></text></g><g><title>__GI___mprotect (30 samples, 1.01%)</title><rect x="61.1223%" y="645" width="1.0081%" height="15" fill="rgb(251,28,31)" fg:x="1819" fg:w="30"/><text x="61.3723%" y="655.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="62.1304%" y="693" width="0.0336%" height="15" fill="rgb(233,223,10)" fg:x="1849" fg:w="1"/><text x="62.3804%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (20 samples, 0.67%)</title><rect x="62.1640%" y="693" width="0.6720%" height="15" fill="rgb(215,21,27)" fg:x="1850" fg:w="20"/><text x="62.4140%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.47%)</title><rect x="62.3656%" y="677" width="0.4704%" height="15" fill="rgb(232,23,21)" fg:x="1856" fg:w="14"/><text x="62.6156%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (180 samples, 6.05%)</title><rect x="57.4261%" y="725" width="6.0484%" height="15" fill="rgb(244,5,23)" fg:x="1709" fg:w="180"/><text x="57.6761%" y="735.50">&lt;core::i..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (135 samples, 4.54%)</title><rect x="58.9382%" y="709" width="4.5363%" height="15" fill="rgb(226,81,46)" fg:x="1754" fg:w="135"/><text x="59.1882%" y="719.50">alloc..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (19 samples, 0.64%)</title><rect x="62.8360%" y="693" width="0.6384%" height="15" fill="rgb(247,70,30)" fg:x="1870" fg:w="19"/><text x="63.0860%" y="703.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::ops::arith::Sub&lt;&amp;alloc::collections::btree::set::BTreeSet&lt;T&gt;&gt;&gt;::sub (196 samples, 6.59%)</title><rect x="57.0901%" y="741" width="6.5860%" height="15" fill="rgb(212,68,19)" fg:x="1699" fg:w="196"/><text x="57.3401%" y="751.50">&lt;&amp;alloc::..</text></g><g><title>alloc::collections::btree::navigate::full_range (6 samples, 0.20%)</title><rect x="63.4745%" y="725" width="0.2016%" height="15" fill="rgb(240,187,13)" fg:x="1889" fg:w="6"/><text x="63.7245%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.34%)</title><rect x="63.7769%" y="725" width="0.3360%" height="15" fill="rgb(223,113,26)" fg:x="1898" fg:w="10"/><text x="64.0269%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.74%)</title><rect x="63.6761%" y="741" width="0.7392%" height="15" fill="rgb(206,192,2)" fg:x="1895" fg:w="22"/><text x="63.9261%" y="751.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (9 samples, 0.30%)</title><rect x="64.1129%" y="725" width="0.3024%" height="15" fill="rgb(241,108,4)" fg:x="1908" fg:w="9"/><text x="64.3629%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.03%)</title><rect x="64.3817%" y="709" width="0.0336%" height="15" fill="rgb(247,173,49)" fg:x="1916" fg:w="1"/><text x="64.6317%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (172 samples, 5.78%)</title><rect x="64.4153%" y="741" width="5.7796%" height="15" fill="rgb(224,114,35)" fg:x="1917" fg:w="172"/><text x="64.6653%" y="751.50">&lt;hashbr..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (17 samples, 0.57%)</title><rect x="84.6102%" y="725" width="0.5712%" height="15" fill="rgb(245,159,27)" fg:x="2518" fg:w="17"/><text x="84.8602%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (86 samples, 2.89%)</title><rect x="85.1815%" y="725" width="2.8898%" height="15" fill="rgb(245,172,44)" fg:x="2535" fg:w="86"/><text x="85.4315%" y="735.50">al..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T&gt;::is_subset (564 samples, 18.95%)</title><rect x="70.1949%" y="741" width="18.9516%" height="15" fill="rgb(236,23,11)" fg:x="2089" fg:w="564"/><text x="70.4449%" y="751.50">alloc::collections::btree::set..</text></g><g><title>alloc::collections::btree::navigate::full_range (32 samples, 1.08%)</title><rect x="88.0712%" y="725" width="1.0753%" height="15" fill="rgb(205,117,38)" fg:x="2621" fg:w="32"/><text x="88.3212%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,266 samples, 76.14%)</title><rect x="13.3737%" y="789" width="76.1425%" height="15" fill="rgb(237,72,25)" fg:x="398" fg:w="2266"/><text x="13.6237%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;sweepers::solver::MinWithinMaxCombinator as sweepers::solver::Rule&gt;::derive (1,087 samples, 36.53%)</title><rect x="52.9906%" y="773" width="36.5255%" height="15" fill="rgb(244,70,9)" fg:x="1577" fg:w="1087"/><text x="53.2406%" y="783.50">&lt;sweepers::solver::MinWithinMaxCombinator as sweepers::solv..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,087 samples, 36.53%)</title><rect x="52.9906%" y="757" width="36.5255%" height="15" fill="rgb(217,125,39)" fg:x="1577" fg:w="1087"/><text x="53.2406%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFrom..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.37%)</title><rect x="89.1465%" y="741" width="0.3696%" height="15" fill="rgb(235,36,10)" fg:x="2653" fg:w="11"/><text x="89.3965%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.37%)</title><rect x="89.1465%" y="725" width="0.3696%" height="15" fill="rgb(251,123,47)" fg:x="2653" fg:w="11"/><text x="89.3965%" y="735.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.37%)</title><rect x="89.1465%" y="709" width="0.3696%" height="15" fill="rgb(221,13,13)" fg:x="2653" fg:w="11"/><text x="89.3965%" y="719.50"></text></g><g><title>_int_realloc (11 samples, 0.37%)</title><rect x="89.1465%" y="693" width="0.3696%" height="15" fill="rgb(238,131,9)" fg:x="2653" fg:w="11"/><text x="89.3965%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.37%)</title><rect x="89.1465%" y="677" width="0.3696%" height="15" fill="rgb(211,50,8)" fg:x="2653" fg:w="11"/><text x="89.3965%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="89.9194%" y="757" width="0.0336%" height="15" fill="rgb(245,182,24)" fg:x="2676" fg:w="1"/><text x="90.1694%" y="767.50"></text></g><g><title>__GI_munmap (1 samples, 0.03%)</title><rect x="89.9194%" y="741" width="0.0336%" height="15" fill="rgb(242,14,37)" fg:x="2676" fg:w="1"/><text x="90.1694%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (46 samples, 1.55%)</title><rect x="90.9274%" y="741" width="1.5457%" height="15" fill="rgb(246,228,12)" fg:x="2706" fg:w="46"/><text x="91.1774%" y="751.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (10 samples, 0.34%)</title><rect x="92.1371%" y="725" width="0.3360%" height="15" fill="rgb(213,55,15)" fg:x="2742" fg:w="10"/><text x="92.3871%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (7 samples, 0.24%)</title><rect x="93.2796%" y="725" width="0.2352%" height="15" fill="rgb(209,9,3)" fg:x="2776" fg:w="7"/><text x="93.5296%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (115 samples, 3.86%)</title><rect x="92.4731%" y="741" width="3.8642%" height="15" fill="rgb(230,59,30)" fg:x="2752" fg:w="115"/><text x="92.7231%" y="751.50">&lt;all..</text></g><g><title>core::hash::Hasher::write_usize (84 samples, 2.82%)</title><rect x="93.5148%" y="725" width="2.8226%" height="15" fill="rgb(209,121,21)" fg:x="2783" fg:w="84"/><text x="93.7648%" y="735.50">co..</text></g><g><title>__GI___libc_free (33 samples, 1.11%)</title><rect x="96.5054%" y="725" width="1.1089%" height="15" fill="rgb(220,109,13)" fg:x="2872" fg:w="33"/><text x="96.7554%" y="735.50"></text></g><g><title>_int_free (29 samples, 0.97%)</title><rect x="96.6398%" y="709" width="0.9745%" height="15" fill="rgb(232,18,1)" fg:x="2876" fg:w="29"/><text x="96.8898%" y="719.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.10%)</title><rect x="97.5134%" y="693" width="0.1008%" height="15" fill="rgb(215,41,42)" fg:x="2902" fg:w="3"/><text x="97.7634%" y="703.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="97.6142%" y="725" width="0.0336%" height="15" fill="rgb(224,123,36)" fg:x="2905" fg:w="1"/><text x="97.8642%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 1.55%)</title><rect x="96.3374%" y="741" width="1.5457%" height="15" fill="rgb(240,125,3)" fg:x="2867" fg:w="46"/><text x="96.5874%" y="751.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (7 samples, 0.24%)</title><rect x="97.6478%" y="725" width="0.2352%" height="15" fill="rgb(205,98,50)" fg:x="2906" fg:w="7"/><text x="97.8978%" y="735.50"></text></g><g><title>core::hash::Hasher::write_usize (11 samples, 0.37%)</title><rect x="97.8831%" y="741" width="0.3696%" height="15" fill="rgb(205,185,37)" fg:x="2913" fg:w="11"/><text x="98.1331%" y="751.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (261 samples, 8.77%)</title><rect x="89.5161%" y="789" width="8.7702%" height="15" fill="rgb(238,207,15)" fg:x="2664" fg:w="261"/><text x="89.7661%" y="799.50">&lt;hashbrown::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (261 samples, 8.77%)</title><rect x="89.5161%" y="773" width="8.7702%" height="15" fill="rgb(213,199,42)" fg:x="2664" fg:w="261"/><text x="89.7661%" y="783.50">&lt;core::iter:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (248 samples, 8.33%)</title><rect x="89.9530%" y="757" width="8.3333%" height="15" fill="rgb(235,201,11)" fg:x="2677" fg:w="248"/><text x="90.2030%" y="767.50">hashbrown::m..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.03%)</title><rect x="98.2527%" y="741" width="0.0336%" height="15" fill="rgb(207,46,11)" fg:x="2924" fg:w="1"/><text x="98.5027%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="98.2527%" y="725" width="0.0336%" height="15" fill="rgb(241,35,35)" fg:x="2924" fg:w="1"/><text x="98.5027%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="98.2527%" y="709" width="0.0336%" height="15" fill="rgb(243,32,47)" fg:x="2924" fg:w="1"/><text x="98.5027%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="98.2527%" y="693" width="0.0336%" height="15" fill="rgb(247,202,23)" fg:x="2924" fg:w="1"/><text x="98.5027%" y="703.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.03%)</title><rect x="98.2527%" y="677" width="0.0336%" height="15" fill="rgb(219,102,11)" fg:x="2924" fg:w="1"/><text x="98.5027%" y="687.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.03%)</title><rect x="98.2863%" y="485" width="0.0336%" height="15" fill="rgb(243,110,44)" fg:x="2925" fg:w="1"/><text x="98.5363%" y="495.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.03%)</title><rect x="98.2863%" y="469" width="0.0336%" height="15" fill="rgb(222,74,54)" fg:x="2925" fg:w="1"/><text x="98.5363%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.03%)</title><rect x="98.2863%" y="453" width="0.0336%" height="15" fill="rgb(216,99,12)" fg:x="2925" fg:w="1"/><text x="98.5363%" y="463.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.2863%" y="437" width="0.0336%" height="15" fill="rgb(226,22,26)" fg:x="2925" fg:w="1"/><text x="98.5363%" y="447.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.2863%" y="421" width="0.0336%" height="15" fill="rgb(217,163,10)" fg:x="2925" fg:w="1"/><text x="98.5363%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.03%)</title><rect x="98.2863%" y="405" width="0.0336%" height="15" fill="rgb(213,25,53)" fg:x="2925" fg:w="1"/><text x="98.5363%" y="415.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.03%)</title><rect x="98.2863%" y="389" width="0.0336%" height="15" fill="rgb(252,105,26)" fg:x="2925" fg:w="1"/><text x="98.5363%" y="399.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.03%)</title><rect x="98.2863%" y="373" width="0.0336%" height="15" fill="rgb(220,39,43)" fg:x="2925" fg:w="1"/><text x="98.5363%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.03%)</title><rect x="98.2863%" y="357" width="0.0336%" height="15" fill="rgb(229,68,48)" fg:x="2925" fg:w="1"/><text x="98.5363%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="98.2863%" y="341" width="0.0336%" height="15" fill="rgb(252,8,32)" fg:x="2925" fg:w="1"/><text x="98.5363%" y="351.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.07%)</title><rect x="98.3199%" y="437" width="0.0672%" height="15" fill="rgb(223,20,43)" fg:x="2926" fg:w="2"/><text x="98.5699%" y="447.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.07%)</title><rect x="98.3199%" y="421" width="0.0672%" height="15" fill="rgb(229,81,49)" fg:x="2926" fg:w="2"/><text x="98.5699%" y="431.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.07%)</title><rect x="98.3199%" y="405" width="0.0672%" height="15" fill="rgb(236,28,36)" fg:x="2926" fg:w="2"/><text x="98.5699%" y="415.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.07%)</title><rect x="98.3199%" y="389" width="0.0672%" height="15" fill="rgb(249,185,26)" fg:x="2926" fg:w="2"/><text x="98.5699%" y="399.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.3535%" y="373" width="0.0336%" height="15" fill="rgb(249,174,33)" fg:x="2927" fg:w="1"/><text x="98.6035%" y="383.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.3535%" y="357" width="0.0336%" height="15" fill="rgb(233,201,37)" fg:x="2927" fg:w="1"/><text x="98.6035%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="98.3535%" y="341" width="0.0336%" height="15" fill="rgb(221,78,26)" fg:x="2927" fg:w="1"/><text x="98.6035%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="98.3535%" y="325" width="0.0336%" height="15" fill="rgb(250,127,30)" fg:x="2927" fg:w="1"/><text x="98.6035%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="98.3535%" y="309" width="0.0336%" height="15" fill="rgb(230,49,44)" fg:x="2927" fg:w="1"/><text x="98.6035%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="98.3535%" y="293" width="0.0336%" height="15" fill="rgb(229,67,23)" fg:x="2927" fg:w="1"/><text x="98.6035%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="98.3535%" y="277" width="0.0336%" height="15" fill="rgb(249,83,47)" fg:x="2927" fg:w="1"/><text x="98.6035%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="98.3535%" y="261" width="0.0336%" height="15" fill="rgb(215,43,3)" fg:x="2927" fg:w="1"/><text x="98.6035%" y="271.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (4 samples, 0.13%)</title><rect x="98.3871%" y="357" width="0.1344%" height="15" fill="rgb(238,154,13)" fg:x="2928" fg:w="4"/><text x="98.6371%" y="367.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (4 samples, 0.13%)</title><rect x="98.3871%" y="341" width="0.1344%" height="15" fill="rgb(219,56,2)" fg:x="2928" fg:w="4"/><text x="98.6371%" y="351.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (4 samples, 0.13%)</title><rect x="98.3871%" y="325" width="0.1344%" height="15" fill="rgb(233,0,4)" fg:x="2928" fg:w="4"/><text x="98.6371%" y="335.50"></text></g><g><title>core::unicode::unicode_data::skip_search (4 samples, 0.13%)</title><rect x="98.3871%" y="309" width="0.1344%" height="15" fill="rgb(235,30,7)" fg:x="2928" fg:w="4"/><text x="98.6371%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (4 samples, 0.13%)</title><rect x="98.3871%" y="293" width="0.1344%" height="15" fill="rgb(250,79,13)" fg:x="2928" fg:w="4"/><text x="98.6371%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (4 samples, 0.13%)</title><rect x="98.3871%" y="277" width="0.1344%" height="15" fill="rgb(211,146,34)" fg:x="2928" fg:w="4"/><text x="98.6371%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (1 samples, 0.03%)</title><rect x="98.4879%" y="261" width="0.0336%" height="15" fill="rgb(228,22,38)" fg:x="2931" fg:w="1"/><text x="98.7379%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (1 samples, 0.03%)</title><rect x="98.4879%" y="245" width="0.0336%" height="15" fill="rgb(235,168,5)" fg:x="2931" fg:w="1"/><text x="98.7379%" y="255.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (5 samples, 0.17%)</title><rect x="98.3871%" y="373" width="0.1680%" height="15" fill="rgb(221,155,16)" fg:x="2928" fg:w="5"/><text x="98.6371%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.03%)</title><rect x="98.5215%" y="357" width="0.0336%" height="15" fill="rgb(215,215,53)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="367.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.5215%" y="341" width="0.0336%" height="15" fill="rgb(223,4,10)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="351.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.5215%" y="325" width="0.0336%" height="15" fill="rgb(234,103,6)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="335.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.5215%" y="309" width="0.0336%" height="15" fill="rgb(227,97,0)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="319.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.5215%" y="293" width="0.0336%" height="15" fill="rgb(234,150,53)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="303.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.5215%" y="277" width="0.0336%" height="15" fill="rgb(228,201,54)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.03%)</title><rect x="98.5215%" y="261" width="0.0336%" height="15" fill="rgb(222,22,37)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="98.5215%" y="245" width="0.0336%" height="15" fill="rgb(237,53,32)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="98.5215%" y="229" width="0.0336%" height="15" fill="rgb(233,25,53)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="98.5215%" y="213" width="0.0336%" height="15" fill="rgb(210,40,34)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="98.5215%" y="197" width="0.0336%" height="15" fill="rgb(241,220,44)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="98.5215%" y="181" width="0.0336%" height="15" fill="rgb(235,28,35)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="98.5215%" y="165" width="0.0336%" height="15" fill="rgb(210,56,17)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="98.5215%" y="149" width="0.0336%" height="15" fill="rgb(224,130,29)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="98.5215%" y="133" width="0.0336%" height="15" fill="rgb(235,212,8)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="98.5215%" y="117" width="0.0336%" height="15" fill="rgb(223,33,50)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="98.5215%" y="101" width="0.0336%" height="15" fill="rgb(219,149,13)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="98.5215%" y="85" width="0.0336%" height="15" fill="rgb(250,156,29)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="95.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="98.5215%" y="69" width="0.0336%" height="15" fill="rgb(216,193,19)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="79.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="98.5215%" y="53" width="0.0336%" height="15" fill="rgb(216,135,14)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="98.5215%" y="37" width="0.0336%" height="15" fill="rgb(241,47,5)" fg:x="2932" fg:w="1"/><text x="98.7715%" y="47.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (3 samples, 0.10%)</title><rect x="98.5551%" y="325" width="0.1008%" height="15" fill="rgb(233,42,35)" fg:x="2933" fg:w="3"/><text x="98.8051%" y="335.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (3 samples, 0.10%)</title><rect x="98.5551%" y="309" width="0.1008%" height="15" fill="rgb(231,13,6)" fg:x="2933" fg:w="3"/><text x="98.8051%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (3 samples, 0.10%)</title><rect x="98.5551%" y="293" width="0.1008%" height="15" fill="rgb(207,181,40)" fg:x="2933" fg:w="3"/><text x="98.8051%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3 samples, 0.10%)</title><rect x="98.5551%" y="277" width="0.1008%" height="15" fill="rgb(254,173,49)" fg:x="2933" fg:w="3"/><text x="98.8051%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (3 samples, 0.10%)</title><rect x="98.5551%" y="261" width="0.1008%" height="15" fill="rgb(221,1,38)" fg:x="2933" fg:w="3"/><text x="98.8051%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3 samples, 0.10%)</title><rect x="98.5551%" y="245" width="0.1008%" height="15" fill="rgb(206,124,46)" fg:x="2933" fg:w="3"/><text x="98.8051%" y="255.50"></text></g><g><title>core::slice::memchr::memchr::{{closure}} (1 samples, 0.03%)</title><rect x="98.6223%" y="229" width="0.0336%" height="15" fill="rgb(249,21,11)" fg:x="2935" fg:w="1"/><text x="98.8723%" y="239.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (4 samples, 0.13%)</title><rect x="98.5551%" y="341" width="0.1344%" height="15" fill="rgb(222,201,40)" fg:x="2933" fg:w="4"/><text x="98.8051%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.03%)</title><rect x="98.6559%" y="325" width="0.0336%" height="15" fill="rgb(235,61,29)" fg:x="2936" fg:w="1"/><text x="98.9059%" y="335.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.03%)</title><rect x="98.6559%" y="309" width="0.0336%" height="15" fill="rgb(219,207,3)" fg:x="2936" fg:w="1"/><text x="98.9059%" y="319.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.03%)</title><rect x="98.6559%" y="293" width="0.0336%" height="15" fill="rgb(222,56,46)" fg:x="2936" fg:w="1"/><text x="98.9059%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.03%)</title><rect x="98.6559%" y="277" width="0.0336%" height="15" fill="rgb(239,76,54)" fg:x="2936" fg:w="1"/><text x="98.9059%" y="287.50"></text></g><g><title>core::slice::memchr::memchr::{{closure}} (1 samples, 0.03%)</title><rect x="98.6559%" y="261" width="0.0336%" height="15" fill="rgb(231,124,27)" fg:x="2936" fg:w="1"/><text x="98.9059%" y="271.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (10 samples, 0.34%)</title><rect x="98.3871%" y="421" width="0.3360%" height="15" fill="rgb(249,195,6)" fg:x="2928" fg:w="10"/><text x="98.6371%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (10 samples, 0.34%)</title><rect x="98.3871%" y="405" width="0.3360%" height="15" fill="rgb(237,174,47)" fg:x="2928" fg:w="10"/><text x="98.6371%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (10 samples, 0.34%)</title><rect x="98.3871%" y="389" width="0.3360%" height="15" fill="rgb(206,201,31)" fg:x="2928" fg:w="10"/><text x="98.6371%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_str (5 samples, 0.17%)</title><rect x="98.5551%" y="373" width="0.1680%" height="15" fill="rgb(231,57,52)" fg:x="2933" fg:w="5"/><text x="98.8051%" y="383.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (5 samples, 0.17%)</title><rect x="98.5551%" y="357" width="0.1680%" height="15" fill="rgb(248,177,22)" fg:x="2933" fg:w="5"/><text x="98.8051%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.03%)</title><rect x="98.6895%" y="341" width="0.0336%" height="15" fill="rgb(215,211,37)" fg:x="2937" fg:w="1"/><text x="98.9395%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::index (1 samples, 0.03%)</title><rect x="98.6895%" y="325" width="0.0336%" height="15" fill="rgb(241,128,51)" fg:x="2937" fg:w="1"/><text x="98.9395%" y="335.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeTo&lt;usize&gt;&gt;::get (1 samples, 0.03%)</title><rect x="98.6895%" y="309" width="0.0336%" height="15" fill="rgb(227,165,31)" fg:x="2937" fg:w="1"/><text x="98.9395%" y="319.50"></text></g><g><title>sweepers::solver::_DERIVE_core_fmt_Debug_FOR_FactDebug::&lt;impl core::fmt::Debug for sweepers::solver::FactDebug&gt;::fmt (11 samples, 0.37%)</title><rect x="98.3871%" y="437" width="0.3696%" height="15" fill="rgb(228,167,24)" fg:x="2928" fg:w="11"/><text x="98.6371%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.03%)</title><rect x="98.7231%" y="421" width="0.0336%" height="15" fill="rgb(228,143,12)" fg:x="2938" fg:w="1"/><text x="98.9731%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.03%)</title><rect x="98.7231%" y="405" width="0.0336%" height="15" fill="rgb(249,149,8)" fg:x="2938" fg:w="1"/><text x="98.9731%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.03%)</title><rect x="98.7231%" y="389" width="0.0336%" height="15" fill="rgb(243,35,44)" fg:x="2938" fg:w="1"/><text x="98.9731%" y="399.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.7231%" y="373" width="0.0336%" height="15" fill="rgb(246,89,9)" fg:x="2938" fg:w="1"/><text x="98.9731%" y="383.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.7231%" y="357" width="0.0336%" height="15" fill="rgb(233,213,13)" fg:x="2938" fg:w="1"/><text x="98.9731%" y="367.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.7231%" y="341" width="0.0336%" height="15" fill="rgb(233,141,41)" fg:x="2938" fg:w="1"/><text x="98.9731%" y="351.50"></text></g><g><title>&lt;u64 as core::fmt::num::DisplayInt&gt;::to_u64 (1 samples, 0.03%)</title><rect x="98.7903%" y="277" width="0.0336%" height="15" fill="rgb(239,167,4)" fg:x="2940" fg:w="1"/><text x="99.0403%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.03%)</title><rect x="98.8575%" y="245" width="0.0336%" height="15" fill="rgb(209,217,16)" fg:x="2942" fg:w="1"/><text x="99.1075%" y="255.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.03%)</title><rect x="98.8575%" y="229" width="0.0336%" height="15" fill="rgb(219,88,35)" fg:x="2942" fg:w="1"/><text x="99.1075%" y="239.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.03%)</title><rect x="98.8575%" y="213" width="0.0336%" height="15" fill="rgb(220,193,23)" fg:x="2942" fg:w="1"/><text x="99.1075%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.03%)</title><rect x="98.8575%" y="197" width="0.0336%" height="15" fill="rgb(230,90,52)" fg:x="2942" fg:w="1"/><text x="99.1075%" y="207.50"></text></g><g><title>core::slice::memchr::memchr::{{closure}} (1 samples, 0.03%)</title><rect x="98.8575%" y="181" width="0.0336%" height="15" fill="rgb(252,106,19)" fg:x="2942" fg:w="1"/><text x="99.1075%" y="191.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (3 samples, 0.10%)</title><rect x="98.8239%" y="261" width="0.1008%" height="15" fill="rgb(206,74,20)" fg:x="2941" fg:w="3"/><text x="99.0739%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.03%)</title><rect x="98.8911%" y="245" width="0.0336%" height="15" fill="rgb(230,138,44)" fg:x="2943" fg:w="1"/><text x="99.1411%" y="255.50"></text></g><g><title>__GI___clone (2,552 samples, 85.75%)</title><rect x="13.2056%" y="1189" width="85.7527%" height="15" fill="rgb(235,182,43)" fg:x="393" fg:w="2552"/><text x="13.4556%" y="1199.50">__GI___clone</text></g><g><title>start_thread (2,552 samples, 85.75%)</title><rect x="13.2056%" y="1173" width="85.7527%" height="15" fill="rgb(242,16,51)" fg:x="393" fg:w="2552"/><text x="13.4556%" y="1183.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2,550 samples, 85.69%)</title><rect x="13.2728%" y="1157" width="85.6855%" height="15" fill="rgb(248,9,4)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1167.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2,550 samples, 85.69%)</title><rect x="13.2728%" y="1141" width="85.6855%" height="15" fill="rgb(210,31,22)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1151.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2,550 samples, 85.69%)</title><rect x="13.2728%" y="1125" width="85.6855%" height="15" fill="rgb(239,54,39)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1135.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2,550 samples, 85.69%)</title><rect x="13.2728%" y="1109" width="85.6855%" height="15" fill="rgb(230,99,41)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1119.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (2,550 samples, 85.69%)</title><rect x="13.2728%" y="1093" width="85.6855%" height="15" fill="rgb(253,106,12)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1103.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,550 samples, 85.69%)</title><rect x="13.2728%" y="1077" width="85.6855%" height="15" fill="rgb(213,46,41)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1087.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,550 samples, 85.69%)</title><rect x="13.2728%" y="1061" width="85.6855%" height="15" fill="rgb(215,133,35)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1071.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,550 samples, 85.69%)</title><rect x="13.2728%" y="1045" width="85.6855%" height="15" fill="rgb(213,28,5)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1055.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,550 samples, 85.69%)</title><rect x="13.2728%" y="1029" width="85.6855%" height="15" fill="rgb(215,77,49)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1039.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (2,550 samples, 85.69%)</title><rect x="13.2728%" y="1013" width="85.6855%" height="15" fill="rgb(248,100,22)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1023.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,550 samples, 85.69%)</title><rect x="13.2728%" y="997" width="85.6855%" height="15" fill="rgb(208,67,9)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="1007.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::run_test_inner::{{closure}} (2,550 samples, 85.69%)</title><rect x="13.2728%" y="981" width="85.6855%" height="15" fill="rgb(219,133,21)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="991.50">test::run_test::run_test_inner::{{closure}}</text></g><g><title>test::run_test::run_test_inner::{{closure}} (2,550 samples, 85.69%)</title><rect x="13.2728%" y="965" width="85.6855%" height="15" fill="rgb(246,46,29)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="975.50">test::run_test::run_test_inner::{{closure}}</text></g><g><title>test::run_test_in_process (2,550 samples, 85.69%)</title><rect x="13.2728%" y="949" width="85.6855%" height="15" fill="rgb(246,185,52)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="959.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (2,550 samples, 85.69%)</title><rect x="13.2728%" y="933" width="85.6855%" height="15" fill="rgb(252,136,11)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,550 samples, 85.69%)</title><rect x="13.2728%" y="917" width="85.6855%" height="15" fill="rgb(219,138,53)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,550 samples, 85.69%)</title><rect x="13.2728%" y="901" width="85.6855%" height="15" fill="rgb(211,51,23)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="911.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,550 samples, 85.69%)</title><rect x="13.2728%" y="885" width="85.6855%" height="15" fill="rgb(247,221,28)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="895.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2,550 samples, 85.69%)</title><rect x="13.2728%" y="869" width="85.6855%" height="15" fill="rgb(251,222,45)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="879.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>test::__rust_begin_short_backtrace (2,550 samples, 85.69%)</title><rect x="13.2728%" y="853" width="85.6855%" height="15" fill="rgb(217,162,53)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="863.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,550 samples, 85.69%)</title><rect x="13.2728%" y="837" width="85.6855%" height="15" fill="rgb(229,93,14)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="847.50">core::ops::function::FnOnce::call_once</text></g><g><title>sweepers::solver::tests::cross_deduction (2,550 samples, 85.69%)</title><rect x="13.2728%" y="821" width="85.6855%" height="15" fill="rgb(209,67,49)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="831.50">sweepers::solver::tests::cross_deduction</text></g><g><title>sweepers::solver::Solver::solve_dump (2,550 samples, 85.69%)</title><rect x="13.2728%" y="805" width="85.6855%" height="15" fill="rgb(213,87,29)" fg:x="395" fg:w="2550"/><text x="13.5228%" y="815.50">sweepers::solver::Solver::solve_dump</text></g><g><title>std::io::stdio::_print (20 samples, 0.67%)</title><rect x="98.2863%" y="789" width="0.6720%" height="15" fill="rgb(205,151,52)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="799.50"></text></g><g><title>std::io::stdio::print_to (20 samples, 0.67%)</title><rect x="98.2863%" y="773" width="0.6720%" height="15" fill="rgb(253,215,39)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 0.67%)</title><rect x="98.2863%" y="757" width="0.6720%" height="15" fill="rgb(221,220,41)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="767.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (20 samples, 0.67%)</title><rect x="98.2863%" y="741" width="0.6720%" height="15" fill="rgb(218,133,21)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.67%)</title><rect x="98.2863%" y="725" width="0.6720%" height="15" fill="rgb(221,193,43)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="735.50"></text></g><g><title>std::io::stdio::print_to::{{closure}}::{{closure}} (20 samples, 0.67%)</title><rect x="98.2863%" y="709" width="0.6720%" height="15" fill="rgb(240,128,52)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="719.50"></text></g><g><title>std::io::Write::write_fmt (20 samples, 0.67%)</title><rect x="98.2863%" y="693" width="0.6720%" height="15" fill="rgb(253,114,12)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="703.50"></text></g><g><title>core::fmt::write (20 samples, 0.67%)</title><rect x="98.2863%" y="677" width="0.6720%" height="15" fill="rgb(215,223,47)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="687.50"></text></g><g><title>core::fmt::run (20 samples, 0.67%)</title><rect x="98.2863%" y="661" width="0.6720%" height="15" fill="rgb(248,225,23)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="671.50"></text></g><g><title>sweepers::solver::_DERIVE_core_fmt_Debug_FOR_Solver::&lt;impl core::fmt::Debug for sweepers::solver::Solver&gt;::fmt (20 samples, 0.67%)</title><rect x="98.2863%" y="645" width="0.6720%" height="15" fill="rgb(250,108,0)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="655.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (20 samples, 0.67%)</title><rect x="98.2863%" y="629" width="0.6720%" height="15" fill="rgb(228,208,7)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (20 samples, 0.67%)</title><rect x="98.2863%" y="613" width="0.6720%" height="15" fill="rgb(244,45,10)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (20 samples, 0.67%)</title><rect x="98.2863%" y="597" width="0.6720%" height="15" fill="rgb(207,125,25)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="607.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (20 samples, 0.67%)</title><rect x="98.2863%" y="581" width="0.6720%" height="15" fill="rgb(210,195,18)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="591.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (20 samples, 0.67%)</title><rect x="98.2863%" y="565" width="0.6720%" height="15" fill="rgb(249,80,12)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="575.50"></text></g><g><title>core::fmt::builders::DebugInner::entry (20 samples, 0.67%)</title><rect x="98.2863%" y="549" width="0.6720%" height="15" fill="rgb(221,65,9)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (20 samples, 0.67%)</title><rect x="98.2863%" y="533" width="0.6720%" height="15" fill="rgb(235,49,36)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="543.50"></text></g><g><title>core::fmt::builders::DebugInner::entry::{{closure}} (20 samples, 0.67%)</title><rect x="98.2863%" y="517" width="0.6720%" height="15" fill="rgb(225,32,20)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="527.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (20 samples, 0.67%)</title><rect x="98.2863%" y="501" width="0.6720%" height="15" fill="rgb(215,141,46)" fg:x="2925" fg:w="20"/><text x="98.5363%" y="511.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (19 samples, 0.64%)</title><rect x="98.3199%" y="485" width="0.6384%" height="15" fill="rgb(250,160,47)" fg:x="2926" fg:w="19"/><text x="98.5699%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (19 samples, 0.64%)</title><rect x="98.3199%" y="469" width="0.6384%" height="15" fill="rgb(216,222,40)" fg:x="2926" fg:w="19"/><text x="98.5699%" y="479.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (19 samples, 0.64%)</title><rect x="98.3199%" y="453" width="0.6384%" height="15" fill="rgb(234,217,39)" fg:x="2926" fg:w="19"/><text x="98.5699%" y="463.50"></text></g><g><title>sweepers::solver::set_fmt (6 samples, 0.20%)</title><rect x="98.7567%" y="437" width="0.2016%" height="15" fill="rgb(207,178,40)" fg:x="2939" fg:w="6"/><text x="99.0067%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (5 samples, 0.17%)</title><rect x="98.7903%" y="421" width="0.1680%" height="15" fill="rgb(221,136,13)" fg:x="2940" fg:w="5"/><text x="99.0403%" y="431.50"></text></g><g><title>core::fmt::write (5 samples, 0.17%)</title><rect x="98.7903%" y="405" width="0.1680%" height="15" fill="rgb(249,199,10)" fg:x="2940" fg:w="5"/><text x="99.0403%" y="415.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (5 samples, 0.17%)</title><rect x="98.7903%" y="389" width="0.1680%" height="15" fill="rgb(249,222,13)" fg:x="2940" fg:w="5"/><text x="99.0403%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (5 samples, 0.17%)</title><rect x="98.7903%" y="373" width="0.1680%" height="15" fill="rgb(244,185,38)" fg:x="2940" fg:w="5"/><text x="99.0403%" y="383.50"></text></g><g><title>core::fmt::write (5 samples, 0.17%)</title><rect x="98.7903%" y="357" width="0.1680%" height="15" fill="rgb(236,202,9)" fg:x="2940" fg:w="5"/><text x="99.0403%" y="367.50"></text></g><g><title>&lt;sweepers::core::location::Bounded as core::fmt::Display&gt;::fmt (5 samples, 0.17%)</title><rect x="98.7903%" y="341" width="0.1680%" height="15" fill="rgb(250,229,37)" fg:x="2940" fg:w="5"/><text x="99.0403%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (5 samples, 0.17%)</title><rect x="98.7903%" y="325" width="0.1680%" height="15" fill="rgb(206,174,23)" fg:x="2940" fg:w="5"/><text x="99.0403%" y="335.50"></text></g><g><title>core::fmt::write (5 samples, 0.17%)</title><rect x="98.7903%" y="309" width="0.1680%" height="15" fill="rgb(211,33,43)" fg:x="2940" fg:w="5"/><text x="99.0403%" y="319.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (5 samples, 0.17%)</title><rect x="98.7903%" y="293" width="0.1680%" height="15" fill="rgb(245,58,50)" fg:x="2940" fg:w="5"/><text x="99.0403%" y="303.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (4 samples, 0.13%)</title><rect x="98.8239%" y="277" width="0.1344%" height="15" fill="rgb(244,68,36)" fg:x="2941" fg:w="4"/><text x="99.0739%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.03%)</title><rect x="98.9247%" y="261" width="0.0336%" height="15" fill="rgb(232,229,15)" fg:x="2944" fg:w="1"/><text x="99.1747%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.03%)</title><rect x="98.9247%" y="245" width="0.0336%" height="15" fill="rgb(254,30,23)" fg:x="2944" fg:w="1"/><text x="99.1747%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="98.9583%" y="1189" width="0.0672%" height="15" fill="rgb(235,160,14)" fg:x="2945" fg:w="2"/><text x="99.2083%" y="1199.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (3 samples, 0.10%)</title><rect x="99.0255%" y="1189" width="0.1008%" height="15" fill="rgb(212,155,44)" fg:x="2947" fg:w="3"/><text x="99.2755%" y="1199.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (8 samples, 0.27%)</title><rect x="99.1263%" y="1189" width="0.2688%" height="15" fill="rgb(226,2,50)" fg:x="2950" fg:w="8"/><text x="99.3763%" y="1199.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (2 samples, 0.07%)</title><rect x="99.3952%" y="1189" width="0.0672%" height="15" fill="rgb(234,177,6)" fg:x="2958" fg:w="2"/><text x="99.6452%" y="1199.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.07%)</title><rect x="99.4624%" y="1189" width="0.0672%" height="15" fill="rgb(217,24,9)" fg:x="2960" fg:w="2"/><text x="99.7124%" y="1199.50"></text></g><g><title>solver::tests:: (2,963 samples, 99.56%)</title><rect x="0.0000%" y="1205" width="99.5632%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="2963"/><text x="0.2500%" y="1215.50">solver::tests::</text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.03%)</title><rect x="99.5296%" y="1189" width="0.0336%" height="15" fill="rgb(239,221,27)" fg:x="2962" fg:w="1"/><text x="99.7796%" y="1199.50"></text></g><g><title>__GI___clone (6 samples, 0.20%)</title><rect x="99.5632%" y="1189" width="0.2016%" height="15" fill="rgb(222,198,25)" fg:x="2963" fg:w="6"/><text x="99.8132%" y="1199.50"></text></g><g><title>start_thread (1 samples, 0.03%)</title><rect x="99.7312%" y="1173" width="0.0336%" height="15" fill="rgb(211,99,13)" fg:x="2968" fg:w="1"/><text x="99.9812%" y="1183.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.03%)</title><rect x="99.7312%" y="1157" width="0.0336%" height="15" fill="rgb(232,111,31)" fg:x="2968" fg:w="1"/><text x="99.9812%" y="1167.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (1 samples, 0.03%)</title><rect x="99.7312%" y="1141" width="0.0336%" height="15" fill="rgb(245,82,37)" fg:x="2968" fg:w="1"/><text x="99.9812%" y="1151.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.03%)</title><rect x="99.7312%" y="1125" width="0.0336%" height="15" fill="rgb(227,149,46)" fg:x="2968" fg:w="1"/><text x="99.9812%" y="1135.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.03%)</title><rect x="99.7312%" y="1109" width="0.0336%" height="15" fill="rgb(218,36,50)" fg:x="2968" fg:w="1"/><text x="99.9812%" y="1119.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.03%)</title><rect x="99.7312%" y="1093" width="0.0336%" height="15" fill="rgb(226,80,48)" fg:x="2968" fg:w="1"/><text x="99.9812%" y="1103.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.03%)</title><rect x="99.7312%" y="1077" width="0.0336%" height="15" fill="rgb(238,224,15)" fg:x="2968" fg:w="1"/><text x="99.9812%" y="1087.50"></text></g><g><title>all (2,976 samples, 100%)</title><rect x="0.0000%" y="1221" width="100.0000%" height="15" fill="rgb(241,136,10)" fg:x="0" fg:w="2976"/><text x="0.2500%" y="1231.50"></text></g><g><title>sweepers-4c2ea9 (13 samples, 0.44%)</title><rect x="99.5632%" y="1205" width="0.4368%" height="15" fill="rgb(208,32,45)" fg:x="2963" fg:w="13"/><text x="99.8132%" y="1215.50"></text></g><g><title>_start (7 samples, 0.24%)</title><rect x="99.7648%" y="1189" width="0.2352%" height="15" fill="rgb(207,135,9)" fg:x="2969" fg:w="7"/><text x="100.0148%" y="1199.50"></text></g><g><title>_dl_start (2 samples, 0.07%)</title><rect x="99.9328%" y="1173" width="0.0672%" height="15" fill="rgb(206,86,44)" fg:x="2974" fg:w="2"/><text x="100.1828%" y="1183.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="99.9664%" y="1157" width="0.0336%" height="15" fill="rgb(245,177,15)" fg:x="2975" fg:w="1"/><text x="100.2164%" y="1167.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="99.9664%" y="1141" width="0.0336%" height="15" fill="rgb(206,64,50)" fg:x="2975" fg:w="1"/><text x="100.2164%" y="1151.50"></text></g><g><title>init_tls (1 samples, 0.03%)</title><rect x="99.9664%" y="1125" width="0.0336%" height="15" fill="rgb(234,36,40)" fg:x="2975" fg:w="1"/><text x="100.2164%" y="1135.50"></text></g><g><title>_dl_allocate_tls_storage (1 samples, 0.03%)</title><rect x="99.9664%" y="1109" width="0.0336%" height="15" fill="rgb(213,64,8)" fg:x="2975" fg:w="1"/><text x="100.2164%" y="1119.50"></text></g></svg></svg>